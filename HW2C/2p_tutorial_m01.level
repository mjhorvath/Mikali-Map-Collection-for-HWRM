-- (2P) Tutorial Mission No.3 v1.0.6 by Mikali
-- Created: 2005/09/27
-- Updated: 2015/02/26
-- Homepage: http://isometricland.net
-- Teams: Top vs. Bottom

levelDesc = "<c=4284A4>Tutorial Mission No.3 1.0.6</c>"
maxPlayers = 2
player = {}

for k = 0, (maxPlayers - 1) do
	player[k] = {id = k, name = "Vaygr", resources = 1500, raceID = 2, startPos = 1,}
end

function DetermChunk()
	setWorldBoundsInner( { 0, 0, 0, }, { 30000, 30000, 30000, })
	-- value set in m03
--	setWorldBoundsInner( { 0, 0, 0, }, { 38314.52, 38314.52, 38314.52, })

	for i, iCount in StartPoints do
		addPoint(iCount[1], iCount[2], iCount[3])
	end
	for i, iCount in EasyPatches do
		easyPatch(iCount[1])
	end
	for i, iCount in Squadrons do
		addSquadron(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5], iCount[6], iCount[7])
	end
	for i, iCount in DustClouds do
		addDustCloud(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5], iCount[6])
	end
	for i, iCount in Asteroids do
		addAsteroid(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5], iCount[6], iCount[7])
	end

end

function NonDetermChunk()
	for i, iCount in Pebbles do
		addPebble(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5])
	end
	for i, iCount in Clouds do
		addCloud(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5], iCount[6])
	end

	fogSetActive(0)
	setGlareIntensity(0)
	setLevelShadowColour(0, 0, 0, 1)
	loadBackground("m03")
	setSensorsManagerCameraDistances(12000, 60000)
	setDefaultMusic("Data:sound/music/STAGING/STAGING_04")
end

StartPoints =
{
	{"StartPos0", {19093.25, 158.875, 6012.8,}, {0, 270, 0,},},
	{"StartPos1", {-12988.42857, 476.5714286, 6012.8,}, {0, 90, 0,},},
}

EasyPatches = {}

Asteroids =
{
	-- middle patch in m01, non-existant in m03
	{"Asteroid_3", { 4366, 653, -3624, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 4384, 427, -3514, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 4783, 340, -2524, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 5081, 250, -3011, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3142, 727, -2951, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3924, 810, -2575, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3627, 178, -3461, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3502, 856, -3587, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 4412, 878, -3300, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 4382, 518, -2135, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 3528, -1212, -3151, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 4163, -608, -3619, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 5402, -16, -2730, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 4732, -259, -4696, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 3300, -688, -4672, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 3534, 467, -4177, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 5909, -882, -2884, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 5077, 402, -3741, }, 100, 0, 0, 0, 0,},
	{"Asteroid_4", { 6882, 167, -2908, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 6485, -1185, -3511, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 6258, -808, -3208, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 6542, 316, -3372, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 6008, 72, -4086, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 6012, 693, -2941, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3714, -1178, -3597, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3504, -883, -2947, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 2690, -310, -2036, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 4129, -270, -4926, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 2973, 589, -1150, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 4054, 921, -2767, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 2692, 1296, -3085, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 6467, 723, -3406, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 5416, 1117, -3347, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3930, 2197, -3152, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3787, 3182, -3421, }, 100, 0, 0, 0, 0,},
	{"Asteroid_3", { 3987, 3549, -3285, }, 100, 0, 0, 0, 0,},
	-- player 0 patch
	{"Asteroid_3", { 18729, 69, 10289, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 19688, 289, 11256, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 19688, 106, 11768, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 18764, 482, 9992, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 19267, 507, 10454, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 19226, 158, 11138, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 18917, -277, 10134, }, 5, 0, 0, 0, 0,},
	{"Asteroid_3", { 18467, -63, 10495, }, 5, 0, 0, 0, 0,},
	-- player 1 patch
	{"Asteroid_3", { -13152, 228, 926, }, 5, 0, 0, 0, 0,},		-- was 15%
	{"Asteroid_3", { -12874, 539, 321, }, 5, 0, 0, 0, 0,},		-- was 15%
	{"Asteroid_3", { -12820, 751, 1008, }, 5, 0, 0, 0, 0,},		-- was 15%
	{"Asteroid_3", { -12520, 624, 619, }, 5, 0, 0, 0, 0,},		-- was 15%
	{"Asteroid_3", { -13127, 188, 400, }, 5, 0, 0, 0, 0,},		-- was 15%
	{"Asteroid_3", { -13132, 901, 376, }, 5, 0, 0, 0, 0,},		-- was Asteroid_4
	{"Asteroid_4", { -13294, 105, 1016, }, 5, 0, 0, 0, 0,},
	-- out-of-bounds in m01, in-bounds in m03 (but unbalanced)
--	{"Asteroid_3", { -27958, 3400, 19424, }, 5, 0, 0, 0, 0,},
--	{"Asteroid_3", { -26831, 2549, 14793, }, 3, 0, 0, 0, 0,},
--	{"Asteroid_3", { -25773, 4828, 19282, }, 1, 0, 0, 0, 0,},
--	{"Asteroid_3", { -27454, 2069, 18022, }, 3, 0, 0, 0, 0,},
--	{"Asteroid_3", { -21600, 3853, 19275, }, 3, 0, 0, 0, 0,},
--	{"Asteroid_3", { -27904, 5459, 18084, }, 1, 0, 0, 0, 0,},
--	{"Asteroid_3", { -26256, 2516, 20324, }, 1, 0, 0, 0, 0,},
--	{"Asteroid_3", { -24695, 6206, 18568, }, 3, 0, 0, 0, 0,},
	-- more in the middle...
	{"Asteroid_5", { 6391, 333, -3082, }, 100, 0, 0, 0, 0,},
	{"Asteroid_5", { 5888, -321, -3015, }, 100, 0, 0, 0, 0,},
	{"Asteroid_5", { 5641, 248, -3084, }, 100, 0, 0, 0, 0,},
	-- various scattered asteroids in m03, non-existant in m03
--	{"Asteroid_3", { -16592, -2045, -22743, }, 100, 0, 0, 0, 0},
--	{"Asteroid_3", { -16661, -3630, -22255, }, 100, 0, 0, 0, 0},
--	{"Asteroid_3", { 20711, 141, 24321, }, 100, 0, 0, 0, 0},
--	{"Asteroid_3", { 12267, 1657, -13414, }, 100, 0, 0, 0, 0},
--	{"Asteroid_3", { 15284, 4165, -15762, }, 100, 0, 0, 0, 0},
--	{"Asteroid_3", { -2633, 1503, 6403, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { -15160, -204, 316, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { 18983, -3790, 18524, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { 13191, 766, -5935, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { -7346, 2622, -36965, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { 14532, 76, 29778, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { -17550, -4282, 4986, }, 100, 0, 0, 0, 0},
--	{"Asteroid_4", { -14008, 920, 2711, }, 100, 0, 0, 0, 0},
}

Squadrons = {}

DustClouds =
{
	{"polySurface4", "DustCloud_teal", { -8816, -4434, 19363, }, { 0.962, 0.95, 1, 1, }, 116.975, 4002.345,},
	{"polySurface4", "DustCloud_teal", { -7450, -1818, 22067, }, { 0.962, 0.95, 1, 1, }, 72.534, 4002.345,},
	{"polySurface4", "DustCloud_teal", { -5223, -2040, 24373, }, { 0.716, 0.41743, 0.54611, 0.475, }, 45.023, 3446.609,},
	{"polySurface4", "DustCloud_teal", { -4312, -4598, 26496, }, { 0.716, 0.41743, 0.54611, 0.475, }, 321.821, 3446.609,},
	{"polySurface4", "DustCloud_teal", { 107, -4781, 25426, }, { 0.716, 0.41743, 0.54611, 0.475, }, 79.961, 4424.681,},
	{"polySurface4", "DustCloud_teal", { 2685, -4382, 29000, }, { 0.716, 0.41743, 0.54611, 0.475, }, 201.627, 4424.681,},
	{"polySurface4", "DustCloud_teal", { 16463, 13581, 47836, }, { 0.962, 0.95, 1, 1, }, 152.517, 18785.705,},
	{"polySurface4", "DustCloud_teal", { 7269, 467, 36530, }, { 0.962, 0.95, 1, 1, }, 311.087, 20417.047,},
	{"polySurface4", "DustCloud_teal", { 4650, -7088, 21668, }, { 0.716, 0.41743, 0.54611, 0.475, }, 96.265, 5215.22,},
	{"polySurface4", "DustCloud_teal", { -4618, -4336, 22190, }, { 0.716, 0.41743, 0.54611, 0.475, }, 245.398, 2127.869,},
	{"polySurface4", "DustCloud_teal", { -6687, -4113, 21749, }, { 0.962, 0.95, 1, 1, }, 345.179, 6093.519,},
	{"polySurface4", "DustCloud_teal", { -11085, -3364, 14018, }, { 0.962, 0.95, 1, 1, }, 283.764, 2864.598,},
	{"polySurface4", "DustCloud_teal", { -14261, -250, 7878, }, { 0.962, 0.95, 1, 1, }, 294.618, 1454.097,},
	{"polySurface4", "DustCloud_teal", { -14763, 62, 4802, }, { 0.962, 0.95, 1, 1, }, 48.88, 1796.259,},
	{"polySurface4", "DustCloud_teal", { -14531, -1129, 8090, }, { 0.962, 0.95, 1, 1, }, 7.229, 1993.169,},
	{"polySurface4", "DustCloud_teal", { -14063, -491, 10743, }, { 0.962, 0.95, 1, 1, }, 269.393, 4117.615,},
	{"polySurface4", "DustCloud_teal", { -12382, -5182, 15521, }, { 0.962, 0.95, 1, 1, }, 324.766, 3279.922,},
	{"polySurface4", "DustCloud_teal", { 8004, 223, 37692, }, { 0.962, 0.95, 1, 1, }, 276.446, 18785.705,},
	{"polySurface4", "DustCloud_teal", { 36746, 15076, 112006, }, { 0.716, 0.12029, 0.37704, 0.177, }, 227.149, 7895.267,},
	{"polySurface4", "DustCloud_teal", { 1909, 210, 33209, }, { 0.716, 0.41743, 0.54611, 0.475, }, 245.673, 7565.74,},
	{"polySurface4", "DustCloud_teal", { -13116, 294, 9823, }, { 0.962, 0.95, 1, 1, }, 180.159, 1328.414,},
	{"polySurface4", "DustCloud_teal", { 13894, 15797, 48275, }, { 0.962, 0.95, 1, 1, }, 95.738, 20417.047,},
	{"polySurface4", "DustCloud_teal", { 5960, -3310, 29099, }, { 0.716, 0.41743, 0.54611, 0.475, }, 232.785, 3223.018,},
	{"polySurface4", "DustCloud_teal", { 24873, 17706, 67572, }, { 0.962, 0.95, 1, 1, }, 94.903, 8966.263,},
	{"polySurface4", "DustCloud_teal", { 25516, 17152, 67463, }, { 0.962, 0.95, 1, 1, }, 165.624, 8914.822,},
	{"polySurface4", "DustCloud_teal", { 21449, 20446, 90699, }, { 0.716, 0.41743, 0.54611, 0.475, }, 126.577, 12904.678,},
	{"polySurface4", "DustCloud_teal", { 26487, 19879, 100981, }, { 0.716, 0.41743, 0.54611, 0.475, }, 171.557, 15442.637,},
	{"polySurface4", "DustCloud_teal", { 22741, 21808, 76943, }, { 0.716, 0.41743, 0.54611, 0.475, }, 145.398, 6175.538,},
	{"polySurface4", "DustCloud_teal", { 24725, 20642, 80765, }, { 0.716, 0.41743, 0.54611, 0.475, }, 9.943, 7875.06,},
	{"polySurface4", "DustCloud_teal", { 32385, 16138, 105511, }, { 0.716, 0.41743, 0.54611, 0.475, }, 214.866, 7895.267,},
	{"polySurface4", "DustCloud_teal", { 21675, 17648, 59196, }, { 0.962, 0.95, 1, 1, }, 155.582, 13536.55,},
	{"polySurface4", "DustCloud_teal", { 22638, 16817, 59032, }, { 0.962, 0.95, 1, 1, }, 137.872, 13189.071,},
	{"polySurface4", "DustCloud_teal", { 24986, 18597, 73165, }, { 0.716, 0.41743, 0.54611, 0.475, }, 3.626, 7875.06,},
	{"polySurface4", "DustCloud_teal", { 23672, 19457, 71308, }, { 0.962, 0.95, 1, 1, }, 311.472, 6175.538,},
	{"polySurface4", "DustCloud_teal", { 23884, 20840, 85789, }, { 0.716, 0.41743, 0.54611, 0.475, }, 251.869, 15442.637,},
	{"polySurface4", "DustCloud_teal", { 20808, 21554, 82512, }, { 0.716, 0.41743, 0.54611, 0.475, }, 216.844, 8286.353,},
	{"polySurface4", "DustCloud_teal", { 28548, 17869, 101163, }, { 0.716, 0.41743, 0.54611, 0.475, }, 201.462, 12904.678,},
	{"polySurface4", "DustCloud_teal", { 31898, 17129, 106617, }, { 0.716, 0.41743, 0.54611, 0.475, }, 136.158, 8282.467,},
	{"polySurface4", "DustCloud_teal", { -13956, -513, 9896, }, { 0.962, 0.95, 1, 1, }, 337.444, 1993.169,},
	{"polySurface4", "DustCloud_teal", { -13540, 292, 9019, }, { 0.962, 0.95, 1, 1, }, 347.08, 1454.097,},
	{"polySurface4", "DustCloud_teal", { -10277, -6434, 17549, }, { 0.962, 0.95, 1, 1, }, 210.23, 3179.841,},
	{"polySurface4", "DustCloud_teal", { -9377, -3592, 16306, }, { 0.962, 0.95, 1, 1, }, 146.529, 6093.519,},
	{"polySurface4", "DustCloud_teal", { -10248, -5366, 16487, }, { 0.962, 0.95, 1, 1, }, 179.489, 1983.708,},
	{"polySurface4", "DustCloud_teal", { -2858, -4673, 25814, }, { 0.716, 0.41743, 0.54611, 0.475, }, 314.922, 2991.633,},
	{"polySurface4", "DustCloud_teal", { -3189, -4760, 22110, }, { 0.716, 0.41743, 0.54611, 0.475, }, 281.346, 5648.344,},
	{"polySurface4", "DustCloud_teal", { -3473, -3382, 23677, }, { 0.716, 0.41743, 0.54611, 0.475, }, 211.834, 2570.905,},
	{"polySurface4", "DustCloud_teal", { 2350, -2401, 30816, }, { 0.716, 0.41743, 0.54611, 0.475, }, 100.55, 3569.172,},
	{"polySurface4", "DustCloud_teal", { 6174, -2692, 30315, }, { 0.75627, 0.5046, 0.6204, 0.56093, }, 314.79, 7057.074,},
	{"polySurface4", "DustCloud_teal", { 3497, -2100, 31272, }, { 0.72942, 0.44648, 0.57088, 0.50364, }, 108.504, 1492.14,},
	{"polySurface4", "DustCloud_teal", { 4974, -2208, 31452, }, { 0.74284, 0.47554, 0.59564, 0.53229, }, 311.977, 1722.289,},
	{"polySurface4", "DustCloud_teal", { 2217, -6366, 21805, }, { 0.716, 0.41743, 0.54611, 0.475, }, 68.656, 5648.344,},
	{"polySurface4", "DustCloud_teal", { 5459, -4753, 26260, }, { 0.716, 0.41743, 0.54611, 0.475, }, 320.525, 5215.22,},
	{"polySurface4", "DustCloud_teal", { 2668, -5505, 23453, }, { 0.716, 0.41743, 0.54611, 0.475, }, 10.36, 1941.773,},
	{"polySurface4", "DustCloud_teal", { 3713, -5034, 25020, }, { 0.716, 0.41743, 0.54611, 0.475, }, 21.325, 2160.071,},
	{"polySurface4", "DustCloud_teal", { -14270, -133, 7067, }, { 0.962, 0.95, 1, 1, }, 92.497, 1285.891,},
	{"polySurface4", "DustCloud_teal", { -15072, -325, 6529, }, { 0.962, 0.95, 1, 1, }, 41.804, 1837.714,},
	{"polySurface4", "DustCloud_teal", { -14536, 353, 5906, }, { 0.962, 0.95, 1, 1, }, 178.16, 1285.891,},
	{"polySurface4", "DustCloud_teal", { -12872, 220, 11127, }, { 0.962, 0.95, 1, 1, }, 17.743, 3147.136,},
	{"polySurface4", "DustCloud_teal", { -13272, -4103, 12555, }, { 0.962, 0.95, 1, 1, }, 121.556, 4117.615,},
	{"polySurface4", "DustCloud_teal", { -12183, -2618, 12299, }, { 0.962, 0.95, 1, 1, }, 185.598, 3147.136,},
	{"polySurface4", "DustCloud_teal", { -12439, -3493, 12844, }, { 0.962, 0.95, 1, 1, }, 148.419, 1071.756,},
	{"polySurface7", "DustCloud_teal", { -9430, -461, -11105, }, { 0.962, 0.95, 1, 1, }, 216.382, 2376.731,},
	{"polySurface7", "DustCloud_teal", { -3581, -2508, -15714, }, { 0.66341, 0.62936, 0.716, 0.674, }, 171.271, 2854.875,},
	{"polySurface7", "DustCloud_teal", { 2578, -5930, -17496, }, { 0.66341, 0.62936, 0.716, 0.674, }, 342.476, 1776.315,},
	{"polySurface7", "DustCloud_teal", { 5885, -13625, -14142, }, { 0.962, 0.95, 1, 1, }, 300.573, 6883.268,},
	{"polySurface7", "DustCloud_teal", { 5115, -17185, -18936, }, { 0.66341, 0.62936, 0.716, 0.475, }, 288.598, 10273.371,},
	{"polySurface7", "DustCloud_teal", { 3589, -7028, -19160, }, { 0.66341, 0.62936, 0.716, 0.475, }, 313.23, 10273.371,},
	{"polySurface7", "DustCloud_teal", { -730, -3397, -18381, }, { 0.66341, 0.62936, 0.716, 0.674, }, 338.104, 10206.651,},
	{"polySurface7", "DustCloud_teal", { -850, -2604, -28557, }, { 0.902, 0.84968, 0.84968, 0.355, }, 339.598, 12938.476,},
	{"polySurface7", "DustCloud_teal", { 1174, 5454, -103506, }, { 0.728, 0.1143, 0.28501, 0.383, }, 45.946, 12786.173,},
	{"polySurface7", "DustCloud_teal", { -4015, -1560, -27812, }, { 0.902, 0.84968, 0.84968, 0.355, }, 170.238, 15098.591,},
	{"polySurface7", "DustCloud_teal", { -5552, -1683, -23812, }, { 0.902, 0.84968, 0.84968, 0.355, }, 9.602, 5426.014,},
	{"polySurface7", "DustCloud_teal", { -5842, -3937, -18885, }, { 0.902, 0.84968, 0.84968, 0.355, }, 163.723, 7215.488,},
	{"polySurface7", "DustCloud_teal", { -11647, 2614, -8921, }, { 0.962, 0.95, 1, 1, }, 49.001, 3575.653,},
	{"polySurface7", "DustCloud_teal", { -12523, 2669, -5455, }, { 0.962, 0.95, 1, 1, }, 76.599, 3575.653,},
	{"polySurface7", "DustCloud_teal", { -13171, 2188, -845, }, { 0.962, 0.95, 1, 1, }, 286.994, 4094.91,},
	{"polySurface7", "DustCloud_teal", { -11377, 415, -7412, }, { 0.962, 0.95, 1, 1, }, 237.059, 2946.516,},
	{"polySurface7", "DustCloud_teal", { -12847, 2428, -3150, }, { 0.962, 0.95, 1, 1, }, 281.314, 2339.847,},
	{"polySurface7", "DustCloud_teal", { -12087, 1301, -4693, }, { 0.962, 0.95, 1, 1, }, 303.166, 4094.91,},
	{"polySurface7", "DustCloud_teal", { 3960, -4296, -40338, }, { 1, 0.947, 0.98327, 0.759, }, 179.555, 15098.591,},
	{"polySurface7", "DustCloud_teal", { 4911, -3520, -40105, }, { 1, 0.947, 0.98327, 0.759, }, 27.258, 19031.582,},
	{"polySurface7", "DustCloud_teal", { 5774, -20267, -15942, }, { 0.66341, 0.62936, 0.716, 0.475, }, 128.236, 6883.268,},
	{"polySurface7", "DustCloud_teal", { 4372, -11060, -16581, }, { 0.716, 0.41743, 0.54611, 0.475, }, 147.529, 3849.267,},
	{"polySurface7", "DustCloud_teal", { 525, -3508, -16902, }, { 0.66341, 0.62936, 0.716, 0.674, }, 107.252, 2104.659,},
	{"polySurface7", "DustCloud_teal", { 9495, -5752, -80592, }, { 0.728, 0.46665, 0.48908, 0.652, }, 268.162, 22647.088,},
	{"polySurface7", "DustCloud_teal", { 5394, -5263, -69939, }, { 0.728, 0.46665, 0.48908, 0.652, }, 20.963, 19872.76,},
	{"polySurface7", "DustCloud_teal", { 6406, 3655, -91979, }, { 0.728, 0.1143, 0.28501, 0.383, }, 129.192, 12786.173,},
	{"polySurface7", "DustCloud_teal", { 9619, -1226, -58402, }, { 0.962, 0.95, 1, 1, }, 57.175, 22647.088,},
	{"polySurface7", "DustCloud_teal", { 5782, -3210, -50176, }, { 0.962, 0.95, 1, 1, }, 47.451, 19872.76,},
	{"polySurface7", "DustCloud_teal", { 2647, 4897, -99680, }, { 0.728, 0.1143, 0.28501, 0.383, }, 65.316, 7415.389,},
	{"polySurface7", "DustCloud_teal", { 5271, 2208, -93287, }, { 0.728, 0.1143, 0.28501, 0.383, }, 89.717, 15567.795,},
	{"polySurface7", "DustCloud_teal", { 3884, 1542, -84826, }, { 0.728, 0.1143, 0.28501, 0.383, }, 124.885, 16437.576,},
	{"polySurface7", "DustCloud_teal", { -7630, -1091, -12523, }, { 0.87012, 0.85133, 0.91261, 0.89968, }, 239.366, 2376.731,},
	{"polySurface7", "DustCloud_teal", { -4997, -2012, -14598, }, { 0.73572, 0.70701, 0.78478, 0.75295, }, 335.708, 2422.271,},
	{"polySurface7", "DustCloud_teal", { -910, -3158, -16486, }, { 0.66341, 0.62936, 0.716, 0.674, }, 37.871, 2854.875,},
	{"polySurface7", "DustCloud_teal", { 1863, -5086, -17289, }, { 0.66341, 0.62936, 0.716, 0.674, }, 200.869, 2104.659,},
	{"polySurface7", "DustCloud_teal", { 3554, -8719, -16998, }, { 0.69201, 0.51411, 0.62361, 0.56578, }, 322.25, 2513.877,},
	{"polySurface7", "DustCloud_teal", { 3157, -7583, -17201, }, { 0.68036, 0.56105, 0.66124, 0.60985, }, 314.032, 1776.315,},
	{"polySurface7", "DustCloud_teal", { 2416, -6042, -18948, }, { 0.66341, 0.62936, 0.716, 0.52905, }, 139.783, 4148.859,},
	{"polySurface7", "DustCloud_teal", { 3062, -7842, -18334, }, { 0.66906, 0.60659, 0.69775, 0.55598, }, 241.904, 2008.941,},
	{"polySurface7", "DustCloud_teal", { 5483, -18906, -17264, }, { 0.66341, 0.62936, 0.716, 0.475, }, 101.297, 6156.185,},
	{"polySurface7", "DustCloud_teal", { 4653, -12821, -16843, }, { 0.69847, 0.48807, 0.60274, 0.475, }, 353.573, 6156.185,},
	{"polySurface7", "DustCloud_teal", { -6832, -1370, -13152, }, { 0.82937, 0.80757, 0.87385, 0.85519, }, 214.13, 2422.271,},
	{"polySurface7", "DustCloud_teal", { -9000, -373, -13464, }, { 0.93464, 0.90426, 0.93147, 0.70592, }, 47.506, 7215.488,},
	{"polySurface7", "DustCloud_teal", { -7729, -637, -13057, }, { 0.86446, 0.8398, 0.89305, 0.80543, }, 216.185, 1361.174,},
	{"polySurface7", "DustCloud_teal", { -10283, -78, -9487, }, { 0.962, 0.95, 1, 1, }, 127.918, 2397.075,},
	{"polySurface7", "DustCloud_teal", { -11373, 2305, -9391, }, { 0.95917, 0.94527, 0.99291, 0.96958, }, 172.238, 5421.308,},
	{"polySurface7", "DustCloud_teal", { -10669, 1407, -9479, }, { 0.96059, 0.94763, 0.99646, 0.98479, }, 341.334, 1533.788,},
}

Pebbles =
{
	{"Pebble_0", { 1603, 5622, -15357, }, 0, 0, 0,},
	{"Pebble_0", { -13548, -8455, 2321, }, 0, 0, 0,},
	{"Pebble_0", { -13801, 7496, -8454, }, 0, 0, 0,},
	{"Pebble_0", { 17426, -6, 16502, }, 0, 0, 0,},
	{"Pebble_0", { 6374, 8164, -6232, }, 0, 0, 0,},
	{"Pebble_0", { -1970, 17766, 23194, }, 0, 0, 0,},
	{"Pebble_0", { -23927, -15513, 16406, }, 0, 0, 0,},
	{"Pebble_0", { -7037, 5594, -5952, }, 0, 0, 0,},
	{"Pebble_0", { -1163, -15553, -5138, }, 0, 0, 0,},
	{"Pebble_0", { -6500, 5194, -11645, }, 0, 0, 0,},
	{"Pebble_0", { 7673, -2630, 10577, }, 0, 0, 0,},
	{"Pebble_0", { -17716, -14923, 6440, }, 0, 0, 0,},
	{"Pebble_0", { 2768, 1860, 33043, }, 0, 0, 0,},
	{"Pebble_0", { 17147, 1066, 10633, }, 0, 0, 0,},
	{"Pebble_0", { -7621, 4813, 17156, }, 0, 0, 0,},
	{"Pebble_0", { 12170, 10985, -10050, }, 0, 0, 0,},
	{"Pebble_0", { 8277, -6752, -12753, }, 0, 0, 0,},
	{"Pebble_0", { -24078, 15623, 25960, }, 0, 0, 0,},
	{"Pebble_0", { 23968, 2313, 2141, }, 0, 0, 0,},
	{"Pebble_0", { 18616, 11202, 15, }, 0, 0, 0,},
	{"Pebble_0", { -3196, -5583, -15881, }, 0, 0, 0,},
	{"Pebble_0", { -4586, 2215, -22022, }, 0, 0, 0,},
	{"Pebble_0", { -13982, -9754, 517, }, 0, 0, 0,},
	{"Pebble_0", { 18269, -22796, 25054, }, 0, 0, 0,},
	{"Pebble_0", { 27879, -7974, -3399, }, 0, 0, 0,},
	{"Pebble_0", { 20289, 3888, -11427, }, 0, 0, 0,},
	{"Pebble_0", { 3854, -19603, 19830, }, 0, 0, 0,},
	{"Pebble_0", { 10768, -8382, 38344, }, 0, 0, 0,},
	{"Pebble_0", { -23681, -1149, 16853, }, 0, 0, 0,},
	{"Pebble_0", { 13489, -7125, -3213, }, 0, 0, 0,},
	{"Pebble_0", { 27129, -692, -8315, }, 0, 0, 0,},
	{"Pebble_0", { -4568, -6726, 40680, }, 0, 0, 0,},
	{"Pebble_0", { -12963, -6770, 8740, }, 0, 0, 0,},
	{"Pebble_0", { 10745, 8776, 173, }, 0, 0, 0,},
	{"Pebble_0", { -413, -24869, 2524, }, 0, 0, 0,},
	{"Pebble_0", { -17389, -2064, 17059, }, 0, 0, 0,},
	{"Pebble_0", { -12097, 4950, -22471, }, 0, 0, 0,},
	{"Pebble_0", { 11765, -6631, 15174, }, 0, 0, 0,},
	{"Pebble_0", { 8611, 18525, 22058, }, 0, 0, 0,},
	{"Pebble_0", { -17715, -14948, 3431, }, 0, 0, 0,},
	{"Pebble_0", { 20636, -6731, 8163, }, 0, 0, 0,},
	{"Pebble_0", { 14502, 2911, 5634, }, 0, 0, 0,},
	{"Pebble_0", { 1427, 16924, -28530, }, 0, 0, 0,},
	{"Pebble_0", { -5616, 17292, 5459, }, 0, 0, 0,},
	{"Pebble_0", { 4516, 11274, 1469, }, 0, 0, 0,},
	{"Pebble_0", { -1774, -13331, -12023, }, 0, 0, 0,},
	{"Pebble_0", { 16331, -16857, 5853, }, 0, 0, 0,},
	{"Pebble_0", { -9410, -3202, 7318, }, 0, 0, 0,},
	{"Pebble_0", { -15550, -2249, 12068, }, 0, 0, 0,},
	{"Pebble_0", { 12474, -11021, -27419, }, 0, 0, 0,},
	{"Pebble_0", { -11072, 9901, -3387, }, 0, 0, 0,},
	{"Pebble_0", { 10961, -6782, 20088, }, 0, 0, 0,},
	{"Pebble_0", { 40013, -13231, 2521, }, 0, 0, 0,},
	{"Pebble_0", { -4642, 14380, 26475, }, 0, 0, 0,},
	{"Pebble_0", { 11258, -12652, -20065, }, 0, 0, 0,},
	{"Pebble_0", { -2537, -14201, 3567, }, 0, 0, 0,},
	{"Pebble_0", { -1489, 6184, -15131, }, 0, 0, 0,},
	{"Pebble_0", { 7492, -17124, 15342, }, 0, 0, 0,},
	{"Pebble_0", { -8018, -14047, 26219, }, 0, 0, 0,},
	{"Pebble_0", { 6491, 8833, 19314, }, 0, 0, 0,},
	{"Pebble_0", { -16927, 6449, 4971, }, 0, 0, 0,},
	{"Pebble_0", { -12431, 15884, 2274, }, 0, 0, 0,},
	{"Pebble_0", { 2868, -16816, 24326, }, 0, 0, 0,},
	{"Pebble_0", { -2152, -8796, -19176, }, 0, 0, 0,},
	{"Pebble_0", { 13543, -5661, 17155, }, 0, 0, 0,},
	{"Pebble_0", { 11659, -22536, 5899, }, 0, 0, 0,},
	{"Pebble_0", { 19502, -10544, 6699, }, 0, 0, 0,},
	{"Pebble_0", { -5300, 13188, -7879, }, 0, 0, 0,},
	{"Pebble_0", { 179, -3614, -21120, }, 0, 0, 0,},
	{"Pebble_0", { -16928, -2406, 9169, }, 0, 0, 0,},
	{"Pebble_0", { 1824, 13430, 18601, }, 0, 0, 0,},
	{"Pebble_0", { 3725, 5124, -9583, }, 0, 0, 0,},
	{"Pebble_0", { 25153, -2090, 9725, }, 0, 0, 0,},
	{"Pebble_0", { -9317, -8994, 20898, }, 0, 0, 0,},
	{"Pebble_0", { -11336, 13213, 4073, }, 0, 0, 0,},
	{"Pebble_0", { -21246, -1652, 8853, }, 0, 0, 0,},
	{"Pebble_0", { 7821, -10022, -11505, }, 0, 0, 0,},
	{"Pebble_0", { 8973, -2456, 26577, }, 0, 0, 0,},
	{"Pebble_0", { -11781, -9506, -6579, }, 0, 0, 0,},
	{"Pebble_0", { -9077, -7386, 13744, }, 0, 0, 0,},
	{"Pebble_0", { -2904, -11344, -29039, }, 0, 0, 0,},
	{"Pebble_0", { 2047, -19213, 13725, }, 0, 0, 0,},
	{"Pebble_0", { -6568, -3855, -16586, }, 0, 0, 0,},
	{"Pebble_0", { 2882, -15995, -20612, }, 0, 0, 0,},
	{"Pebble_0", { 14703, -18642, 485, }, 0, 0, 0,},
	{"Pebble_0", { -8101, 12419, -6703, }, 0, 0, 0,},
	{"Pebble_0", { -17820, -4189, 16873, }, 0, 0, 0,},
	{"Pebble_0", { -27169, -21008, 12368, }, 0, 0, 0,},
	{"Pebble_0", { -19705, -2458, -2721, }, 0, 0, 0,},
	{"Pebble_0", { -1989, -3650, 3021, }, 0, 0, 0,},
	{"Pebble_0", { -20554, 8202, 1938, }, 0, 0, 0,},
	{"Pebble_0", { 10112, -16797, 11492, }, 0, 0, 0,},
	{"Pebble_0", { -15292, 12628, 8675, }, 0, 0, 0,},
	{"Pebble_0", { 4956, -6950, 2356, }, 0, 0, 0,},
	{"Pebble_0", { 3357, -23921, 11109, }, 0, 0, 0,},
	{"Pebble_0", { 14679, 12226, 9314, }, 0, 0, 0,},
	{"Pebble_0", { 16995, 4227, -3597, }, 0, 0, 0,},
	{"Pebble_0", { 376, 20211, 2859, }, 0, 0, 0,},
	{"Pebble_0", { 16479, -18466, 7767, }, 0, 0, 0,},
	{"Pebble_0", { -4916, 18497, 11392, }, 0, 0, 0,},
	{"Pebble_0", { 7222, -13257, 31870, }, 0, 0, 0,},
	{"Pebble_0", { 19459, 21318, 5290, }, 0, 0, 0,},
	{"Pebble_0", { 8135, 19366, 5553, }, 0, 0, 0,},
	{"Pebble_0", { 19914, -6288, 27316, }, 0, 0, 0,},
	{"Pebble_0", { 27539, 7518, 8352, }, 0, 0, 0,},
	{"Pebble_0", { -20707, -15623, 15700, }, 0, 0, 0,},
	{"Pebble_0", { 29706, -11798, -1004, }, 0, 0, 0,},
	{"Pebble_0", { -5810, 12387, 10752, }, 0, 0, 0,},
	{"Pebble_0", { 7742, -31482, 5602, }, 0, 0, 0,},
	{"Pebble_0", { 4487, -10174, 13470, }, 0, 0, 0,},
	{"Pebble_0", { -22643, 12916, -13633, }, 0, 0, 0,},
	{"Pebble_0", { 19794, -19368, 695, }, 0, 0, 0,},
	{"Pebble_0", { 19265, 14862, 5018, }, 0, 0, 0,},
	{"Pebble_0", { 9754, -5192, 22014, }, 0, 0, 0,},
	{"Pebble_0", { 29139, -14942, 8346, }, 0, 0, 0,},
	{"Pebble_0", { 76, 25533, 16879, }, 0, 0, 0,},
	{"Pebble_0", { -3274, -14380, 29468, }, 0, 0, 0,},
	{"Pebble_0", { 8823, 25506, 6592, }, 0, 0, 0,},
	{"Pebble_0", { -9149, -25483, -4208, }, 0, 0, 0,},
	{"Pebble_0", { 6103, 2570, -20085, }, 0, 0, 0,},
	{"Pebble_0", { 27451, -3214, 11596, }, 0, 0, 0,},
	{"Pebble_0", { 14511, -28866, 12055, }, 0, 0, 0,},
	{"Pebble_0", { -12062, -66, -2109, }, 0, 0, 0,},
	{"Pebble_0", { 5648, -8846, 711, }, 0, 0, 0,},
	{"Pebble_0", { -20035, 1863, 22530, }, 0, 0, 0,},
	{"Pebble_0", { -21009, -3182, 2983, }, 0, 0, 0,},
	{"Pebble_0", { -138, 23681, 4296, }, 0, 0, 0,},
	{"Pebble_0", { 15375, -25609, 16039, }, 0, 0, 0,},
	{"Pebble_0", { 11542, -12885, 19041, }, 0, 0, 0,},
	{"Pebble_0", { -20997, 678, 12615, }, 0, 0, 0,},
	{"Pebble_0", { 26508, 8362, 6418, }, 0, 0, 0,},
	{"Pebble_0", { -1977, -10518, 25160, }, 0, 0, 0,},
	{"Pebble_0", { 23005, 3606, 13273, }, 0, 0, 0,},
	{"Pebble_0", { 5196, 14329, 11193, }, 0, 0, 0,},
	{"Pebble_0", { 9243, -13078, 29628, }, 0, 0, 0,},
	{"Pebble_0", { -14395, -9599, 30861, }, 0, 0, 0,},
	{"Pebble_0", { 3384, 15418, 1571, }, 0, 0, 0,},
	{"Pebble_0", { 12195, 12983, -11240, }, 0, 0, 0,},
	{"Pebble_0", { -1109, -1049, 24046, }, 0, 0, 0,},
	{"Pebble_0", { -6023, 18831, -5579, }, 0, 0, 0,},
	{"Pebble_0", { -12423, -24430, 18453, }, 0, 0, 0,},
	{"Pebble_0", { 7471, -11539, -5264, }, 0, 0, 0,},
	{"Pebble_0", { -3627, 26563, 11076, }, 0, 0, 0,},
	{"Pebble_0", { 30719, -990, 7198, }, 0, 0, 0,},
	{"Pebble_0", { 19150, -7728, 5045, }, 0, 0, 0,},
	{"Pebble_0", { 29285, 7554, 9538, }, 0, 0, 0,},
	{"Pebble_0", { 19160, -10397, 3652, }, 0, 0, 0,},
	{"Pebble_0", { 22205, 1008, 11594, }, 0, 0, 0,},
	{"Pebble_0", { -22245, -3644, 3739, }, 0, 0, 0,},
	{"Pebble_0", { -27131, 1290, 11775, }, 0, 0, 0,},
	{"Pebble_0", { -27100, 1622, 12852, }, 0, 0, 0,},
	{"Pebble_0", { -26446, 1894, 13547, }, 0, 0, 0,},
	{"Pebble_0", { -26921, 2073, 14169, }, 0, 0, 0,},
	{"Pebble_0", { -26706, 2134, 14919, }, 0, 0, 0,},
	{"Pebble_0", { -26514, 2192, 16703, }, 0, 0, 0,},
	{"Pebble_0", { -26236, 2125, 15099, }, 0, 0, 0,},
	{"Pebble_0", { -26180, 2282, 15579, }, 0, 0, 0,},
	{"Pebble_0", { -26260, 2292, 15916, }, 0, 0, 0,},
	{"Pebble_0", { -25891, 2468, 16062, }, 0, 0, 0,},
	{"Pebble_0", { -25926, 2372, 16352, }, 0, 0, 0,},
	{"Pebble_0", { -25696, 2568, 16662, }, 0, 0, 0,},
	{"Pebble_0", { -26070, 2777, 17883, }, 0, 0, 0,},
	{"Pebble_0", { -27352, 2891, 17057, }, 0, 0, 0,},
	{"Pebble_0", { -25402, 2858, 16808, }, 0, 0, 0,},
	{"Pebble_0", { -25198, 2963, 17059, }, 0, 0, 0,},
	{"Pebble_0", { -26071, 3077, 18817, }, 0, 0, 0,},
	{"Pebble_0", { -25578, 3033, 17590, }, 0, 0, 0,},
	{"Pebble_0", { -25331, 3152, 17517, }, 0, 0, 0,},
	{"Pebble_0", { -25452, 3361, 17682, }, 0, 0, 0,},
	{"Pebble_0", { -25294, 3052, 17840, }, 0, 0, 0,},
	{"Pebble_0", { -25195, 3387, 17720, }, 0, 0, 0,},
	{"Pebble_0", { -25203, 3234, 17963, }, 0, 0, 0,},
	{"Pebble_0", { -24950, 3128, 17860, }, 0, 0, 0,},
	{"Pebble_0", { -24876, 3181, 17873, }, 0, 0, 0,},
	{"Pebble_0", { -24795, 3314, 17788, }, 0, 0, 0,},
	{"Pebble_0", { -25123, 3524, 18273, }, 0, 0, 0,},
	{"Pebble_0", { -24832, 3689, 17818, }, 0, 0, 0,},
	{"Pebble_0", { -24692, 3683, 17694, }, 0, 0, 0,},
	{"Pebble_0", { -24718, 3200, 18149, }, 0, 0, 0,},
	{"Pebble_0", { -24612, 2968, 17951, }, 0, 0, 0,},
	{"Pebble_0", { -24689, 3114, 18429, }, 0, 0, 0,},
	{"Pebble_0", { -24359, 3716, 17577, }, 0, 0, 0,},
	{"Pebble_0", { -24494, 2898, 18243, }, 0, 0, 0,},
	{"Pebble_0", { -24010, 3413, 19123, }, 0, 0, 0,},
	{"Pebble_0", { -23887, 3643, 19852, }, 0, 0, 0,},
	{"Pebble_0", { -24154, 3164, 18549, }, 0, 0, 0,},
	{"Pebble_0", { -23362, 2904, 19022, }, 0, 0, 0,},
	{"Pebble_0", { -23722, 3968, 18858, }, 0, 0, 0,},
	{"Pebble_0", { -23538, 3050, 18496, }, 0, 0, 0,},
	{"Pebble_0", { -23340, 3336, 18443, }, 0, 0, 0,},
	{"Pebble_0", { -23013, 3524, 18313, }, 0, 0, 0,},
	{"Pebble_0", { -23206, 3863, 18987, }, 0, 0, 0,},
	{"Pebble_0", { -22993, 4343, 18820, }, 0, 0, 0,},
	{"Pebble_0", { -23009, 3232, 19065, }, 0, 0, 0,},
	{"Pebble_0", { -25743, 3394, 18346, }, 0, 0, 0,},
	{"Pebble_0", { -22798, 3319, 19438, }, 0, 0, 0,},
	{"Pebble_0", { -23180, 3544, 20824, }, 0, 0, 0,},
	{"Pebble_0", { -22453, 3628, 19420, }, 0, 0, 0,},
	{"Pebble_0", { -22398, 3218, 19895, }, 0, 0, 0,},
	{"Pebble_0", { -22128, 3455, 19849, }, 0, 0, 0,},
	{"Pebble_0", { -22010, 3215, 19880, }, 0, 0, 0,},
	{"Pebble_0", { -21824, 3258, 19502, }, 0, 0, 0,},
	{"Pebble_0", { -21774, 2924, 19535, }, 0, 0, 0,},
	{"Pebble_0", { -21461, 3168, 19595, }, 0, 0, 0,},
	{"Pebble_0", { -21278, 3169, 19637, }, 0, 0, 0,},
	{"Pebble_0", { -21262, 2910, 19346, }, 0, 0, 0,},
	{"Pebble_0", { -21216, 2572, 19840, }, 0, 0, 0,},
	{"Pebble_0", { -21156, 2565, 19911, }, 0, 0, 0,},
	{"Pebble_0", { -20833, 3095, 19545, }, 0, 0, 0,},
	{"Pebble_0", { -20868, 2909, 19523, }, 0, 0, 0,},
	{"Pebble_0", { -20683, 2718, 19997, }, 0, 0, 0,},
	{"Pebble_0", { -20930, 3056, 19215, }, 0, 0, 0,},
	{"Pebble_0", { -20560, 2476, 19462, }, 0, 0, 0,},
	{"Pebble_0", { -20609, 2473, 19218, }, 0, 0, 0,},
	{"Pebble_0", { -20377, 2888, 19479, }, 0, 0, 0,},
	{"Pebble_0", { -20329, 2506, 19361, }, 0, 0, 0,},
	{"Pebble_0", { -20210, 2878, 19398, }, 0, 0, 0,},
	{"Pebble_0", { -20212, 2655, 19114, }, 0, 0, 0,},
	{"Pebble_0", { -19999, 2614, 19372, }, 0, 0, 0,},
	{"Pebble_0", { -19593, 2631, 19070, }, 0, 0, 0,},
	{"Pebble_0", { -19072, 2557, 18625, }, 0, 0, 0,},
	{"Pebble_0", { -19026, 2739, 18292, }, 0, 0, 0,},
	{"Pebble_0", { -19322, 2556, 18962, }, 0, 0, 0,},
	{"Pebble_0", { -18817, 2241, 17955, }, 0, 0, 0,},
	{"Pebble_0", { -18877, 2232, 17477, }, 0, 0, 0,},
	{"Pebble_0", { -18756, 2258, 16978, }, 0, 0, 0,},
	{"Pebble_0", { -18525, 2197, 17317, }, 0, 0, 0,},
	{"Pebble_0", { -18481, 2092, 16573, }, 0, 0, 0,},
	{"Pebble_0", { -18117, 1765, 16342, }, 0, 0, 0,},
	{"Pebble_0", { -24380, 4430, 18723, }, 0, 0, 0,},
	{"Pebble_0", { -24642, 4098, 19048, }, 0, 0, 0,},
	{"Pebble_0", { -25238, 4159, 18779, }, 0, 0, 0,},
	{"Pebble_0", { -25390, 3988, 19065, }, 0, 0, 0,},
	{"Pebble_0", { -25611, 4027, 19184, }, 0, 0, 0,},
	{"Pebble_0", { -25666, 3836, 19595, }, 0, 0, 0,},
	{"Pebble_0", { -26036, 4185, 19306, }, 0, 0, 0,},
	{"Pebble_0", { -25188, 3630, 19588, }, 0, 0, 0,},
	{"Pebble_0", { -24437, 4284, 21979, }, 0, 0, 0,},
	{"Pebble_0", { -23971, 3847, 20292, }, 0, 0, 0,},
	{"Pebble_0", { -26804, 3672, 19194, }, 0, 0, 0,},
	{"Pebble_0", { -25566, 3950, 20804, }, 0, 0, 0,},
	{"Pebble_0", { -25934, 3813, 19998, }, 0, 0, 0,},
	{"Pebble_0", { -27068, 4327, 19929, }, 0, 0, 0,},
	{"Pebble_0", { -26629, 3891, 19810, }, 0, 0, 0,},
	{"Pebble_0", { -26575, 4182, 18611, }, 0, 0, 0,},
	{"Pebble_0", { -27480, 4309, 20224, }, 0, 0, 0,},
	{"Pebble_0", { -27727, 4146, 20075, }, 0, 0, 0,},
	{"Pebble_0", { -27719, 3822, 20390, }, 0, 0, 0,},
	{"Pebble_0", { -27819, 4097, 20583, }, 0, 0, 0,},
	{"Pebble_0", { -29074, 4014, 20330, }, 0, 0, 0,},
	{"Pebble_0", { -28282, 4097, 20238, }, 0, 0, 0,},
	{"Pebble_0", { -25139, 3808, 20407, }, 0, 0, 0,},
	{"Pebble_0", { -28301, 3706, 20781, }, 0, 0, 0,},
	{"Pebble_0", { -28656, 3736, 20918, }, 0, 0, 0,},
	{"Pebble_0", { -27992, 3612, 19010, }, 0, 0, 0,},
	{"Pebble_0", { -28849, 3161, 20996, }, 0, 0, 0,},
	{"Pebble_0", { -29821, 3080, 20634, }, 0, 0, 0,},
	{"Pebble_0", { -29284, 2996, 21321, }, 0, 0, 0,},
	{"Pebble_0", { -31149, 3389, 20505, }, 0, 0, 0,},
	{"Pebble_0", { -29776, 2857, 20912, }, 0, 0, 0,},
	{"Pebble_0", { -27160, 3108, 18162, }, 0, 0, 0,},
	{"Pebble_0", { -30156, 3182, 21422, }, 0, 0, 0,},
	{"Pebble_0", { -32586, 3133, 20923, }, 0, 0, 0,},
	{"Pebble_0", { -30635, 3262, 21183, }, 0, 0, 0,},
	{"Pebble_0", { -31325, 3211, 21196, }, 0, 0, 0,},
	{"Pebble_0", { -30957, 3094, 21000, }, 0, 0, 0,},
	{"Pebble_0", { -36147, 3219, 18075, }, 0, 0, 0,},
	{"Pebble_0", { -32684, 2860, 20314, }, 0, 0, 0,},
	{"Pebble_0", { -33504, 2947, 20216, }, 0, 0, 0,},
	{"Pebble_0", { -31880, 2828, 20715, }, 0, 0, 0,},
	{"Pebble_0", { -32840, 2853, 20838, }, 0, 0, 0,},
	{"Pebble_0", { -34295, 3060, 19881, }, 0, 0, 0,},
	{"Pebble_0", { -34864, 3171, 19500, }, 0, 0, 0,},
	{"Pebble_0", { -39854, 1905, 29654, }, 0, 0, 0,},
	{"Pebble_0", { -40936, 2200, 30140, }, 0, 0, 0,},
	{"Pebble_0", { -41181, 2108, 30129, }, 0, 0, 0,},
	{"Pebble_0", { -37721, 2266, 29751, }, 0, 0, 0,},
	{"Pebble_0", { -38385, 2275, 29539, }, 0, 0, 0,},
	{"Pebble_0", { -39230, 2020, 29599, }, 0, 0, 0,},
	{"Pebble_0", { -37150, 2056, 29377, }, 0, 0, 0,},
	{"Pebble_0", { -36565, 2365, 29625, }, 0, 0, 0,},
	{"Pebble_0", { -35840, 2402, 29469, }, 0, 0, 0,},
	{"Pebble_0", { -36452, 2107, 29273, }, 0, 0, 0,},
	{"Pebble_0", { -35698, 2150, 29234, }, 0, 0, 0,},
	{"Pebble_0", { -38444, 2309, 29917, }, 0, 0, 0,},
	{"Pebble_0", { -36244, 2476, 30050, }, 0, 0, 0,},
	{"Pebble_0", { -35417, 1905, 29036, }, 0, 0, 0,},
	{"Pebble_0", { -35743, 2634, 28241, }, 0, 0, 0,},
	{"Pebble_0", { -35069, 2178, 29066, }, 0, 0, 0,},
	{"Pebble_0", { -35211, 2243, 28873, }, 0, 0, 0,},
	{"Pebble_0", { -30828, 2038, 25686, }, 0, 0, 0,},
	{"Pebble_0", { -33458, 2196, 26941, }, 0, 0, 0,},
	{"Pebble_0", { -35228, 2751, 28589, }, 0, 0, 0,},
	{"Pebble_0", { -35087, 2224, 28453, }, 0, 0, 0,},
	{"Pebble_0", { -35631, 2260, 28694, }, 0, 0, 0,},
	{"Pebble_0", { -35027, 2364, 28252, }, 0, 0, 0,},
	{"Pebble_0", { -32059, 2451, 26440, }, 0, 0, 0,},
	{"Pebble_0", { -34645, 2159, 27192, }, 0, 0, 0,},
	{"Pebble_0", { -34769, 2177, 28100, }, 0, 0, 0,},
	{"Pebble_0", { -31220, 2298, 24827, }, 0, 0, 0,},
	{"Pebble_0", { -34784, 2385, 27696, }, 0, 0, 0,},
	{"Pebble_0", { -34489, 2725, 27864, }, 0, 0, 0,},
	{"Pebble_0", { -34717, 2370, 29321, }, 0, 0, 0,},
	{"Pebble_0", { -34455, 2736, 27532, }, 0, 0, 0,},
	{"Pebble_0", { -34264, 2734, 27583, }, 0, 0, 0,},
	{"Pebble_0", { -33683, 2687, 27646, }, 0, 0, 0,},
	{"Pebble_0", { -34067, 2668, 27425, }, 0, 0, 0,},
	{"Pebble_0", { -34044, 2504, 27156, }, 0, 0, 0,},
	{"Pebble_0", { -30556, 2309, 25927, }, 0, 0, 0,},
	{"Pebble_0", { -33709, 2453, 27261, }, 0, 0, 0,},
	{"Pebble_0", { -31422, 2312, 26266, }, 0, 0, 0,},
	{"Pebble_0", { -29804, 2497, 25753, }, 0, 0, 0,},
	{"Pebble_0", { -33227, 2465, 27293, }, 0, 0, 0,},
	{"Pebble_0", { -33089, 2642, 27120, }, 0, 0, 0,},
	{"Pebble_0", { -32913, 2486, 27115, }, 0, 0, 0,},
	{"Pebble_0", { -31663, 2275, 26361, }, 0, 0, 0,},
	{"Pebble_0", { -32588, 2218, 26863, }, 0, 0, 0,},
	{"Pebble_0", { -31055, 2638, 26076, }, 0, 0, 0,},
	{"Pebble_0", { -32136, 2496, 26845, }, 0, 0, 0,},
	{"Pebble_0", { -30770, 2311, 25293, }, 0, 0, 0,},
	{"Pebble_0", { -30729, 2488, 24685, }, 0, 0, 0,},
	{"Pebble_0", { -29976, 2643, 23315, }, 0, 0, 0,},
	{"Pebble_0", { -31015, 2348, 24226, }, 0, 0, 0,},
	{"Pebble_0", { -26500, 5031, 30280, }, 0, 0, 0,},
	{"Pebble_0", { -24584, 5120, 30489, }, 0, 0, 0,},
	{"Pebble_0", { -23901, 5102, 30450, }, 0, 0, 0,},
	{"Pebble_0", { -23208, 5145, 30171, }, 0, 0, 0,},
	{"Pebble_0", { -22822, 5321, 29694, }, 0, 0, 0,},
	{"Pebble_0", { -22021, 5506, 30344, }, 0, 0, 0,},
	{"Pebble_0", { -22375, 5385, 29753, }, 0, 0, 0,},
	{"Pebble_0", { -22259, 5528, 29920, }, 0, 0, 0,},
	{"Pebble_0", { -21837, 5409, 29512, }, 0, 0, 0,},
	{"Pebble_0", { -21835, 5502, 29870, }, 0, 0, 0,},
	{"Pebble_0", { -18435, 5779, 30281, }, 0, 0, 0,},
	{"Pebble_0", { -20897, 5580, 30410, }, 0, 0, 0,},
	{"Pebble_0", { -21087, 5960, 29441, }, 0, 0, 0,},
	{"Pebble_0", { -21156, 5617, 30086, }, 0, 0, 0,},
	{"Pebble_0", { -20965, 5687, 29897, }, 0, 0, 0,},
	{"Pebble_0", { -19457, 5887, 29600, }, 0, 0, 0,},
	{"Pebble_0", { -18975, 5968, 30733, }, 0, 0, 0,},
	{"Pebble_0", { -20486, 5871, 30002, }, 0, 0, 0,},
	{"Pebble_0", { -17600, 5889, 30233, }, 0, 0, 0,},
	{"Pebble_0", { -20145, 5807, 30042, }, 0, 0, 0,},
	{"Pebble_0", { -19589, 5943, 30543, }, 0, 0, 0,},
	{"Pebble_0", { -19866, 6086, 30053, }, 0, 0, 0,},
	{"Pebble_0", { -16704, 6145, 29745, }, 0, 0, 0,},
	{"Pebble_0", { -19513, 6201, 30097, }, 0, 0, 0,},
	{"Pebble_0", { -19322, 6101, 29950, }, 0, 0, 0,},
	{"Pebble_0", { -18975, 6225, 29448, }, 0, 0, 0,},
	{"Pebble_0", { -18942, 6205, 29753, }, 0, 0, 0,},
	{"Pebble_0", { -18409, 6192, 29420, }, 0, 0, 0,},
	{"Pebble_0", { -18223, 6317, 30004, }, 0, 0, 0,},
	{"Pebble_0", { -18184, 6340, 29568, }, 0, 0, 0,},
	{"Pebble_0", { -18033, 6275, 29017, }, 0, 0, 0,},
	{"Pebble_0", { -17528, 6284, 29545, }, 0, 0, 0,},
	{"Pebble_0", { -17556, 6245, 28983, }, 0, 0, 0,},
	{"Pebble_0", { -16076, 6369, 29219, }, 0, 0, 0,},
	{"Pebble_0", { -16842, 6263, 31401, }, 0, 0, 0,},
	{"Pebble_0", { -17037, 6306, 28268, }, 0, 0, 0,},
	{"Pebble_0", { -16894, 6178, 28925, }, 0, 0, 0,},
	{"Pebble_0", { -16632, 6237, 27806, }, 0, 0, 0,},
	{"Pebble_0", { -17594, 6164, 27908, }, 0, 0, 0,},
	{"Pebble_0", { -16323, 6123, 27332, }, 0, 0, 0,},
	{"Pebble_0", { -16882, 5982, 27320, }, 0, 0, 0,},
	{"Pebble_0", { -15791, 5746, 26313, }, 0, 0, 0,},
	{"Pebble_0", { -15794, 5922, 26840, }, 0, 0, 0,},
	{"Pebble_0", { -14937, 6021, 23775, }, 0, 0, 0,},
	{"Pebble_0", { -15409, 5637, 26519, }, 0, 0, 0,},
	{"Pebble_0", { -14484, 5724, 20937, }, 0, 0, 0,},
	{"Pebble_0", { -15165, 5808, 22361, }, 0, 0, 0,},
	{"Pebble_0", { -14811, 5683, 25974, }, 0, 0, 0,},
	{"Pebble_0", { -14714, 5803, 25627, }, 0, 0, 0,},
	{"Pebble_0", { -14448, 5798, 24154, }, 0, 0, 0,},
	{"Pebble_0", { -10665, 0, 14190, }, 0, 0, 0,},
	{"Pebble_0", { -10797, 92, 13495, }, 0, 0, 0,},
	{"Pebble_0", { -11326, -112, 12665, }, 0, 0, 0,},
	{"Pebble_0", { -12248, -162, 7589, }, 0, 0, 0,},
	{"Pebble_0", { -11255, -9, 5788, }, 0, 0, 0,},
	{"Pebble_0", { -11167, -256, 12109, }, 0, 0, 0,},
	{"Pebble_0", { -11066, -20, 13582, }, 0, 0, 0,},
	{"Pebble_0", { -11425, -536, 11798, }, 0, 0, 0,},
	{"Pebble_0", { -11883, 328, 11636, }, 0, 0, 0,},
	{"Pebble_0", { -10794, 139, 11469, }, 0, 0, 0,},
	{"Pebble_0", { -11263, -143, 11528, }, 0, 0, 0,},
	{"Pebble_0", { -11280, 117, 11115, }, 0, 0, 0,},
	{"Pebble_0", { -11714, 227, 10929, }, 0, 0, 0,},
	{"Pebble_0", { -12912, -415, 10001, }, 0, 0, 0,},
	{"Pebble_0", { -11338, 546, 10570, }, 0, 0, 0,},
	{"Pebble_0", { -10839, -111, 8468, }, 0, 0, 0,},
	{"Pebble_0", { -11225, -277, 8344, }, 0, 0, 0,},
	{"Pebble_0", { -11362, 688, 10018, }, 0, 0, 0,},
	{"Pebble_0", { -11123, 462, 8954, }, 0, 0, 0,},
	{"Pebble_0", { -11224, -488, 9680, }, 0, 0, 0,},
	{"Pebble_0", { -12150, 100, 5169, }, 0, 0, 0,},
	{"Pebble_0", { -12697, -315, 4088, }, 0, 0, 0,},
	{"Pebble_0", { -10824, 221, 6073, }, 0, 0, 0,},
	{"Pebble_0", { -10853, -80, 7202, }, 0, 0, 0,},
	{"Pebble_0", { -11148, -144, 7452, }, 0, 0, 0,},
	{"Pebble_0", { -17869, 806, 15700, }, 0, 0, 0,},
	{"Pebble_0", { -17633, 745, 14374, }, 0, 0, 0,},
	{"Pebble_0", { -17394, 497, 14417, }, 0, 0, 0,},
	{"Pebble_0", { -17646, 803, 15497, }, 0, 0, 0,},
	{"Pebble_0", { -17447, 692, 15949, }, 0, 0, 0,},
	{"Pebble_0", { -16703, 259, 14311, }, 0, 0, 0,},
	{"Pebble_0", { -16937, 285, 15210, }, 0, 0, 0,},
	{"Pebble_0", { -17345, 510, 14947, }, 0, 0, 0,},
	{"Pebble_0", { -16425, 1097, 14892, }, 0, 0, 0,},
	{"Pebble_0", { -17282, 1026, 13264, }, 0, 0, 0,},
	{"Pebble_0", { -16932, 2036, 13132, }, 0, 0, 0,},
	{"Pebble_0", { -17072, -673, 13389, }, 0, 0, 0,},
	{"Pebble_0", { -17385, 528, 12823, }, 0, 0, 0,},
	{"Pebble_0", { -17509, 1229, 12377, }, 0, 0, 0,},
	{"Pebble_0", { -17088, -249, 12961, }, 0, 0, 0,},
	{"Pebble_0", { -16895, -20, 12777, }, 0, 0, 0,},
	{"Pebble_0", { -16585, 560, 13730, }, 0, 0, 0,},
	{"Pebble_0", { -16216, -4, 12983, }, 0, 0, 0,},
	{"Pebble_0", { -16913, 1091, 11929, }, 0, 0, 0,},
	{"Pebble_0", { -17334, -411, 12076, }, 0, 0, 0,},
	{"Pebble_0", { -15362, 454, 11946, }, 0, 0, 0,},
	{"Pebble_0", { -16796, -145, 11679, }, 0, 0, 0,},
	{"Pebble_0", { -15572, 890, 11509, }, 0, 0, 0,},
	{"Pebble_0", { -16461, 893, 11284, }, 0, 0, 0,},
	{"Pebble_0", { -13417, -127, 9190, }, 0, 0, 0,},
	{"Pebble_0", { -14436, 16, 10866, }, 0, 0, 0,},
	{"Pebble_0", { -16751, 395, 10601, }, 0, 0, 0,},
	{"Pebble_0", { -15869, 311, 10459, }, 0, 0, 0,},
	{"Pebble_0", { -15775, -3, 10261, }, 0, 0, 0,},
	{"Pebble_0", { -16579, 479, 9937, }, 0, 0, 0,},
	{"Pebble_0", { -16407, 540, 9750, }, 0, 0, 0,},
	{"Pebble_0", { -16006, 650, 9670, }, 0, 0, 0,},
	{"Pebble_0", { -15842, 530, 9554, }, 0, 0, 0,},
	{"Pebble_0", { -15737, 540, 9417, }, 0, 0, 0,},
	{"Pebble_0", { -15594, 367, 9338, }, 0, 0, 0,},
	{"Pebble_0", { -15639, 297, 9126, }, 0, 0, 0,},
	{"Pebble_0", { -15743, 363, 8835, }, 0, 0, 0,},
	{"Pebble_0", { -15710, -137, 8765, }, 0, 0, 0,},
	{"Pebble_0", { -15656, 266, 8518, }, 0, 0, 0,},
	{"Pebble_0", { -15476, 101, 8488, }, 0, 0, 0,},
	{"Pebble_0", { -15360, 194, 8364, }, 0, 0, 0,},
	{"Pebble_0", { -15477, -127, 8018, }, 0, 0, 0,},
	{"Pebble_0", { -15240, -138, 8130, }, 0, 0, 0,},
	{"Pebble_0", { -15597, 103, 7481, }, 0, 0, 0,},
	{"Pebble_0", { -15466, -94, 5106, }, 0, 0, 0,},
	{"Pebble_0", { -15121, 35, 7574, }, 0, 0, 0,},
	{"Pebble_0", { -15841, 127, 7375, }, 0, 0, 0,},
	{"Pebble_0", { -15696, 100, 6894, }, 0, 0, 0,},
	{"Pebble_0", { -16111, -20, 7009, }, 0, 0, 0,},
	{"Pebble_0", { -15478, 63, 6247, }, 0, 0, 0,},
	{"Pebble_0", { -24861, 1295, 12008, }, 0, 0, 0,},
	{"Pebble_0", { -25299, 958, 11308, }, 0, 0, 0,},
	{"Pebble_0", { -24392, 1030, 12149, }, 0, 0, 0,},
	{"Pebble_0", { -27430, 809, 10270, }, 0, 0, 0,},
	{"Pebble_0", { -24141, 400, 12275, }, 0, 0, 0,},
	{"Pebble_0", { -25619, 755, 10963, }, 0, 0, 0,},
	{"Pebble_0", { -23108, 865, 13110, }, 0, 0, 0,},
	{"Pebble_0", { -25619, 589, 10717, }, 0, 0, 0,},
	{"Pebble_0", { -23544, 547, 13268, }, 0, 0, 0,},
	{"Pebble_0", { -24000, 918, 12676, }, 0, 0, 0,},
	{"Pebble_0", { -24031, 927, 12809, }, 0, 0, 0,},
	{"Pebble_0", { -27129, 290, 9816, }, 0, 0, 0,},
	{"Pebble_0", { -24306, 1431, 16519, }, 0, 0, 0,},
	{"Pebble_0", { -22193, 634, 13971, }, 0, 0, 0,},
	{"Pebble_0", { -23440, 273, 12812, }, 0, 0, 0,},
	{"Pebble_0", { -22538, 1078, 13907, }, 0, 0, 0,},
	{"Pebble_0", { -22811, 898, 14474, }, 0, 0, 0,},
	{"Pebble_0", { -19727, 1383, 13377, }, 0, 0, 0,},
	{"Pebble_0", { -23094, 1446, 13373, }, 0, 0, 0,},
	{"Pebble_0", { -24887, -18, 11713, }, 0, 0, 0,},
	{"Pebble_0", { -22851, 949, 13631, }, 0, 0, 0,},
	{"Pebble_0", { -22848, 285, 13861, }, 0, 0, 0,},
	{"Pebble_0", { -22331, 853, 13199, }, 0, 0, 0,},
	{"Pebble_0", { -22138, 583, 12861, }, 0, 0, 0,},
	{"Pebble_0", { -22275, -98, 13434, }, 0, 0, 0,},
	{"Pebble_0", { -22100, 80, 13544, }, 0, 0, 0,},
	{"Pebble_0", { -20248, 880, 13266, }, 0, 0, 0,},
	{"Pebble_0", { -21654, 796, 13487, }, 0, 0, 0,},
	{"Pebble_0", { -21643, -74, 13825, }, 0, 0, 0,},
	{"Pebble_0", { -21342, 721, 13811, }, 0, 0, 0,},
	{"Pebble_0", { -21285, 162, 14972, }, 0, 0, 0,},
	{"Pebble_0", { -21706, 616, 15028, }, 0, 0, 0,},
	{"Pebble_0", { -21217, 360, 11955, }, 0, 0, 0,},
	{"Pebble_0", { -20981, 796, 13388, }, 0, 0, 0,},
	{"Pebble_0", { -20905, 579, 13181, }, 0, 0, 0,},
	{"Pebble_0", { -20661, 803, 13308, }, 0, 0, 0,},
	{"Pebble_0", { -20699, 448, 12868, }, 0, 0, 0,},
	{"Pebble_0", { -18823, 611, 9707, }, 0, 0, 0,},
	{"Pebble_0", { -20436, 705, 12718, }, 0, 0, 0,},
	{"Pebble_0", { -20125, 591, 12757, }, 0, 0, 0,},
	{"Pebble_0", { -19191, 735, 11110, }, 0, 0, 0,},
	{"Pebble_0", { -19953, 742, 12435, }, 0, 0, 0,},
	{"Pebble_0", { -19847, 729, 12221, }, 0, 0, 0,},
	{"Pebble_0", { -18801, 729, 10569, }, 0, 0, 0,},
	{"Pebble_0", { -19665, 755, 11827, }, 0, 0, 0,},
	{"Pebble_0", { -19195, 742, 11530, }, 0, 0, 0,},
	{"Pebble_0", { -18946, 720, 11501, }, 0, 0, 0,},
	{"Pebble_0", { -19495, 727, 8479, }, 0, 0, 0,},
	{"Pebble_0", { -19079, 807, 10085, }, 0, 0, 0,},
	{"Pebble_0", { 19709, -254, 13188, }, 0, 0, 0,},
	{"Pebble_0", { 19180, -296, 12659, }, 0, 0, 0,},
	{"Pebble_0", { 20327, -161, 13292, }, 0, 0, 0,},
	{"Pebble_0", { 18346, -1003, 11133, }, 0, 0, 0,},
	{"Pebble_0", { 18880, -595, 10741, }, 0, 0, 0,},
	{"Pebble_0", { 20577, -5, 11774, }, 0, 0, 0,},
	{"Pebble_0", { 19688, 136, 11213, }, 0, 0, 0,},
	{"Pebble_0", { -29949, -365, 7350, }, 0, 0, 0,},
	{"Pebble_0", { 20705, 148, 12604, }, 0, 0, 0,},
	{"Pebble_0", { -30730, -386, 7131, }, 0, 0, 0,},
	{"Pebble_0", { -29930, 92, 8398, }, 0, 0, 0,},
	{"Pebble_0", { -29899, -20, 8798, }, 0, 0, 0,},
	{"Pebble_0", { -29624, 279, 9310, }, 0, 0, 0,},
	{"Pebble_0", { -29383, 258, 9657, }, 0, 0, 0,},
	{"Pebble_0", { -28815, 439, 9678, }, 0, 0, 0,},
	{"Pebble_0", { -28430, 373, 10312, }, 0, 0, 0,},
	{"Pebble_0", { -27700, 422, 10408, }, 0, 0, 0,},
	{"Pebble_0", { -27586, 370, 10791, }, 0, 0, 0,},
	{"Pebble_0", { -27421, 342, 11418, }, 0, 0, 0,},
	{"Pebble_0", { -27619, 473, 9945, }, 0, 0, 0,},
	{"Pebble_0", { -26608, 886, 10987, }, 0, 0, 0,},
	{"Pebble_0", { -26994, 1045, 10914, }, 0, 0, 0,},
	{"Pebble_0", { -14907, -424, 6551, }, 0, 0, 0,},
	{"Pebble_0", { -15025, -286, 5942, }, 0, 0, 0,},
	{"Pebble_0", { -15112, 71, 5341, }, 0, 0, 0,},
	{"Pebble_0", { -15214, -33, 4884, }, 0, 0, 0,},
	{"Pebble_0", { -15066, 58, 4616, }, 0, 0, 0,},
	{"Pebble_0", { -14829, 224, 4456, }, 0, 0, 0,},
	{"Pebble_0", { -15034, 347, 4324, }, 0, 0, 0,},
	{"Pebble_0", { -14890, 147, 4150, }, 0, 0, 0,},
	{"Pebble_0", { -14951, 68, 3985, }, 0, 0, 0,},
	{"Pebble_0", { -15061, -63, 3798, }, 0, 0, 0,},
	{"Pebble_0", { -14746, 264, 3692, }, 0, 0, 0,},
	{"Pebble_0", { -14872, 246, 3434, }, 0, 0, 0,},
	{"Pebble_0", { -14797, 241, 3239, }, 0, 0, 0,},
	{"Pebble_0", { -14795, -61, 3029, }, 0, 0, 0,},
	{"Pebble_0", { -14623, 3, 2880, }, 0, 0, 0,},
	{"Pebble_0", { -14387, -65, 2844, }, 0, 0, 0,},
	{"Pebble_0", { -14247, 135, 2700, }, 0, 0, 0,},
	{"Pebble_0", { -13975, 6, 2705, }, 0, 0, 0,},
	{"Pebble_0", { -14069, 85, 2411, }, 0, 0, 0,},
	{"Pebble_0", { -13776, 130, 2425, }, 0, 0, 0,},
	{"Pebble_0", { -13556, 18, 2280, }, 0, 0, 0,},
	{"Pebble_0", { -13723, 58, 1983, }, 0, 0, 0,},
	{"Pebble_0", { -13799, 208, 1831, }, 0, 0, 0,},
	{"Pebble_0", { -13552, 121, 1698, }, 0, 0, 0,},
	{"Pebble_0", { -13304, 638, 1899, }, 0, 0, 0,},
	{"Pebble_0", { -13733, 660, 1549, }, 0, 0, 0,},
	{"Pebble_0", { -13243, 341, 1465, }, 0, 0, 0,},
	{"Pebble_0", { -13557, 747, 1273, }, 0, 0, 0,},
	{"Pebble_0", { -13571, 789, 1062, }, 0, 0, 0,},
	{"Pebble_0", { -13404, 190, 999, }, 0, 0, 0,},
	{"Pebble_0", { -13451, 354, 767, }, 0, 0, 0,},
	{"Pebble_0", { -13543, 771, 496, }, 0, 0, 0,},
	{"Pebble_0", { -12616, 831, 964, }, 0, 0, 0,},
	{"Pebble_0", { -12445, 693, 856, }, 0, 0, 0,},
	{"Pebble_0", { -13004, 1025, 545, }, 0, 0, 0,},
	{"Pebble_0", { -12939, 1167, 496, }, 0, 0, 0,},
	{"Pebble_0", { -12294, 673, -30, }, 0, 0, 0,},
	{"Pebble_0", { -12496, 1131, -8, }, 0, 0, 0,},
	{"Pebble_0", { -12263, 1333, -107, }, 0, 0, 0,},
	{"Pebble_0", { -12435, 1560, -334, }, 0, 0, 0,},
	{"Pebble_0", { -12308, 1545, -646, }, 0, 0, 0,},
	{"Pebble_0", { -12450, 1687, -910, }, 0, 0, 0,},
	{"Pebble_0", { -12179, 1896, -1053, }, 0, 0, 0,},
	{"Pebble_0", { -12206, 1861, -1347, }, 0, 0, 0,},
	{"Pebble_0", { -12116, 2027, -1513, }, 0, 0, 0,},
	{"Pebble_0", { -12248, 1972, -1785, }, 0, 0, 0,},
	{"Pebble_0", { -12109, 2045, -1919, }, 0, 0, 0,},
	{"Pebble_0", { -12036, 2197, -2108, }, 0, 0, 0,},
	{"Pebble_0", { -11907, 2147, -2373, }, 0, 0, 0,},
	{"Pebble_0", { -11911, 2094, -2769, }, 0, 0, 0,},
	{"Pebble_0", { 19393, 95, -16057, }, 0, 0, 0,},
	{"Pebble_0", { 18998, -440, -17119, }, 0, 0, 0,},
	{"Pebble_0", { 18036, -906, -17822, }, 0, 0, 0,},
	{"Pebble_0", { 17856, -2153, -18324, }, 0, 0, 0,},
	{"Pebble_0", { 17655, -2032, -19490, }, 0, 0, 0,},
	{"Pebble_0", { 17434, -3445, -20019, }, 0, 0, 0,},
	{"Pebble_0", { 17378, -3496, -21191, }, 0, 0, 0,},
	{"Pebble_0", { 16820, -1916, -22272, }, 0, 0, 0,},
	{"Pebble_0", { 15368, -4134, -21711, }, 0, 0, 0,},
	{"Pebble_0", { 15747, -2674, -23853, }, 0, 0, 0,},
	{"Pebble_0", { 14423, -3103, -23419, }, 0, 0, 0,},
	{"Pebble_0", { 13285, -4579, -22861, }, 0, 0, 0,},
	{"Pebble_0", { 12602, -3643, -24446, }, 0, 0, 0,},
	{"Pebble_0", { 11443, -3700, -24705, }, 0, 0, 0,},
	{"Pebble_0", { 10513, -4893, -22541, }, 0, 0, 0,},
	{"Pebble_0", { 9383, -5203, -22267, }, 0, 0, 0,},
	{"Pebble_0", { 7689, -2988, -22707, }, 0, 0, 0,},
	{"Pebble_0", { 6532, -5425, -21841, }, 0, 0, 0,},
	{"Pebble_0", { 3909, -4825, -23534, }, 0, 0, 0,},
	{"Pebble_0", { 3372, -6128, -20775, }, 0, 0, 0,},
	{"Pebble_0", { 338, -3458, -22049, }, 0, 0, 0,},
	{"Pebble_0", { 658, -6237, -18234, }, 0, 0, 0,},
	{"Pebble_0", { -1349, -3762, -17629, }, 0, 0, 0,},
	{"Pebble_0", { -2223, -4788, -15797, }, 0, 0, 0,},
	{"Pebble_0", { -2915, -4733, -13808, }, 0, 0, 0,},
	{"Pebble_0", { -4391, -5794, -12945, }, 0, 0, 0,},
	{"Pebble_0", { -5881, -2742, -12054, }, 0, 0, 0,},
	{"Pebble_0", { -6400, -5789, -10404, }, 0, 0, 0,},
	{"Pebble_0", { -8958, -790, -10805, }, 0, 0, 0,},
	{"Pebble_0", { -8524, -5944, -8408, }, 0, 0, 0,},
	{"Pebble_0", { -8591, -5361, -6995, }, 0, 0, 0,},
	{"Pebble_0", { -10073, -4443, -6425, }, 0, 0, 0,},
	{"Pebble_0", { -14258, -4412, -6611, }, 0, 0, 0,},
	{"Pebble_0", { -13812, -2186, -5415, }, 0, 0, 0,},
	{"Pebble_0", { -14374, -5232, -3498, }, 0, 0, 0,},
	{"Pebble_0", { -15864, -3305, -2973, }, 0, 0, 0,},
	{"Pebble_0", { -11310, -689, -1265, }, 0, 0, 0,},
	{"Pebble_0", { -14400, -1814, -499, }, 0, 0, 0,},
	{"Pebble_0", { -15016, -2812, 792, }, 0, 0, 0,},
	{"Pebble_0", { -14342, -1569, 1794, }, 0, 0, 0,},
	{"Pebble_0", { -16392, -2767, 2459, }, 0, 0, 0,},
	{"Pebble_0", { -16257, -1074, 3034, }, 0, 0, 0,},
	{"Pebble_0", { -14401, -1514, 5482, }, 0, 0, 0,},
	{"Pebble_0", { -16545, -2479, 5442, }, 0, 0, 0,},
	{"Pebble_0", { -16740, -2143, 6545, }, 0, 0, 0,},
	{"Pebble_0", { -16721, 32, 7714, }, 0, 0, 0,},
	{"Pebble_0", { -20150, 1311, 8984, }, 0, 0, 0,},
	{"Pebble_0", { -25106, -166, 11674, }, 0, 0, 0,},
	{"Pebble_0", { -28911, 401, 14757, }, 0, 0, 0,},
	{"Pebble_0", { -34379, 467, 19828, }, 0, 0, 0,},
	{"Pebble_0", { -35740, 390, 21070, }, 0, 0, 0,},
	{"Pebble_0", { -34838, -205, 22560, }, 0, 0, 0,},
	{"Pebble_0", { -32982, 236, 20888, }, 0, 0, 0,},
	{"Pebble_0", { -29812, -909, 16279, }, 0, 0, 0,},
	{"Pebble_0", { -28355, 1004, 13665, }, 0, 0, 0,},
	{"Pebble_0", { -24663, -458, 9353, }, 0, 0, 0,},
	{"Pebble_0", { -18079, -329, 9183, }, 0, 0, 0,},
	{"Pebble_0", { -19330, -157, 4398, }, 0, 0, 0,},
	{"Pebble_0", { -16755, 1309, 4780, }, 0, 0, 0,},
	{"Pebble_0", { -16185, -1278, 2885, }, 0, 0, 0,},
	{"Pebble_0", { -13967, 1758, 5727, }, 0, 0, 0,},
	{"Pebble_0", { -13882, -1141, 4070, }, 0, 0, 0,},
	{"Pebble_0", { -12098, 889, 1869, }, 0, 0, 0,},
	{"Pebble_0", { -11796, -137, 3571, }, 0, 0, 0,},
	{"Pebble_0", { -12727, 3675, 4741, }, 0, 0, 0,},
	{"Pebble_0", { -14006, 978, 5588, }, 0, 0, 0,},
	{"Pebble_0", { -10032, 1570, 6651, }, 0, 0, 0,},
	{"Pebble_0", { -11841, -2738, 7443, }, 0, 0, 0,},
	{"Pebble_0", { -13363, -145, 8623, }, 0, 0, 0,},
	{"Pebble_0", { -15086, 3045, 10081, }, 0, 0, 0,},
	{"Pebble_0", { -14260, 2693, 11427, }, 0, 0, 0,},
	{"Pebble_0", { -16049, -2339, 12314, }, 0, 0, 0,},
	{"Pebble_0", { -13223, 2806, 14153, }, 0, 0, 0,},
	{"Pebble_0", { -10341, 438, 14014, }, 0, 0, 0,},
	{"Pebble_0", { -12768, -3809, 15229, }, 0, 0, 0,},
	{"Pebble_0", { -11784, -1620, 16736, }, 0, 0, 0,},
	{"Pebble_0", { -10302, 1688, 18315, }, 0, 0, 0,},
	{"Pebble_0", { -10966, -2821, 19162, }, 0, 0, 0,},
	{"Pebble_0", { -7794, 1164, 18893, }, 0, 0, 0,},
	{"Pebble_0", { -9166, -1363, 22336, }, 0, 0, 0,},
	{"Pebble_0", { -6397, 378, 20786, }, 0, 0, 0,},
	{"Pebble_0", { -6478, -3362, 22450, }, 0, 0, 0,},
	{"Pebble_0", { -5307, -4097, 23141, }, 0, 0, 0,},
	{"Pebble_0", { -3195, -1887, 20794, }, 0, 0, 0,},
	{"Pebble_0", { -2504, -6208, 22697, }, 0, 0, 0,},
	{"Pebble_0", { -1058, -1601, 20124, }, 0, 0, 0,},
	{"Pebble_0", { 77, -1107, 22057, }, 0, 0, 0,},
	{"Pebble_0", { 1753, -5582, 21856, }, 0, 0, 0,},
	{"Pebble_0", { 3049, -5635, 21340, }, 0, 0, 0,},
	{"Pebble_0", { 3876, -1755, 21840, }, 0, 0, 0,},
	{"Pebble_0", { 4749, -3052, 19952, }, 0, 0, 0,},
	{"Pebble_0", { 5809, -1674, 19772, }, 0, 0, 0,},
	{"Pebble_0", { 6492, -2031, 18276, }, 0, 0, 0,},
	{"Pebble_0", { 7604, -1287, 17774, }, 0, 0, 0,},
	{"Pebble_0", { 8770, -2607, 17009, }, 0, 0, 0,},
	{"Pebble_0", { 10554, -1517, 17129, }, 0, 0, 0,},
	{"Pebble_0", { 10598, -3175, 15339, }, 0, 0, 0,},
	{"Pebble_0", { 12486, -3033, 15458, }, 0, 0, 0,},
	{"Pebble_0", { 13740, -2725, 14512, }, 0, 0, 0,},
	{"Pebble_0", { 14745, -3276, 13511, }, 0, 0, 0,},
	{"Pebble_0", { 22025, 326, 13023, }, 0, 0, 0,},
	{"Pebble_0", { 21185, 424, 12183, }, 0, 0, 0,},
	{"Pebble_0", { 20302, -297, 12048, }, 0, 0, 0,},
	{"Pebble_0", { 20299, 801, 11629, }, 0, 0, 0,},
	{"Pebble_0", { 19724, 556, 11818, }, 0, 0, 0,},
	{"Pebble_0", { 19207, -348, 11525, }, 0, 0, 0,},
	{"Pebble_0", { 19223, -55, 11040, }, 0, 0, 0,},
	{"Pebble_0", { 18947, -137, 10526, }, 0, 0, 0,},
	{"Pebble_0", { 18607, 212, 10078, }, 0, 0, 0,},
	{"Pebble_0", { 18670, 279, 9517, }, 0, 0, 0,},
	{"Pebble_0", { 18750, -195, 9030, }, 0, 0, 0,},
	{"Pebble_0", { 18791, -293, 8630, }, 0, 0, 0,},
	{"Pebble_0", { 19052, 676, 11419, }, 0, 0, 0,},
	{"Pebble_0", { 18851, 620, 7927, }, 0, 0, 0,},
	{"Pebble_0", { 18685, 1071, 10548, }, 0, 0, 0,},
	{"Pebble_0", { 19177, -213, 9298, }, 0, 0, 0,},
	{"Pebble_0", { 19130, 389, 6485, }, 0, 0, 0,},
	{"Pebble_0", { 18841, -54, 7431, }, 0, 0, 0,},
	{"Pebble_0", { 18755, 357, 5570, }, 0, 0, 0,},
	{"Pebble_0", { 19541, 499, 10038, }, 0, 0, 0,},
	{"Pebble_0", { -27232, -1161, -7308, }, 0, 0, 0,},
	{"Pebble_0", { -26920, -449, -5527, }, 0, 0, 0,},
	{"Pebble_0", { -26867, -354, -4580, }, 0, 0, 0,},
	{"Pebble_0", { -27265, -432, -5312, }, 0, 0, 0,},
	{"Pebble_0", { -26388, 72, -4076, }, 0, 0, 0,},
	{"Pebble_0", { -27049, 33, -4198, }, 0, 0, 0,},
	{"Pebble_0", { -26294, 356, -3070, }, 0, 0, 0,},
	{"Pebble_0", { -25805, 817, -875, }, 0, 0, 0,},
	{"Pebble_0", { -26059, 74, -2535, }, 0, 0, 0,},
	{"Pebble_0", { -25947, 71, -2087, }, 0, 0, 0,},
	{"Pebble_0", { -26134, 957, -2074, }, 0, 0, 0,},
	{"Pebble_0", { -22190, 2287, 529, }, 0, 0, 0,},
	{"Pebble_0", { -25352, 813, -1649, }, 0, 0, 0,},
	{"Pebble_0", { -24486, 1555, -648, }, 0, 0, 0,},
	{"Pebble_0", { 19899, 1927, 1583, }, 0, 0, 0,},
	{"Pebble_0", { -25132, 1515, -1474, }, 0, 0, 0,},
	{"Pebble_0", { -23856, 1563, 180, }, 0, 0, 0,},
	{"Pebble_0", { -23557, 1839, -483, }, 0, 0, 0,},
	{"Pebble_0", { -24586, 1232, -1564, }, 0, 0, 0,},
	{"Pebble_0", { -22914, 1439, -2089, }, 0, 0, 0,},
	{"Pebble_0", { -24441, 676, -914, }, 0, 0, 0,},
	{"Pebble_0", { -24088, 1642, -1199, }, 0, 0, 0,},
	{"Pebble_0", { -27982, 619, -8195, }, 0, 0, 0,},
	{"Pebble_0", { -23302, 1049, -971, }, 0, 0, 0,},
	{"Pebble_0", { -22981, 1473, -486, }, 0, 0, 0,},
	{"Pebble_0", { -21822, 2542, -1029, }, 0, 0, 0,},
	{"Pebble_0", { -30510, 2600, -2757, }, 0, 0, 0,},
	{"Pebble_0", { -30398, 2222, -3653, }, 0, 0, 0,},
	{"Pebble_0", { -30077, 1928, -3850, }, 0, 0, 0,},
	{"Pebble_0", { 19510, 2107, 4912, }, 0, 0, 0,},
	{"Pebble_0", { -30160, 1389, -4655, }, 0, 0, 0,},
	{"Pebble_0", { -30086, 1229, -5040, }, 0, 0, 0,},
	{"Pebble_0", { -29864, 1418, -5414, }, 0, 0, 0,},
	{"Pebble_0", { -30041, 914, -5249, }, 0, 0, 0,},
	{"Pebble_0", { -22580, 2386, -1905, }, 0, 0, 0,},
	{"Pebble_0", { -30018, 684, -5560, }, 0, 0, 0,},
	{"Pebble_0", { -30178, 749, -5990, }, 0, 0, 0,},
	{"Pebble_0", { -29500, 657, -5894, }, 0, 0, 0,},
	{"Pebble_0", { -22839, 846, -1093, }, 0, 0, 0,},
	{"Pebble_0", { -29063, 724, -6314, }, 0, 0, 0,},
	{"Pebble_0", { -29190, 778, -6913, }, 0, 0, 0,},
	{"Pebble_0", { -28826, 730, -6682, }, 0, 0, 0,},
	{"Pebble_0", { -28510, 245, -7535, }, 0, 0, 0,},
	{"Pebble_0", { -28132, 991, -6129, }, 0, 0, 0,},
	{"Pebble_0", { -27999, 620, -6976, }, 0, 0, 0,},
	{"Pebble_0", { -27724, 242, -7198, }, 0, 0, 0,},
	{"Pebble_0", { -27320, 124, -8384, }, 0, 0, 0,},
	{"Pebble_0", { -26994, -399, -7965, }, 0, 0, 0,},
	{"Pebble_0", { -26782, -562, -8589, }, 0, 0, 0,},
	{"Pebble_0", { -26253, -399, -8915, }, 0, 0, 0,},
	{"Pebble_0", { -20523, -2696, -21040, }, 0, 0, 0,},
	{"Pebble_0", { -4157, -10585, -24229, }, 0, 0, 0,},
	{"Pebble_0", { -17804, -4380, -22212, }, 0, 0, 0,},
	{"Pebble_0", { -20475, -3496, -21351, }, 0, 0, 0,},
	{"Pebble_0", { -14053, -6446, -20522, }, 0, 0, 0,},
	{"Pebble_0", { -16756, -4376, -21991, }, 0, 0, 0,},
	{"Pebble_0", { -16322, -4751, -22096, }, 0, 0, 0,},
	{"Pebble_0", { -27289, -250, -6338, }, 0, 0, 0,},
	{"Pebble_0", { -9203, -9834, -22024, }, 0, 0, 0,},
	{"Pebble_0", { -11294, -6037, -19113, }, 0, 0, 0,},
	{"Pebble_0", { -12154, -7191, -20206, }, 0, 0, 0,},
	{"Pebble_0", { -15380, -4416, -21273, }, 0, 0, 0,},
	{"Pebble_0", { -11837, -8328, -18852, }, 0, 0, 0,},
	{"Pebble_0", { -19854, -3754, -22279, }, 0, 0, 0,},
	{"Pebble_0", { -15092, -5686, -21342, }, 0, 0, 0,},
	{"Pebble_0", { -10446, -9337, -20635, }, 0, 0, 0,},
	{"Pebble_0", { -11498, -8486, -20012, }, 0, 0, 0,},
	{"Pebble_0", { -18404, -4886, -23961, }, 0, 0, 0,},
	{"Pebble_0", { -21043, -2378, -20320, }, 0, 0, 0,},
	{"Pebble_0", { -6740, -8131, -23415, }, 0, 0, 0,},
	{"Pebble_0", { -18431, -4808, -25306, }, 0, 0, 0,},
	{"Pebble_0", { -14441, -7259, -28514, }, 0, 0, 0,},
	{"Pebble_0", { -18712, -4885, -26960, }, 0, 0, 0,},
	{"Pebble_0", { -17764, -5168, -27463, }, 0, 0, 0,},
	{"Pebble_0", { -15966, -6042, -28731, }, 0, 0, 0,},
	{"Pebble_0", { -25305, -664, -8828, }, 0, 0, 0,},
	{"Pebble_0", { -25403, -1100, -9396, }, 0, 0, 0,},
	{"Pebble_0", { -25054, -2105, -11653, }, 0, 0, 0,},
	{"Pebble_0", { -25356, -1125, -11025, }, 0, 0, 0,},
	{"Pebble_0", { -26020, 18, -7861, }, 0, 0, 0,},
	{"Pebble_0", { -25564, -1235, -13159, }, 0, 0, 0,},
	{"Pebble_0", { -24118, -1661, -13760, }, 0, 0, 0,},
	{"Pebble_0", { -24888, -1391, -13268, }, 0, 0, 0,},
	{"Pebble_0", { -25252, -1549, -13839, }, 0, 0, 0,},
	{"Pebble_0", { -9920, -5621, -21665, }, 0, 0, 0,},
	{"Pebble_0", { -24427, -2058, -15465, }, 0, 0, 0,},
	{"Pebble_0", { -24589, -2955, -15842, }, 0, 0, 0,},
	{"Pebble_0", { -26047, -2173, -16107, }, 0, 0, 0,},
	{"Pebble_0", { -25797, -1823, -16595, }, 0, 0, 0,},
	{"Pebble_0", { -25715, -2641, -17134, }, 0, 0, 0,},
	{"Pebble_0", { -23736, -3208, -18274, }, 0, 0, 0,},
	{"Pebble_0", { -23715, -3504, -19105, }, 0, 0, 0,},
	{"Pebble_0", { -25339, -2951, -19066, }, 0, 0, 0,},
	{"Pebble_0", { -24842, -2439, -18540, }, 0, 0, 0,},
	{"Pebble_0", { -24624, -2137, -17660, }, 0, 0, 0,},
	{"Pebble_0", { -24408, -3021, -19535, }, 0, 0, 0,},
	{"Pebble_0", { -22659, -3524, -20316, }, 0, 0, 0,},
	{"Pebble_0", { -23535, -3159, -20320, }, 0, 0, 0,},
	{"Pebble_0", { -21376, -4001, -21205, }, 0, 0, 0,},
	{"Pebble_0", { -19452, -4290, -20739, }, 0, 0, 0,},
	{"Pebble_0", { 14309, 663, 594, }, 0, 0, 0,},
	{"Pebble_0", { 16178, 871, 3600, }, 0, 0, 0,},
	{"Pebble_0", { 16742, 1127, 4313, }, 0, 0, 0,},
	{"Pebble_0", { 16615, 1129, 4666, }, 0, 0, 0,},
	{"Pebble_0", { 15613, 1097, 2146, }, 0, 0, 0,},
	{"Pebble_0", { 17351, 999, 4999, }, 0, 0, 0,},
	{"Pebble_0", { 15735, 847, 2877, }, 0, 0, 0,},
	{"Pebble_0", { 16960, 1079, 5534, }, 0, 0, 0,},
	{"Pebble_0", { 13459, 669, -1344, }, 0, 0, 0,},
	{"Pebble_0", { 17132, 1281, 6317, }, 0, 0, 0,},
	{"Pebble_0", { 17603, 1301, 6893, }, 0, 0, 0,},
	{"Pebble_0", { -19659, -4657, -22658, }, 0, 0, 0,},
	{"Pebble_0", { 17946, 1495, 7402, }, 0, 0, 0,},
	{"Pebble_0", { -22044, -2645, -19442, }, 0, 0, 0,},
	{"Pebble_0", { -19284, -5127, -21853, }, 0, 0, 0,},
	{"Pebble_0", { -20250, -4569, -23726, }, 0, 0, 0,},
	{"Pebble_0", { -23927, -3459, -21689, }, 0, 0, 0,},
	{"Pebble_0", { 17156, -1359, -13885, }, 0, 0, 0,},
	{"Pebble_0", { 17402, -2741, -11544, }, 0, 0, 0,},
	{"Pebble_0", { 17473, -2291, -9902, }, 0, 0, 0,},
	{"Pebble_0", { 16252, -2106, -9896, }, 0, 0, 0,},
	{"Pebble_0", { 16080, -1585, -8339, }, 0, 0, 0,},
	{"Pebble_0", { 15459, -1550, -7628, }, 0, 0, 0,},
	{"Pebble_0", { 14327, -1146, -6739, }, 0, 0, 0,},
	{"Pebble_0", { 12911, -1159, -5943, }, 0, 0, 0,},
	{"Pebble_0", { 12786, -1269, -5466, }, 0, 0, 0,},
	{"Pebble_0", { 14297, 249, -625, }, 0, 0, 0,},
	{"Pebble_0", { 13436, -743, -4102, }, 0, 0, 0,},
	{"Pebble_0", { 12952, -661, -3591, }, 0, 0, 0,},
	{"Pebble_0", { 14015, 451, 1792, }, 0, 0, 0,},
	{"Pebble_0", { 12695, -615, -2032, }, 0, 0, 0,},
	{"Pebble_0", { -13920, -3241, -3372, }, 0, 0, 0,},
	{"Pebble_0", { -14771, -3235, -5310, }, 0, 0, 0,},
	{"Pebble_0", { -11073, -5263, -17851, }, 0, 0, 0,},
	{"Pebble_0", { -10827, -6645, -15510, }, 0, 0, 0,},
	{"Pebble_0", { -10757, -6195, -13868, }, 0, 0, 0,},
	{"Pebble_0", { -11978, -6010, -13862, }, 0, 0, 0,},
	{"Pebble_0", { -12150, -5489, -12305, }, 0, 0, 0,},
	{"Pebble_0", { -12771, -5454, -11594, }, 0, 0, 0,},
	{"Pebble_0", { -13903, -5050, -10705, }, 0, 0, 0,},
	{"Pebble_0", { -15319, -5063, -9909, }, 0, 0, 0,},
	{"Pebble_0", { -15444, -5173, -9432, }, 0, 0, 0,},
	{"Pebble_0", { -13933, -3655, -4591, }, 0, 0, 0,},
	{"Pebble_0", { -14794, -4647, -8068, }, 0, 0, 0,},
	{"Pebble_0", { -15535, -4519, -5998, }, 0, 0, 0,},
	{"Pebble_0", { 15925, 12474, 7937, }, 0, 0, 0,},
}

Clouds = {}

--  Name: MapFunctions v1.18.0
--  Author: Mikali
--  Created: 2004/10/07
--  Updated: 2013/09/30
--  Homepage: http//isometricland.net
--  Discussion:
--  http://forums.relicnews.com/showthread.php?t=48818
--  http://forums.relicnews.com/showthread.php?t=82964 (old thread)
-- http://forums.relicnews.com/showthread.php?t=40779 (old thread)
--  Credits:
--  * MathWorld and Wikipedia for the parametric surface functions used in 
--    "shapeAdd", "harmonographAdd" and probably elsewhere.
--  * GameDev.net for the implicit metaball formula used in "blobAdd".
--  * The function "flokalAdd" is based on 'doodle 4' by bitcraft at 
--    OpenProcessing.org.
--  * Lorenzo Donati at Stack Overflow for the new pseudo random number 
--    generator.


--------------------------------------------------------------------------------
-- Global variables.
--

-- incremental counters
iStartPoints, iPoints, iSpheres, iCameras, iSquadrons, iAsteroids, iSalvage, iPebbles, iClouds, iDustClouds, iNebulas, iDirLights, iRvAsteroids, iRvSquadrons = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
TWO_PI = 2 * PI


--------------------------------------------------------------------------------
--  Name:		appendShape
--  Description:	General shape-adding function utilized internally by the other functions.
--  Syntax:		appendShape(<tPos>, <i>, <tPar>, <j>, <tCoo>, <tRot>)
--  Arguments:
--	<tPos>: a table containing the initial coordinates for the object.
--	<i>: the index of the object within the distribution table.
--	<tPar>: a table containing the object-specific parameters.
--	<j>: the position number of the object within the distribution table.
--	<tCoo>: a table containing the modified coordinates for the object.
--	<tRot>: a table containing the Euler rotation angles.
--  Notes:
--	1. I would like to change the order of the parameters so that <tPos> 
--	   comes after <tRot> since translation is done after rotation. Would 
--	   be good to modify all the other functions to copy this syntax as 
--	   well.
--	2. I should group <i> and <j> together as well.
--------------------------------------------------------------------------------

function appendShape(tPos, i, tPar, j, tCoo, tRot)
	tCoo = vaddV(vrotate(tCoo, tRot), tPos)
	local objType = tPar[2]
	if (objType == "Squadron") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addSquadron(<sSquadronName>, <sSquadronType>, <tPosition>, <iPlayerIndex>, <tRotation>, <iNumberShips>, <bHyperspace>)
		addSquadron(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8], tPar[9])
		iSquadrons = iSquadrons + 1
	elseif (objType == "Asteroid") then
		--addAsteroid(<sAsteroidType>, <tPosition>, <fRU%>, ?, ?, ?, ?)
		addAsteroid(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7], tPar[8], tPar[9])
		iAsteroids = iAsteroids + 1
	elseif (objType == "Salvage") then
		--addSalvage(<sChunkType>, <tPosition>, <fRU%>, ?, ?, ?, ?)
		addSalvage(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7], tPar[8], tPar[9])
		iSalvage = iSalvage + 1
	elseif (objType == "Pebble") then
		--addPebble(<sPebbleType>, <tPosition>, ?, ?, ?)
		addPebble(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7])
		iPebbles = iPebbles + 1
	elseif (objType == "Cloud") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addCloud(<sCloudName>, <sCloudType>, <tPosition>, <tColor>, ?, <fRadius>)
		addCloud(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8])
		iClouds = iClouds + 1
	elseif (objType == "DustCloud") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addDustCloud(<sDustCloudName>, <sDustCloudType>, <tPosition>, <tColor>, ?, <fRadius>)
		addDustCloud(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8])
		iDustClouds = iDustClouds + 1
	elseif (objType == "Nebula") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addNebula(<sNebulaName>, <sNebulaType>, <tPosition>, <tColor>, ?, <fRadius>)
		addNebula(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8])
		iNebulas = iNebulas + 1
	elseif (objType == "Point") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addPoint(<sPointName>, <tPosition>, <tRotation>)
		addPoint(name, vaddV(tCoo, tPar[4]), tPar[5])
		iPoints = iPoints + 1
	elseif (objType == "StartPoint") then
		local name = "StartPos" .. iStartPoints
		--addPoint(<sPointName>, <tPosition>, <tRotation>)
		addPoint(name, vaddV(tCoo, tPar[4]), tPar[5])
		iStartPoints = iStartPoints + 1
	elseif (objType == "Sphere") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addSphere(<sSphereName>, <tPosition>, <fRadius>)
		addSphere(name, vaddV(tCoo, tPar[4]), tPar[5])
		iSpheres = iSpheres + 1
	elseif (objType == "Camera") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addCamera(<sCameraName>, <tTarget>, <tPosition>)
		addCamera(name, tPar[5], vaddV(tCoo, tPar[4]))
		iCameras = iCameras + 1
	elseif (objType == "DirLight") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--createDirLight(<sLightName>, <tPosition>, <tColor>)
		createDirLight(name, vaddV(tCoo, tPar[4]), tPar[5])
		--setLightSpecular (<sLightName>, <tSpecular>)
		setLightSpecular(name, tPar[6])
		iDirLights = iDirLights + 1
	elseif (objType == "ReactiveSquadron") then
		--addReactiveFleetSlot(<sSobGroupName>, <iPlayerIndex>, ?, <tPosition>, ?, ?, ?, <sShipType>)
		addReactiveFleetSlot(tPar[5], tPar[6], tPar[7], vaddV(tCoo, tPar[4]), tPar[8], tPar[9], tPar[10], tPar[3])
		iRvSquadrons = iRvSquadrons + 1
	elseif (objType == "ReactiveAsteroid") then
		--addReactiveFleetResourceSlot(<sResourceType>, <tPosition>, ?, ?, ?)
		addReactiveFleetResourceSlot(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7])
		iRvAsteroids = iRvAsteroids + 1
	elseif (objType == "Coordinate") then
		tinsert(tPar[3], tCoo)
		print("function appendShape: adding a coordinate to the coordinate table")
		print("function appendShape: coordinate table length = " .. getn(tPar[3]))
	elseif (objType == "Function") then
		if not (tPar[7]) then
			tPar[7] = {0,0,0,}
		end
		if (tPar[3] == literalAdd) then
			literalAdd(tPar[4], tPar[5], tPar[6], vaddV(tRot, tPar[7]))
		else
			tPar[3](vaddV(tCoo, tPar[4]), tPar[5], tPar[6], vaddV(tRot, tPar[7]))
		end
	else
		print("function appendShape: object class not recognized")
	end
end

function addCoordinate(tCoo, rTable)
	tinsert(rTable, tCoo)
end

function addSOBGroup(sSobName, ...)
	createSOBGroup(sSobName)
	for i = 1, getn(arg) do
		addToSOBGroup(arg[i], sSobName)
	end
end

function doAllSOBGroups(ttable)
	for sobgname, sobgarray in ttable do
		for j = 1, getn(sobgarray) do
			if sobgarray[j][4] == 0 then
				if sobgarray[j][2] == 1 then
					addToSOBGroup(sobgarray[j][1], sobgname)
				else
					for k = 1, sobgarray[j][2] do
						addToSOBGroup(sobgarray[j][1] .. "_" .. k, sobgname)
					end
				end
			end
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		branchAdd
--  Description:	Creates a branching tree-like fractal.
--  Syntax:		branchAdd(<tPos>, <tDst>, {<tDiv>, <tInt>, <tFrq>, <tBeg>, <tEnd>, <tRad>, <tLen>, <tThk>, <tAng>, <iMod>,}, <tRot>, <tSeed>, ...)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following ten parameters:
--		<tDiv>: a table containing the minimum and maximum number of new shoots that are generated each time the tree divides.
--		<tInt>: a table containing the minimum and maximum number of segments between instances of division.
--		<tFrq>: a table containing the minimum and maximum number of times the tree divides.
--		<tBeg>: a table containing the minimum and maximum number of segments added to the beginning of the tree.
--		<tEnd>: a table containing the minimum and maximum number of segments added to the end of the tree (at the end of each branch). (Note: this value needs to be greater than zero in order for the last division to be noticable.)
--		<tRad>: a table containing the the minimum and maximum radius of a segment.
--		<tLen>: a table containing the minimum and maximum length of a segment.
--		<tThk>: a table containing the minimum and maximum thickness, as percentages of the radius, of a segment.
--		<tAng>: a table containing the minimum and maximum angle of deviation between segments.
--		<iMod>: 0 is non-random mode, 1 is random placement with steadily decreasing length and radius, 2 is random placement with random length and radius, 3 is a bug-ridden method using splines.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--	The remaining arguments are used internally by the function and should not be modified directly.
--  Notes:
--	1. I suppose I need an <iMod> = 4 mode for a random method using splines, but without decreasing length and radius.
--------------------------------------------------------------------------------

function branchAdd(tPos, tDst, tPar, tRot, tSeed, lastRad, countDiv, countFrq, lastPos, nextPos, tiltDeg, spinDeg)
	local thisPos = {}
	local tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6], tPar[7], tPar[8], tPar[9], tPar[10]
	local minRad, maxRad, minDist, maxDist, minThck, maxThck = tRad[1], tRad[2], tLen[1], tLen[2], tThk[1]/100, tThk[2]/100
	local minAng, maxAng, minBeg, maxBeg, minEnd, maxEnd = tAng[1], tAng[2], tBeg[1], tBeg[2], tEnd[1], tEnd[2]
	local minDiv, maxDiv, minInt, maxInt, minFrq, maxFrq = tDiv[1], tDiv[2], tInt[1], tInt[2], tFrq[1], tFrq[2]
	local numSeg, numInt, numDiv, numBeg, numEnd, numFrq = 0, 0, 0, 0, 0, 0
	if (lastRad == nil) then
		lastRad = maxRad
		countDiv = 1
		countFrq = minFrq
	else
		countFrq = countFrq - 1
	end
	if (lastPos == nil) then
		lastPos = {0,0,0,}
		nextPos = {0,0,0,}
		tiltDeg, spinDeg = 0, 0
	end
	local thisRad = sqrt(lastRad^2/countDiv)
	-- if set to non-random mode
	if (iMod == 0) then
		numInt, numDiv, numBeg, numEnd, numFrq = maxInt, minDiv, maxBeg, maxEnd, maxFrq
	-- if set to random mode, or random mode with decreasing length and radius
	else
		numInt, numDiv, numBeg, numEnd, numFrq = srandom2(tSeed, minInt, maxInt), srandom2(tSeed, minDiv, maxDiv), srandom2(tSeed, minBeg, maxBeg), srandom2(tSeed, minEnd, maxEnd), srandom2(tSeed, minFrq, maxFrq)
	end
	if (numBeg > 0) then
		numSeg = numBeg
	elseif (numFrq > 0) then
		numSeg = numInt
	elseif (numEnd > 0) then
		numSeg = numEnd
	end
	for k = 1, numSeg do
		local rad, len, thk, angY, angZ = 0, 0, 0, 0, 0
		-- if set to non-random mode
		if (iMod == 0) then
			local sign1, sign2 = srandomSign(tSeed), srandomSign(tSeed)
			rad, len, angY, angZ = maxRad, maxDist, sign1 * maxAng, sign2 * maxAng
		-- if set to random mode with decreasing length and radius
		elseif (iMod == 1) or (iMod == 3) then
			local sign1, sign2, narrw = srandomSign(tSeed), srandomSign(tSeed), srandom3(tSeed, 0.9, 1)
			thisRad = thisRad * narrw
			thk, rad, len, angY, angZ = srandom3(tSeed, minThck, maxThck) * narrw, thisRad, maxDist - (maxDist - minDist)/(numFrq + 1), srandom3(tSeed, minAng, maxAng) * sign1, srandom3(tSeed, minAng, maxAng) * sign2
		-- if set to random mode
		elseif (iMod == 2) then
			local sign1, sign2 = srandomSign(tSeed), srandomSign(tSeed)
			thk, rad, len, angY, angZ = srandom3(tSeed, minThck, maxThck), srandom3(tSeed, minRad, maxRad), srandom3(tSeed, minDist, maxDist), srandom3(tSeed, minAng, maxAng) * sign1, srandom3(tSeed, minAng, maxAng) * sign2
		end
		tiltDeg, spinDeg = tiltDeg + angZ, spinDeg + angY
		thisPos = nextPos
		nextPos = vaddV(nextPos, vrotate({len, 0, 0,}, {0, spinDeg, tiltDeg,}))
		for i, tTab in tDst do
			local Volume1, Volume2 = PI * maxRad^2 * maxDist, PI * rad^2 * len
			local Density = Volume2/Volume1
			local iNum, gradX = floor(tTab[1] * Density + 0.5), len
			for j = 1, iNum do
				-- if set to non-random mode
				if (iMod == 0) then
					local tCoo = {gradX, 0, 0,}
					tCoo = vaddV(thisPos, vrotate(tCoo, {0, spinDeg, tiltDeg,}))
					appendShape(tPos, i, tTab, j, tCoo, tRot)
				-- if set to random mode with decreasing length and radius
				elseif (iMod == 1) then
					local r = sqrt(srandom(tSeed)) * thk * rad + (1 - thk) * rad
					local v, h = srandom3(tSeed, 360), srandom3(tSeed, len)
					local tCoo = {h, r * cos(v), r * sin(v),}
					tCoo = vaddV(thisPos, vrotate(tCoo, {0, spinDeg, tiltDeg,}))
					appendShape(tPos, i, tTab, j, tCoo, tRot)
				-- if set to random mode
				elseif (iMod == 2) then
					local r = sqrt(srandom(tSeed)) * thk * rad + (1 - thk) * rad
					local v, h = srandom3(tSeed, 360), srandom3(tSeed, len)
					local tCoo = {h, r * cos(v), r * sin(v),}
					tCoo = vaddV(thisPos, vrotate(tCoo, {0, spinDeg, tiltDeg,}))
					appendShape(tPos, i, tTab, j, tCoo, tRot)
				-- if set to random method using splines with decreasing length and radius
				elseif (iMod == 3) then
					local t = srandom(tSeed)
					local A = vmidpoint(lastPos, thisPos)
					local B = thisPos
					local C = vmidpoint(thisPos, nextPos)
					local r = sqrt(srandom(tSeed)) * thk * rad + (1 - thk) * rad
					local v = srandom(tSeed, 360)
					local tCirc =
					{
						r * cos(v),
						r * sin(v),
						0,
					}
					local tCoo =
					{
						(1 - t)^2 * A[1] + 2 * (1 - t) * t * B[1] + t^2 * C[1],
						(1 - t)^2 * A[2] + 2 * (1 - t) * t * B[2] + t^2 * C[2],
						(1 - t)^2 * A[3] + 2 * (1 - t) * t * B[3] + t^2 * C[3],
					}
					local tDerivatives =
					{
						2 * (1 - t) * (B[1] - A[1]) + 2 * t * (C[1] - B[1]),
						2 * (1 - t) * (B[2] - A[2]) + 2 * t * (C[2] - B[2]),
						2 * (1 - t) * (B[3] - A[3]) + 2 * t * (C[3] - B[3]),
					}
					local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
					appendShape(tPos, i, tTab, j, vaddV(tCoo, tNormedPos), tRot)
				end
				gradX = gradX - len/iNum
			end
		end
		lastPos = thisPos
	end
	if (numBeg > 0) then
		tBeg = {0, 0,}
		branchAdd(tPos, tDst, {tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod,}, tRot, tSeed, nil, nil, nil, lastPos, nextPos, tiltDeg, spinDeg)
	elseif (numFrq > 0) then
		if (minFrq >= numFrq) then
			minFrq = numFrq - 1
		end
		tFrq = {minFrq, numFrq - 1,}
		for j = 1, numDiv do
			branchAdd(tPos, tDst, {tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod,}, tRot, tSeed, thisRad, numDiv, countFrq, lastPos, nextPos, tiltDeg, spinDeg)
		end
	elseif (numEnd > 0) then
		tDiv, tInt, tFrq, tEnd = {0, 0,}, {0, 0,}, {0, 0,}, {0, 0,}
		branchAdd(tPos, tDst, {tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod,}, tRot, tSeed, thisRad, numDiv, countFrq, lastPos, nextPos, tiltDeg, spinDeg)
	end
end


--------------------------------------------------------------------------------
--  Name:		spline3Add
--  Description:	Creates a Hermite spline-shaped tube connecting any two points using two control points.
--  Syntax:		spline3Add(<tPos>, <tDst>, {<tP1A>, <tP1B>, <tP2A>, <tP2B>, <tRad>, <tThk>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following six parameters:
--		<tP1A>: a table containing the coordinates of the starting point.
--		<tP1B>: a table containing the coordinates of the first control point.
--		<tP2A>: a table containing the coordinates of the ending point.
--		<tP2B>: a table containing the coordinates of the second control point.
--		<tRad>: a table containing the initial and final radii of the tube.
--		<tThk>: a table containing the initial and final thickness of the tube lining, as a percentage of the radius.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Still not sure whether <tThk> should be a percentage instead of a fixed value.
--	2. Needs an <iMode> parameter to output non-random coordinates.
--------------------------------------------------------------------------------

function spline3Add(tPos, tDst, tPar, tRot, tSeed)
	local tP1A, tP1B, tP2A, tP2B, tRad, tThk = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6]
	local begRad, endRad, begThk, endThk = tRad[1], tRad[2], tThk[1]/100, tThk[2]/100
	local P1A_x, P1A_y, P1A_z, P1B_x, P1B_y, P1B_z = tP1A[1], tP1A[2], tP1A[3], tP1B[1], tP1B[2], tP1B[3]
	local P2A_x, P2A_y, P2A_z, P2B_x, P2B_y, P2B_z = tP2A[1], tP2A[2], tP2A[3], tP2B[1], tP2B[2], tP2B[3]

	-- need to reverse the direction of the second control point so that the curves can be stitched neatly together, later
	local C_x = 2 * P2A_x - P2B_x
	local C_y = 2 * P2A_y - P2B_y
	local C_z = 2 * P2A_z - P2B_z

	for i, tTab in tDst do
		for j = 1, tTab[1] do
			local t, phi = srandom(tSeed), srandom(tSeed, 360)
			local r = begRad + (endRad - begRad) * t
			local h = begThk + (endThk - begThk) * t
			r = sqrt(srandom(tSeed)) * h * r + (1 - h) * r
			local tCirc =
			{
				r * cos(phi),
				r * sin(phi),
				0,
			}
			local tCoo =
			{
				(P2A_x + 3 * P1B_x - 3 * C_x - P1A_x) * t^3 + (3 * C_x - 6 * P1B_x + 3 * P1A_x) * t^2 + (3 * P1B_x - 3 * P1A_x) * t + P1A_x,
				(P2A_y + 3 * P1B_y - 3 * C_y - P1A_y) * t^3 + (3 * C_y - 6 * P1B_y + 3 * P1A_y) * t^2 + (3 * P1B_y - 3 * P1A_y) * t + P1A_y,
				(P2A_z + 3 * P1B_z - 3 * C_z - P1A_z) * t^3 + (3 * C_z - 6 * P1B_z + 3 * P1A_z) * t^2 + (3 * P1B_z - 3 * P1A_z) * t + P1A_z,
			}
			local tDerivatives =
			{
				(P2A_x + 3 * P1B_x - 3 * C_x - P1A_x) * 3 * t^2 + (3 * C_x - 6 * P1B_x + 3 * P1A_x) * 2 * t + (3 * P1B_x - 3 * P1A_x),
				(P2A_y + 3 * P1B_y - 3 * C_y - P1A_y) * 3 * t^2 + (3 * C_y - 6 * P1B_y + 3 * P1A_y) * 2 * t + (3 * P1B_y - 3 * P1A_y),
				(P2A_z + 3 * P1B_z - 3 * C_z - P1A_z) * 3 * t^2 + (3 * C_z - 6 * P1B_z + 3 * P1A_z) * 2 * t + (3 * P1B_z - 3 * P1A_z),
			}
			local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
			appendShape(tPos, i, tTab, j, vaddV(tCoo, tNormedPos), tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		spline2Add
--  Description:	Creates a quadratic spline-shaped tube connecting any two points using a control point.
--  Syntax:		spline2Add(<tPos>, <tDst>, {<tP1>, <tP2>, <tP3>, <tRad>, <tThk>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following six parameters:
--		<tP1>: a table containing the coordinates of the starting point.
--		<tP2>: a table containing the coordinates of the control point.
--		<tP3>: a table containing the coordinates of the ending point.
--		<tRad>: a table containing the initial and final radii of the tube.
--		<tThk>: a table containing the initial and final thickness of the tube lining, as a percentage of the radius.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Still not sure whether <tThk> should be a percentage instead of a fixed value.
--	2. Needs an <iMode> parameter to output non-random coordinates.
--------------------------------------------------------------------------------

function spline2Add(tPos, tDst, tPar, tRot, tSeed)
	local tP1, tP2, tP3, tRad, tThk = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5]
	local begRad, endRad, begThk, endThk = tRad[1], tRad[2], tThk[1]/100, tThk[2]/100
	for i, tTab in tDst do
		for j = 1, tTab[1] do
			local t, phi = srandom(tSeed), srandom(tSeed, 360)
			local r = begRad + (endRad - begRad) * t
			local h = begThk + (endThk - begThk) * t
			r = sqrt(srandom(tSeed)) * h * r + (1 - h) * r
			local tCirc =
			{
				r * cos(phi),
				r * sin(phi),
				0,
			}
			local tCoo =
			{
				(1 - t)^2 * tP1[1] + 2 * (1 - t) * t * tP2[1] + t^2 * tP3[1],
				(1 - t)^2 * tP1[2] + 2 * (1 - t) * t * tP2[2] + t^2 * tP3[2],
				(1 - t)^2 * tP1[3] + 2 * (1 - t) * t * tP2[3] + t^2 * tP3[3],
			}
			local tDerivatives =
			{
				2 * (1 - t) * (tP2[1] - tP1[1]) + 2 * t * (tP3[1] - tP2[1]),
				2 * (1 - t) * (tP2[2] - tP1[2]) + 2 * t * (tP3[2] - tP2[2]),
				2 * (1 - t) * (tP2[3] - tP1[3]) + 2 * t * (tP3[3] - tP2[3]),
			}
			local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
			appendShape(tPos, i, tTab, j, vaddV(tCoo, tNormedPos), tRot)
		end
	end
end

--------------------------------------------------------------------------------
--  Name:		blobAdd
--  Description:	Creates a network of metaballs, or blobs, based on the formula for electromagnetic fields.
--  Syntax:		blobAdd(<tPos>, <tDst>, {<tBlobs>, <fThrsh1>, <fThrsh2>, <tScale>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following four parameters:
--		<tBlobs>: a table containing the location coordinates and strength of each blob.
--		<fThrsh1>: threshold 1 in units of field strength.
--		<fThrsh2>: threshold 2 in units of field strength.
--		<tScale>: scale the entire shape by these amounts in the {x,y,z} directions.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. This function is kind of a mess, but the results look OK. I would 
--	   rather plot points parametrically instead of plotting them randomly 
--	   and then testing whether they're inside the blob or not. 
--	   Unfortunately, the function is an implicit isosurface.
--	2. Negative field strength/radius doesn't work here like it does in 
--	   "fieldAdd". Nor does it make sense to I think.
--	3. Should this function use the "fieldCalc" function to calculate 
--	   field strength?
--	4. See Method 1 at: http://www.geogebra.org/en/upload/files/english/Michael_Horvath/Metaballs/geogebra_metaballs.htm
--------------------------------------------------------------------------------

function blobAdd(tPos, tDst, tPar, tRot, tSeed)
	local tBlobs = tPar[1]
	local Blob_threshold_1 = tPar[2]
	local Blob_threshold_2 = tPar[3]
	local Blob_scale = tPar[4]

	-- calculate the bounding box enclosing the blobs
	local Blob_min = {0,0,0,}
	local Blob_max = {0,0,0,}
	for j, jBlob in tBlobs do
		local Blob_vector = jBlob[1]
		local Blob_radius = jBlob[2]
		Blob_min = {min(Blob_min[1], Blob_vector[1] - Blob_radius), min(Blob_min[2], Blob_vector[2] - Blob_radius), min(Blob_min[3], Blob_vector[3] - Blob_radius),}
		Blob_max = {max(Blob_max[1], Blob_vector[1] + Blob_radius), max(Blob_max[2], Blob_vector[2] + Blob_radius), max(Blob_max[3], Blob_vector[3] + Blob_radius),}
	end

	for i, tTab in tDst do
		local jCount = 1
		local jMax = tTab[1]
		while (jCount <= jMax) do
			-- generate a new point somewhere within the blob's bounding box
			local Vector_new = {srandom3(tSeed, Blob_min[1], Blob_max[1]), srandom3(tSeed, Blob_min[2], Blob_max[2]), srandom3(tSeed, Blob_min[3], Blob_max[3]),}
	--		local Vector_new = {random3(Blob_min[1], Blob_max[1]), random3(Blob_min[2], Blob_max[2]), random3(Blob_min[3], Blob_max[3]),}

			-- get the field strength at that point
			local Actual_strength = 0
			for j, jBlob in tBlobs do
				local Blob_vector = jBlob[1]
				local Blob_radius = jBlob[2]
				Actual_strength = Actual_strength + (Blob_radius / sqrt((Vector_new[1] - Blob_vector[1])^2 + (Vector_new[2] - Blob_vector[2])^2 + (Vector_new[3] - Blob_vector[3])^2))
			end

			if (Actual_strength > Blob_threshold_1) then
				-- the field strength, normalized to between 0 and 1
				local Strength_ratio = (Actual_strength - Blob_threshold_1)/(Blob_threshold_2 - Blob_threshold_1)
				-- points should be denser where the strength is greater
				if (Strength_ratio > sqrt(srandom3(tSeed))) then
					-- scale all coordinates by this amount to make the blobs look flatter and better
					Vector_new = vmultiplyV(Vector_new, Blob_scale)
					appendShape(tPos, i, tTab, jCount, Vector_new, tRot)
					jCount = jCount + 1
				end
			end
		end
	end
end

-- old version not using distributions
function blobAdd2(tPos, xNil, tPar, tRot, tSeed)
	local tBlobs = tPar[1]
	local Point_number = tPar[2]
	local Blob_threshold_1 = tPar[3]
	local Blob_threshold_2 = tPar[4]
	local Blob_scale = tPar[5]

	-- calculate the bounding box enclosing the blobs
	-- not really a good method...
	local Blob_min = {0,0,0,}
	local Blob_max = {0,0,0,}
	for j, jBlob in tBlobs do
		local Blob_vector = jBlob[1]
		local Blob_radius = jBlob[2]
		Blob_min = {min(Blob_min[1], Blob_vector[1] - Blob_radius), min(Blob_min[2], Blob_vector[2] - Blob_radius), min(Blob_min[3], Blob_vector[3] - Blob_radius),}
		Blob_max = {max(Blob_max[1], Blob_vector[1] + Blob_radius), max(Blob_max[2], Blob_vector[2] + Blob_radius), max(Blob_max[3], Blob_vector[3] + Blob_radius),}
	end

	local Point_padding = 500		-- put in tPar?
	local Point_maxradius = 1000;
	local Point_list = {}
	local Point_count = 1
	while (Point_count <= Point_number) do
		-- generate a new point somewhere within the blob's bounding box
		local Vector_new = {srandom3(tSeed, Blob_min[1], Blob_max[1]), srandom3(tSeed, Blob_min[2], Blob_max[2]), srandom3(tSeed, Blob_min[3], Blob_max[3]),}
--		local Vector_new = {random3(Blob_min[1], Blob_max[1]), random3(Blob_min[2], Blob_max[2]), random3(Blob_min[3], Blob_max[3]),}

		-- get the field strength at that point
		local Actual_strength = 0
		for j, jBlob in tBlobs do
			local Blob_vector = jBlob[1]
			local Blob_radius = jBlob[2]
			Actual_strength = Actual_strength + (Blob_radius / sqrt((Vector_new[1] - Blob_vector[1])^2 + (Vector_new[2] - Blob_vector[2])^2 + (Vector_new[3] - Blob_vector[3])^2))
		end

		if (Actual_strength > Blob_threshold_1) then
			-- the field strength, normalized to between 0 and 1
			local Strength_ratio = (Actual_strength - Blob_threshold_1)/(Blob_threshold_2 - Blob_threshold_1)
			local Random_ratio = Strength_ratio * srandom3(tSeed)
			-- points should be denser where the strength is greater
			if (Random_ratio > sqrt(srandom3(tSeed))) then
				-- the point's radius, points should be larger where the strength is greater
				local Radius_new = min(Point_maxradius * Random_ratio, Point_maxradius)

				-- scale all coordinates by this amount to make the blobs look flatter and better
				Vector_new = vmultiplyV(Vector_new, Blob_scale)

				-- make sure the asteroids are not too close to each other (TOO SLOW!!!)
				local Pass_bool = 1

				local Point_count_sub = 1
				while (Point_count_sub < Point_count) do
					local Vector_old = Point_list[Point_count_sub][1]
					local Radius_old = Point_list[Point_count_sub][2]
					local Distance = vdistance(Vector_old, Vector_new)
					local Radius_all = max(Radius_old, Radius_new, Point_padding)
					if (Distance <= Radius_all) then
						Pass_bool = 0
						break
					end
					Point_count_sub = Point_count_sub + 1
				end

				-- make sure no points are equal
--				local Point_count_sub = 1
--				while (Point_count_sub < Point_count) do
--					local Vector_old = Point_list[Point_count_sub][1]
--					if (veq(Vector_old, Vector_new) == 1) then
--						Pass_bool = 0
--						print("\tPoint_count = " .. Point_count .. "\n\tVector_old = " .. vstr(Vector_old) .. "\tPoint_count_sub = " .. Point_count_sub .. "\n\tVector_new = " .. vstr(Vector_new))
--						break
--					end
--					Point_count_sub = Point_count_sub + 1
--				end

				if (Pass_bool == 1) then
					-- the square roots here may not be necessary
					-- raising the threshold might achieve the same
					-- but the test map looks good with them
					if (Random_ratio <= sqrt(2/10)) then
						--appendShape(tPos, i, tPar, j, tCoo, tRot)
						--addAsteroid(<sAsteroidType>, <tPosition>, <fRU%>, ?, ?, ?, ?)
	--					appendShape(tPos, 1, {1, "Asteroid", "Asteroid_1", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
						appendShape(tPos, 1, {1, "Pebble", "Pebble_1", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(4/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_2", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(6/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_3", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(8/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_4", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(10/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_5", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					end
					--print("Point_count = " .. Point_count .. "\nVector_new = " .. vstr(Vector_new))
					Point_list[Point_count] = {Vector_new, Radius_new}
					Point_count = Point_count + 1
				end
			end
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		fieldAdd
--  Description:	Similar to blobAdd, except it produces a heightmap based on the field strength instead of 3D blobs.
--  Syntax:		fieldAdd(<tPos>, <tRes>, {<tBlobs>, <fThrshMin>, <fThrshMax>, <fFieldSize>, <fStepHeight>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following four parameters:
--		<tBlobs>: a table containing the location coordinates and strength of each blob.
--		<fThrshMin>: minimum threshold in units of field strength.
--		<fThrshMax>: maximum threshold in units of field strength.
--		<fFieldSize>: the size of the entire field in X, Y, Z dimensions.
--		<fStepHeight>: the height of one unit of field strength.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. The output looks kind of weird near the peaks of the functions 
--	   unless you use a large value for <fFieldSize>.
--	2. See Method 1 at: http://www.geogebra.org/en/upload/files/english/Michael_Horvath/Metaballs/geogebra_metaballs.htm
--------------------------------------------------------------------------------

function fieldAdd(tPos, tTab, tPar, tRot, xNil)
	local tBlobs = tPar[1]
	local Blob_threshold_1 = tPar[2]
	local Blob_threshold_2 = tPar[3]
	local field_size = tPar[4]
	local step_height = tPar[5]
	local jCount = 0
	local jMax = floor(sqrt(tTab[1]))
	local jStep = field_size/jMax
	for j = 0, jMax do
		for k = 0, jMax do
			-- generate a new point
			local Vector_new = {j * jStep - field_size/2, 0, k * jStep - field_size/2,}

			-- get the field strength at that point
			local Actual_strength = fieldCalc(tBlobs, Vector_new, Blob_threshold_1, Blob_threshold_2)

			Vector_new = {Vector_new[1], Actual_strength * step_height, Vector_new[3],}

			jCount = jCount + 1
			appendShape(tPos, i, tTab, jCount, Vector_new, tRot)
		end
	end
end

-- calculate the strength of an electromagnetic field at a given point
function fieldCalc(tBlobs, tVector, minThrsh, maxThrsh)
	-- get the field strength at that point
	local Actual_strength = 0
	for j, jBlob in tBlobs do
		local Blob_vector = jBlob[1]
		local Blob_radius = jBlob[2]
		Actual_strength = Actual_strength + Blob_radius / sqrt((tVector[1] - Blob_vector[1])^2 + (tVector[2] - Blob_vector[2])^2 + (tVector[3] - Blob_vector[3])^2)
	end
	return max(min(Actual_strength, maxThrsh), minThrsh)
end

--------------------------------------------------------------------------------
--  Name:		flokalAdd
--  Description:	Creates a kaleidoscopic bubble and swirl pattern kind of like a doily.
--  			Based on 'doodle 4' by bitcraft, http://www.openprocessing.org/sketch/17344 
--  Syntax:		flokalAdd(<tPos>, <tRes>, {<iNx>, <iNy>, <iXmin>, <iSx>, <iSy>, <iSym>, <fEcc>, <bInside>, <fScale>}, <tRot>, <xNil>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following parameters:
--		<iNx>: the number of "horizontal" equipotential lines per charge, not taking into account iXmin.
--		<iNy>: the number of "vertical" flow lines per charge.
--		<iXmin>: size of the empty hole for each charge, measured in "horizontal" lines.
--		<iSx>: the number of extra items spaced between "horizontal" lines.
--		<iSy>: the number of extra items spaced between "vertical" lines.
--		<iSym>: number of charges arranged around the origin.
--		<fEcc>: the eccentricity of the shape, i.e. the amount the shape diverges from a circle.
--		<bInside>: are the curved lines inside or outside of the reference circle?
--		<fScale>: scale the whole shape by this amount in all directions.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<xNil>: this should always remain "nil".
--  Notes:
--	1. Not sure if <fEcc> has the same meaning as the eccentricity of an ellipse.
--------------------------------------------------------------------------------

function flokalAdd(tPos, tRes, tPar, tRot, xNil)
	local iNx = tPar[1];
	local iNy = tPar[2];
	local iXmin = tPar[3];
	local iSx = tPar[4];
	local iSy = tPar[5];
	local iSym = tPar[6];
	local fEcc = tPar[7];
	local bInside = tPar[8];
	local fScale = tPar[9];
	local pow = function(fA, fB)
		return fA^fB
	end
	local dist = function(fX1, fY1, fX2, fY2)
		return sqrt(%pow(fX2 - fX1, 2) + %pow(fY2 - fY1, 2))
	end
	local mag = function(fX, fY)
		return %dist(fX, fY, 0, 0)
	end
	local norm = function()
		local fY1 = 0;
		local fX1 = 0;
		local fX2 = exp(fX1) * cos(deg(fY1));
		local fY2 = exp(fX1) * sin(deg(fY1)) + %fEcc;
		local fD = 0;
		if (%bInside == 1) then
			fD = %pow(%mag(fX2, fY2),  1/%iSym);
		else
			fD = %pow(%mag(fX2, fY2), -1/%iSym);
		end
		local fArg = rad(atan2(fX2, fY2)) * -1/%iSym;
		local fX3 = fD * cos(deg(fArg))/TWO_PI;
		local fY3 = fD * sin(deg(fArg))/TWO_PI;
		return %mag(fX3, fY3)
	end

	-- calculate the distance from the origin to the center of each eye, then use it to normalize the shape to within 1 unit of the center
	local fNorm = norm();

	local fn = function(fX, fY)
		local aP = {};
		local fX1 = exp(fX) * cos(deg(fY));
		local fY1 = exp(fX) * sin(deg(fY)) + %fEcc;
		local fD = 0;
		if (%bInside == 1) then
			fD = %pow(%mag(fX1, fY1),  1/%iSym);
		else
			fD = %pow(%mag(fX1, fY1), -1/%iSym);
		end
		local fArg = rad(atan2(fX1, fY1)) * -1/%iSym;
		for i = 0, %iSym - 1 do
			local fX2 = fD * cos(deg(fArg + i * TWO_PI/%iSym))/TWO_PI;
			local fY2 = fD * sin(deg(fArg + i * TWO_PI/%iSym))/TWO_PI;
			aP[i + 1] = {fX2, fY2};
		end
		return aP
	end
	local lines = function(aP1, aP2)
		for i = 0, %iSym - 1 do
			local fX1 = aP1[i + 1][0 + 1];
			local fY1 = aP1[i + 1][1 + 1];
			local fX2 = aP2[i + 1][0 + 1];
			local fY2 = aP2[i + 1][1 + 1];
			local tCoo = {fX1 * %fScale/%fNorm, 0, fY1 * %fScale/%fNorm,}
			appendShape(%tPos, 1, %tRes, 0, tCoo, %tRot)
		end
	end

	-- for each vertical flowline
	for i = 0, iNy - 1 do
		local fY = i * TWO_PI/iNy;
		for j = iXmin * iSx, iNx * iSx - 1 do
			-- make sure we don't have overlapping objects
			if (mod(j, iSx) > 0) then
				local fX1 = j * TWO_PI/iNx/iSx;
				local fX2 = (j + 1) * TWO_PI/iNx/iSx;
				lines(fn(fX1, fY), fn(fX2, fY))
			end
		end
	end
	-- for each horizontal equipotential line
	for i = iXmin, iNx do
		local fX = i * TWO_PI/iNx;
		for j = 0, iNy * iSy - 1 do
			local fY1 = j * TWO_PI/iNy/iSy;
			local fY2 = (j + 1) * TWO_PI/iNy/iSy;
			lines(fn(fX, fY1), fn(fX, fY2))
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		ringAdd
--  Description:	Creates an elliptical ring centered on one focus.
--  Syntax:		ringAdd(<tPos>, <tDst>, {<fAx1>, <fAx2>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following six parameters:
--		<fAx1>: the length of axis 1.
--		<fAx2>: the length of axis 2.
--		<fThk>: the distance from the outer radius to the inner radius (varies according to <iMod>).
--		<fHgh>: the height of the ring, relative to the plane.
--		<tArc>: a table containing the beginning and ending degrees of the arc.
--		<iMod>: if 0, then non-random mode. If 1, then random mode w/ gradual width. If 2, then random mode w/ even width.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Should maybe add an option to center the shape on the origin instead of only the foci.
--------------------------------------------------------------------------------

function ringAdd(tPos, tDst, tPar, tRot, tSeed)
	local fAx1, fAx2, fThk, fHgh, tArc, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6]
	local fFoc = sqrt(abs(fAx1^2 - fAx2^2))
	local tCoo, minArc, maxArc = {}, tArc[1], tArc[2]
	for i, tTab in tDst do
		local u, w, h, arc, iNum = 0, 0, 0, 0, tTab[1]
		for j = 1, iNum do
			if (iMod == 2) then
				u = srandom3(tSeed, minArc, maxArc)
				tCoo =
				{
					cos(u) * fAx2 - srandom3(tSeed, fThk),
					random3(fHgh) - fHgh/2,
					sin(u) * fAx1 - srandom3(tSeed, fThk),
				}
			elseif (iMod == 1) then
				u = srandom3(tSeed, minArc, maxArc)
				tCoo =
				{
					cos(u) * (fAx2 - srandom3(tSeed, fThk)),
					srandom3(tSeed, fHgh) - fHgh/2,
					sin(u) * sqrt((fAx2 - srandom3(tSeed, fThk))^2 - fAx2^2 + fAx1^2),
				}
			elseif (iMod == 0) then
				u = minArc + arc
				tCoo =
				{
					cos(u) * (fAx2 + fThk/-2 + w),
					fHgh/-2 + h,
					sin(u) * (fAx1 + fThk/-2 + w),
				}
				arc, w, h = arc + (maxArc - minArc)/iNum, w + fThk/iNum, h + fHgh/iNum
			end
			tCoo = vaddV(tCoo, {0,0,fFoc,})
			appendShape(tPos, i, tTab, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		globeAdd
--  Description:	Creates a series of rings in the shape of a sphere, like the latitudinal and longitudinal lines of a globe.
--  Syntax:		globeAdd(<tPos>, <tDst>, {<fRad>, <iLat>, <iLon>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <xNil>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tPar>: a table containing the following seven parameters:
--		<fRad>: the radius of the sphere.
--		<iLat>: the number of latitudinal rings.
--		<iLon>: the number of longitudinal rings.
--		<fThk>: see the description for the "ringAdd" function.
--		<fHgh>: see the description for the "ringAdd" function.
--		<tArc>: see the description for the "ringAdd" function.
--		<iMod>: see the description for the "ringAdd" function.
--	<xNil>: this argument is ignored and is used only to adhere to the API.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--  	1. Beware that objects may overlap where the longitudinal rings intersect at the poles.
--	2. Need to get <tRot> working for this function.
--------------------------------------------------------------------------------

function globeAdd(tPos, tDst, tPar, xNil, tSeed)
	local lat, lon, u, X, Y = 0, 0, 0, 0, 0
	local fRad, iLat, iLon, fThk, fHgh, tArc, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6], tPar[7]
	for i = 1, iLat do
		lat = lat + 360/(iLat * 2 + 2)
		u = lat
		X, Y = cos(u) * fRad, sin(u) * fRad
		-- ringAdd(<tPos>, <tDst>, {<fAx1>, <fAx2>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <tRot>, <tSeed>)
		ringAdd(vaddV(tPos, {0, X, 0,}), tDst, {Y, Y, fThk, fHgh, tArc, iMod,}, {0, 0, 0,}, tSeed)
	end
	for i = 1, iLon do
		lon = lon + 360/iLon
		-- ringAdd(<tPos>, <tDst>, {<fAx1>, <fAx2>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <tRot>, <tSeed>)
		ringAdd(tPos, tDst, {fRad, fRad, fThk, fHgh, tArc, iMod,}, {0, lon, 90,}, tSeed)
	end
end


--------------------------------------------------------------------------------
--  Name:		shapeAdd
--  Description:	Creates one of several available shapes.
--  Syntax:		shapeAdd(<tPos>, <tDst>, {<sLay>, ...}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing up to several parameters: <sLay> and <fA>, <fB>, ..., etc.
--		<sLay>: the type of shape to generate.
--		If <sLay> is "Cylinder", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Cone", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Ellipsoid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Cuboid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Toroid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the width of the tube, <fD> equals the thickness, and <fE> equals the height of the tube.
--		If <sLay> is "Helicoid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, and <fD> equals the width (thickness is not supported), <fE> is the number of revolutions.
--		If <sLay> is "Paraboloid", then <fA> equals the length of axis 1 at a height of 1000 units, <fB> equals the length of axis 2 at a height of 1000 units, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Hyperboloid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Astroid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Funnel", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals roughly the inverse of the length of axis 3 for large numbers of objects, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Dini", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the distance between each twist, <fD> is zero, and <fE> is the number of twists.
--		If <sLay> is "Corkscrew", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the height of the screw, <fD> is zero, and <fE> is zero.
--		If <sLay> is "Seashell", then <fA> equals the length of axis 1 of the tube, <fB> equals the length of axis 2 of the tube, <fC> equals the vertical separation between revolutions, <fD> equals the radius of the center gap, and <fE> equals the number of revolutions.
--		If <sLay> is "SineDisc", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the maximum height of the wave, <fD> zero, and <fE> equals the frequency of the wave pattern.
--		If <sLay> is "SinePlane", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the maximum height of the wave, <fD> zero, and <fE> equals the frequency of the wave pattern.
--		If <sLay> is "Moebius", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals half the width of the strip, <fD> is zero, and <fE> is zero.
--		If <sLay> is "Klein", then <fA> equals the scaling along the x-axis, <fB> equals the scaling along the z-axis, <fC> equals the scaling along the y-axis, <fD> is zero, and <fE> is zero.
--		If <sLay> is "Klein8", then <fA> equals the scaling along the x-axis, <fB> equals the scaling along the z-axis, <fC> equals the scaling along the y-axis, <fD> is zero, and <fE> is the radius of the circle before scaling.
--		If <sLay> is "Boy", then <fA> equals the scaling along the x-axis, <fB> equals the scaling along the z-axis, <fC> equals the scaling along the y-axis.
--		If <sLay> is "Rectangle", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, and <fD> equals the thickness.
--		If <sLay> is "Ellipse", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, and <fD> equals the thickness.
--		If <sLay> is "Triangle", [...to do.]
--		If <sLay> is "Parabola", then <fA> equals the distance between the vertex and the focus, <fB> equals the length, <fC> equals the height, and <fD> equals the thickness.
--		If <sLay> is "Hyperbola", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the distance from the origin to one of the foci, <fD> equals the thickness.
--		If <sLay> is "Catenary", [...to do.]
--		If <sLay> is "Hypotrochoid", then <fA> equals the radius of the greater circle, <fB> equals the radius of the lesser circle, <fC> equals the radius of the sphere sweep, <fD> equals the distance from the center of the lesser circle, and <fE> equals the number of revolutions.
--		If <sLay> is "Epitrochoid", then <fA> equals the radius of the greater circle, <fB> equals the radius of the lesser circle, <fC> equals the radius of the sphere sweep, <fD> equals the distance from the center of the lesser circle, and <fE> equals the number of revolutions.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Should be able to plot non-random points as well as random ones. Lots of extra work though.
--------------------------------------------------------------------------------

function shapeAdd(tPos, tDst, tPar, tRot, tSeed)
	local sLay = tPar[1]
	for i, tTab in tDst do
		for j = 1, tTab[1] do
			local tCoo = {}
			if (sLay == "Cuboid") then
				tCoo = makeCuboid(tPar, tSeed)
			elseif (sLay == "Ellipsoid") then
				tCoo = makeEllipsoid(tPar, tSeed)
			elseif (sLay == "Cylinder") then
				tCoo = makeCylinder(tPar, tSeed)
			elseif (sLay == "Cone") then
				tCoo = makeCone(tPar, tSeed)
			elseif (sLay == "Toroid") then
				tCoo = makeToroid(tPar, tSeed)
			elseif (sLay == "Helicoid") then
				tCoo = makeHelicoid(tPar, tSeed)
			elseif (sLay == "Paraboloid") then
				tCoo = makeParaboloid(tPar, tSeed)
			elseif (sLay == "Hyperboloid") then
				tCoo = makeHyperboloid(tPar, tSeed)
			elseif (sLay == "Astroid") then
				tCoo = makeAstroid(tPar, tSeed)
			elseif (sLay == "Funnel") then
				tCoo = makeFunnel(tPar, tSeed)
			elseif (sLay == "Dini") then
				tCoo = makeDini(tPar, tSeed)
			elseif (sLay == "Corkscrew") then
				tCoo = makeCorkscrew(tPar, tSeed)
			elseif (sLay == "Seashell") then
				tCoo = makeSeashell(tPar, tSeed)
			elseif (sLay == "SineDisc") then
				tCoo = makeSineDisc(tPar, tSeed)
			elseif (sLay == "SinePlane") then
				tCoo = makeSinePlane(tPar, tSeed)
			elseif (sLay == "Moebius") then
				tCoo = makeMoebius(tPar, tSeed)
			elseif (sLay == "Klein") then
				tCoo = makeKlein(tPar, tSeed)
			elseif (sLay == "Klein8") then
				tCoo = makeKlein8(tPar, tSeed)
			elseif (sLay == "Kuen") then
				tCoo = makeKuen(tPar, tSeed)
			elseif (sLay == "Boy") then
				tCoo = makeBoy(tPar, tSeed)
			elseif (sLay == "Rectangle") then
				tCoo = makeRectangle(tPar, tSeed)
			elseif (sLay == "Ellipse") then
				tCoo = makeEllipse(tPar, tSeed)
			--elseif (sLay == "Triangle") then
				-- to do
			elseif (sLay == "Parabola") then
				tCoo = makeParabola(tPar, tSeed)
			elseif (sLay == "Hyperbola") then
				tCoo = makeHyperbola(tPar, tSeed)
			--elseif (sLay == "Catenary") then
				-- to do
			elseif (sLay == "Hypotrochoid") then
				tCoo = makeHypotrochoid(tPar, tSeed)
			elseif (sLay == "Epitrochoid") then
				tCoo = makeEpitrochoid(tPar, tSeed)
			else
				print("function shapeAdd: shape not recognized")
			end
			appendShape(tPos, i, tTab, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		harmonographAdd
--  Description:	Creates a squiggly curving tube. The shape is similar to that produced by a harmonograph, except in three dimensions.
--			See for more info: http://en.wikipedia.org/wiki/Harmonograph
--  Syntax:		harmonographAdd(<tPos>, <tDst>, {{<fA>, <fF>, <fP>, <fD>}, <tGrp2>, <tGrp3>, <tGrp4>, <tGrp5>, <tGrp6>, <fTim>, <fRad>, <fThk>, <tScale>, <iMod>}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following seven parameters:
--		<tGrp1>: a table containing the following four parameters:
--			<fA>: amplitude.
--			<fF>: frequency (degrees).
--			<fP>: phase (degrees).
--			<fD>: damping.
--		<fGrp2>: ditto.
--		<fGrp3>: ditto.
--		<fGrp4>: ditto.
--		<fGrp5>: ditto.
--		<tGrp6>: ditto.
--		<fTim>: the time parameter.
--		<fRad>: the radius of the curving tube.
--		<fThk>: the thickness of the tube as a percentage of the radius.
--		<tScale>: scale the entire shape by this much.
--		<iMod>: 0 = non-random, 1 = random.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<tSeed>: the seed for the random number functions.
--------------------------------------------------------------------------------

function harmonographAdd(tPos, tDst, tPar, tRot, tSeed)
	local grp1, grp2, grp3, grp4, grp5, grp6 = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6]
	local fTime, fRadius, fThick, tScale, iMod = rad(tPar[7]), tPar[8], tPar[9]/100, tPar[10], tPar[11]
	local A1, F1, P1, D1 = grp1[1], grp1[2], grp1[3], grp1[4]
	local A2, F2, P2, D2 = grp2[1], grp2[2], grp2[3], grp2[4]
	local A3, F3, P3, D3 = grp3[1], grp3[2], grp3[3], grp3[4]
	local A4, F4, P4, D4 = grp4[1], grp4[2], grp4[3], grp4[4]
	local A5, F5, P5, D5 = grp5[1], grp5[2], grp5[3], grp5[4]
	local A6, F6, P6, D6 = grp6[1], grp6[2], grp6[3], grp6[4]
	print
	(
		"\n{A1 = " .. A1 .. ",\tF1 = " .. F1 .. ",\tP1 = " .. P1 .. ",\tD1 = " .. D1 .. "}," ..
		"\n{A2 = " .. A2 .. ",\tF2 = " .. F2 .. ",\tP2 = " .. P2 .. ",\tD2 = " .. D2 .. "}," ..
		"\n{A3 = " .. A3 .. ",\tF3 = " .. F3 .. ",\tP3 = " .. P3 .. ",\tD3 = " .. D3 .. "}," ..
		"\n{A4 = " .. A4 .. ",\tF4 = " .. F4 .. ",\tP4 = " .. P4 .. ",\tD4 = " .. D4 .. "}," ..
		"\n{A5 = " .. A5 .. ",\tF5 = " .. F5 .. ",\tP5 = " .. P5 .. ",\tD5 = " .. D5 .. "}," ..
		"\n{A6 = " .. A6 .. ",\tF6 = " .. F6 .. ",\tP6 = " .. P6 .. ",\tD6 = " .. D6 .. "},"
	)
	for i, tTab in tDst do
		local jNum = tTab[1]
		local t, u, r = 0, 0, 0
		local tReg, uReg = 0, 0
		local tDif, uDif = fTime/jNum, 360/jNum
		for j = 1, jNum do
			if (iMod == 1) then
				t, u = srandomSet(tSeed,fTime,360)
				r = fRadius * fThick * sqrt(srandom(tSeed)) + fRadius * (1 - fThick)
			else
				t, u, r = tReg, uReg, fRadius
			end
			local tCirc =
			{
				r * cos(u),
				r * sin(u),
				0,
			}
			local tCoo = 
			{
				A1 * sin(deg(t) * F1 + P1) * exp(-D1 * t) + A2 * sin(deg(t) * F2 + P2) * exp(-D2 * t),
				A3 * sin(deg(t) * F3 + P3) * exp(-D3 * t) + A4 * sin(deg(t) * F4 + P4) * exp(-D4 * t),
				A5 * sin(deg(t) * F5 + P5) * exp(-D5 * t) + A6 * sin(deg(t) * F6 + P6) * exp(-D6 * t),
			}
			tCoo = vmultiplyV(tCoo, tScale)
			local tDerivatives =
			{
				A1 * -D1 * exp(-D1 * t) * sin(deg(t) * F1 + P1) + A1 * F1 * exp(-D1 * t) * cos(deg(t) * F1 + P1)	+ A2 * -D2 * exp(-D2 * t) * sin(deg(t) * F2 + P2) + A2 * F2 * exp(-D2 * t) * cos(deg(t) * F2 + P2),
				A3 * -D3 * exp(-D3 * t) * sin(deg(t) * F3 + P3) + A3 * F3 * exp(-D3 * t) * cos(deg(t) * F3 + P3)	+ A4 * -D4 * exp(-D4 * t) * sin(deg(t) * F4 + P4) + A4 * F4 * exp(-D4 * t) * cos(deg(t) * F4 + P4),
				A5 * -D5 * exp(-D5 * t) * sin(deg(t) * F5 + P5) + A5 * F5 * exp(-D5 * t) * cos(deg(t) * F5 + P5)	+ A6 * -D6 * exp(-D6 * t) * sin(deg(t) * F6 + P6) + A6 * F6 * exp(-D6 * t) * cos(deg(t) * F6 + P6),
			}
			tDerivatives = vmultiplyV(tDerivatives, tScale)
			local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
			tCoo = vaddV(tCoo, tNormedPos)
			tReg = tReg + tDif
			uReg = uReg + uDif
			appendShape(tPos, i, tTab, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		heightmapAdd
--  Description:	Creates a matrix of dots based on heightmap data.
--  Syntax:		heightmapAdd(<tPos>, <tRes>, {<tData>, <tScale>}, <tRot>, <xNil>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following five parameters:
--		<tData>: the heightmap data in the form of a two-dimensional array.
--		<tScale>: the amount to scale the heightmap in the X, Y and Z directions.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<xNil>: this should always remain "nil". It is ignored and used only to adhere to the API.
--  Notes:
--	1. I used the included "pgm_to_array_converter.html" tool to convert 
--	   from PGM to a Lua table. PGM images can be read and written using 
--	   the Windows freeware program XnView. Make sure to set the output to 
--	   ASCII in the XnView options.
--------------------------------------------------------------------------------

function heightmapAdd(tPos, tRes, tPar, tRot, xNil)
	local tData, tScale = tPar[1], tPar[2]
	local iLen = getn(tData)
	for i, iCount in tData do
		local jLen = getn(iCount)
		for j, jCount in iCount do
			local tCoo = {i - iLen/2, jCount, j - jLen/2}
			tCoo = vmultiplyV(tCoo, tScale)
			appendShape(tPos, i, tRes, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		strangeAdd
--  Description:	Creates a strange attractor, such as the Clifford or Lorenz attractors.
--			See for more info: http://www.aidansamuel.com/strange.php
--  Syntax:		strangeAdd(<tPos>, <tDst>, {<fA>, <fB>, <fC>, <fD>, <fScale>}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following five parameters:
--		<fA>: an arbitrary constant that partially determines the end result.
--		<fB>: ditto.
--		<fC>: ditto.
--		<fD>: ditto.
--		<fScale>: the rough size or scale of the curve.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Would like the function to generate spirals with three or five arms instead of always just four.
--------------------------------------------------------------------------------

function strangeAdd(tPos, tDst, tPar, tRot, tSeed)
	local a, b, c, d, scale = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5]
	print("{" .. a .. "," .. b .. "," .. c .. "," .. d .. "," .. scale .. ",}")
	local minBox = {0,0,0,}
	local maxBox = {0,0,0,}
	-- determine the bounding box so that you can then center the shape on the origin
	for i, tTab in tDst do
		local x, y, z = 0, 0, 0
		for j = 1, tTab[1] do
			local ptX = sin(deg(a * y)) - z * cos(deg(b * x))
			local ptY = z * sin(deg(c * x)) - cos(deg(d * y))
			local ptZ = sin(deg(x))
			if (i == 1) and (j == 1) then
				minBox = {ptX,ptY,ptZ,}
				maxBox = {ptX,ptY,ptZ,}
			else
				minBox = {min(minBox[1], ptX), min(minBox[2], ptY), min(minBox[3], ptZ),}
				maxBox = {max(maxBox[1], ptX), max(maxBox[2], ptY), max(maxBox[3], ptZ),}
			end
			x = ptX
			y = ptY
			z = ptZ
		end
	end
	local midBox = {(minBox[1] + maxBox[1])/2, (minBox[2] + maxBox[2])/2, (minBox[3] + maxBox[3])/2,}
	--print("minBox = " .. vstr(vmultiply(minBox, scale)))
	--print("maxBox = " .. vstr(vmultiply(maxBox, scale)))
	print("midBox = " .. vstr(vmultiply(midBox, scale)))
	for i, tTab in tDst do
		local x, y, z = 0, 0, 0
		for j = 1, tTab[1] do
			local ptX = sin(deg(a * y)) - z * cos(deg(b * x))
			local ptY = z * sin(deg(c * x)) - cos(deg(d * y))
			local ptZ = sin(deg(x))
			local tCoo = 
			{
				(ptX - midBox[1]) * scale,
				(ptY - midBox[2]) * scale,
				(ptZ - midBox[3]) * scale,
			}
			--print("tCoo = " .. vstr(tCoo))
			appendShape(tPos, i, tTab, j, tCoo, tRot)
			x = ptX
			y = ptY
			z = ptZ
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		spiralAdd
--  Description:	Creates a spiral.
--  Syntax:		spiralAdd(<tPos>, <tDst>, {<sLay>, <fRad>, <iArm>, <fRot>, <fAng>, <fHgh>, <fWid>, <fThk>, <tTim>, <iMod>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following ten parameters:
--		<sLay>: may be either "Nautilus" or "Archimedes".
--		<fRad>: depending on <fAng>, this is either the minimum or maximum radius of the spiral.
--		<iArm>: the number of arms the spiral will have.
--		<fRot>: the number of times the spiral will rotate around the origin.
--		<fAng>: the angle (degrees) of deviation (90' and 270' make a circle).
--		<fHgh>: the height of the spiral above the plane.
--		<fWid>: the width of the spiral arms.
--		<fThk>: the thickness of the spiral arms.
--		<tTim>: a table containing the minimum and maximum values for "t" (time) at which the curve is sampled. (must be a float between 0 and 1)
--		<iMod>: 0 is non-random, 1 is random, 2 is random-mode with tapering width.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Would be nice to also have tubular cross-sections instead of only rectangular.
--------------------------------------------------------------------------------

function spiralAdd(tPos, tDst, tPar, tRot, tSeed)
	local sLay, nRad, nArm, nRot, nAng, nHgh, nWid, nThk, tTim, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6], tPar[7], tPar[8], tPar[9], tPar[10]
	local minTim, maxTim, v, t, s, l, w, h = tTim[1], tTim[2], 360 * nRot, 0, 0, 0, 0, 0
	local rotArm = 0
	local divArm = (360/nArm)
	for k = 1, nArm do
		for i, tTab in tDst do
			local t_X, l_X, w_X, h_X = minTim, nWid/-2, nWid/-2, nThk/-2
			local iNum = tTab[1]
			for j = 1, iNum do
				local tCoo = {}
				if (iMod == 1) then
					v, t = v, srandom3(tSeed, minTim, maxTim)
					s = t
					if (sLay == "Archimedes") then
					--	s = 1 - t
					end
					l, w, h = srandom3(tSeed, nWid) - nWid/2, srandom3(tSeed, nWid) - nWid/2, srandom3(tSeed, nThk) - nThk/2
				elseif (iMod == 2) then
					v, t = v, srandom3(tSeed, minTim, maxTim)
					s = t
					if (sLay == "Archimedes") then
					--	s = 1 - t
					end
					l, w, h = srandom3(tSeed, 0, nWid * s), srandom3(tSeed, 0, nWid * s), srandom3(tSeed, nThk) - nThk/2
				elseif (iMod == 0) then
					v, t = v, t_X
					l, w, h = l_X, w_X, h_X
					t_X = t_X + (maxTim - minTim)/iNum
					l_X, w_X, h_X = l_X + nWid/iNum, w_X + nWid/iNum, h_X + nThk/iNum
				end
				if (sLay == "Nautilus") then
					tCoo =
					{
						exp(rad(v * t)/tan(nAng)) * cos(v * t) * nRad + l,
						h - nHgh * t + nHgh/2,
						exp(rad(v * t)/tan(nAng)) * sin(v * t) * nRad + w,
					}
				elseif (sLay == "Archimedes") then
					tCoo =
					{
						cos(v * t) * t * nRad + l,
						h + nHgh * t - nHgh/2,
						sin(v * t) * t * nRad + w,
					}
				end
				appendShape(tPos, i, tTab, j, vrotate(tCoo, {0,rotArm,0,}), tRot)
			end
		end
		rotArm = rotArm + divArm
	end
end


--------------------------------------------------------------------------------
--  Name:		stitchAdd
--  Description:	Generates a triangle made of crosshatched line segments, like in the art of curvestitching.
--  Syntax:		stitchAdd(<tPos>, <tRes>, {<tPtA>, <tPtB>, <tPtC>, <iNum>, <bAll>, <bCorners>}, <tRot>, <xNil>)
--  Inputs:
--	<tPos>: the center of the shape.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following parameters:
--		<tPtA>: a table containing the X, Y and Z coordinates of a point on the triangle.
--		<tPtB>: a table containing the X, Y and Z coordinates of a point on the triangle.
--		<tPtC>: a table containing the X, Y and Z coordinates of the center point on the triangle.
--		<iNum>: the number of line segments to generate.
--		<bAll>: turn this off to generate only the points on the spline defined by the line segments.
--		<bCorners>: enables/disables generation of points at the corners of the triangle to prevent duplicate overlapping asteroids.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<xNil>: this should always remain "nil". It is ignored and used only to adhere to the API.
--  Notes:
--	1. Not sure I completely fixed the overlapping objects at the cornes and edges.
--------------------------------------------------------------------------------

function stitchAdd(tPos, tRes, tPar, tRot, xNil)
	local Point_A, Point_B, Point_C = tPar[1], tPar[2], tPar[3]
	local n, All, Corners = tPar[4], tPar[5], tPar[6]
	local iCount = 0
	if (All == 1) then
		local Start = 1
		local End = n - 1
		if (Corners == 1) then
			Start = 0
			End = n
		end
		for i = Start, End do
			for j = Corners and 0 or 1, Corners and n or n - 1 do
				local tCoo =
				{
					i * j/n^2 * Point_A[1] + (n - i) * (n - j)/n^2 * Point_C[1] + (i * (n - j) + j * (n - i))/n^2 * Point_B[1],
					i * j/n^2 * Point_A[2] + (n - i) * (n - j)/n^2 * Point_C[2] + (i * (n - j) + j * (n - i))/n^2 * Point_B[2],
					i * j/n^2 * Point_A[3] + (n - i) * (n - j)/n^2 * Point_C[3] + (i * (n - j) + j * (n - i))/n^2 * Point_B[3],
				}
				iCount = iCount + 1
				appendShape(tPos, 1, tRes, iCount, tCoo, tRot)
			end
		end
	else
		local Start = 1/n
		local End = (1 - 1/n)
		if (Corners == 1) then
			Start = 0
			End = 1
		end
		for i = Start, End, 1/n do
			local tCoo =
			{
				(1 - i)^2 * Point_A[1] + 2 * (1 - i) * i * Point_C[1] + i^2 * Point_B[1],
				(1 - i)^2 * Point_A[2] + 2 * (1 - i) * i * Point_C[2] + i^2 * Point_B[2],
				(1 - i)^2 * Point_A[3] + 2 * (1 - i) * i * Point_C[3] + i^2 * Point_B[3],
			}
			iCount = iCount + 1
			appendShape(tPos, 1, tRes, iCount, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		literalAdd
--  Description:	Adds the contents of a distribution table to the map without changing any values.
--  Syntax:		literalAdd(<tDst>)
--  Arguments:
--	<tDst>: the distribution table used to populate the shape.
--------------------------------------------------------------------------------

function literalAdd(tDst)
	for i, tTab in tDst do
		for j = 1, tTab[1] do
			appendShape({0, 0, 0,}, i, tTab, j, {0, 0, 0,}, {0, 0, 0,})
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		easyPatch
--  Description:	Creates a resource patch with minimal effort.
--  Syntax:		easyPatch(<tPos>, <fRUs>, <tSeed>)
--  Arguments:
--	<tPos>: the shape's center coordinates.
--	<fRUs>: the percent of the default RU to retain.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Need to consider once again whether <fRUs> and <tSeed> should be optional.
--------------------------------------------------------------------------------

function easyPatch(tPos, fRUs, tSeed)
	if not (fRUs) then
		fRUs = 100
	end
	if not (tSeed) then
		tSeed = {seed = 977322}
	end
	local tCoo = {}
	-- asteroid_type = {amount, inner radius, outer radius,}
	local easyPatchDist = {Asteroid_4 = {1, 0, 0,}, Asteroid_3 = {4, 400, 800,}, Asteroid_2 = {5, 800, 1600,},}
	for k, tTab in easyPatchDist do
		for j = 1, tTab[1] do
			local r = srandom3(tSeed, tTab[2], tTab[3])
			local v, u = srandomSet(tSeed, 180,360)
			tCoo =
			{
				tPos[1] + sqrt(r^2 - (r * cos(v))^2) * cos(u),
				tPos[2] + r * cos(v),
				tPos[3] + sqrt(r^2 - (r * cos(v))^2) * sin(u),
			}
			addAsteroid(k, tCoo, fRUs, 0, 0, 0, 0)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		randomMusic
--  Description:	Randomly selects the level music.
--  Syntax:		randomMusic(<tSeed>, <iMod>, <tTab>, <sDir>)
--  Arguments:
--	<tSeed>: the seed for the random number functions.
--	<iMod>: may be 0, 1, 2, 3, 4 or 5.
--	If <iMod> is 0, then this function is disabled.
--	If <iMod> is 1, then the level music is selected from only the ambient tracks.
--	If <iMod> is 2, then the level music is selected from only the battle tracks.
--	If <iMod> is 3, then the level music is selected from both the ambient and battle tracks.
--	If <iMod> is 4, then the level music is selected from only <tTab>.
--	If <iMod> is 5, then the level music is selected from all of the above.
--	<tTab>: (optional) a table containing the names of the custom audio tracks. (table)
--	<sDir>: (optional) the directory where the extra files can be found. Must have a trailing slash. (string)
--  Notes:
--	1. This function must be called from within the "NonDetermChunk" 
--	   portion of a ".level" file.
--	2. Since it is a NonDetermChunk function, it does not need to be seeded 
--	   manually in order to avoid desyncs (I think).
--------------------------------------------------------------------------------

function randomMusic(tSeed, iMod, tTab, sDir)
	local iTot = 23
	local iLen = 0
	if (tTab) then
		iLen = getn(tTab)
		iTot = iTot + iLen
	end
	local ranNum, musDir, musTrk = 0, "", ""
	local musTab =
	{
		"amb_01", "amb_02", "amb_03", "amb_04", "amb_05", "amb_06", "amb_07", "amb_08", "amb_09", "amb_10", "amb_11", "amb_12", "amb_13", "amb_14",
		"battle_01", "battle_04", "battle_04_alt", "battle_06", "battle_keeper", "battle_movers", "battle_planetkillers", "battle_sajuuk", "bentus_arrival",
	}
	if ((iMod == 4) or (iMod == 5)) then
		for k = 1, iLen do
			musTab[k + 23] = tTab[k]
		end
	end
	if (iMod == 1) then
		ranNum = srandom(tSeed, 1, 14)
	elseif (iMod == 2) then
		ranNum = srandom(tSeed, 15, 23)
	elseif (iMod == 3) then
		ranNum = srandom(tSeed, 1, 23)
	elseif (iMod == 4) then
		ranNum = srandom(tSeed, 24, 23 + iLen)
	elseif (iMod == 5) then
		ranNum = srandom(tSeed, 1, 23 + iLen)
	end
	if (ranNum <= 14) then
		musDir = "data:sound\\music\\ambient\\"
	elseif (ranNum <= 23) then
		musDir = "data:sound\\music\\battle\\"
	elseif (ranNum <= (23 + iLen)) then
		musDir = sDir
	end
	if (iMod ~= 0) then
		setDefaultMusic(musDir .. musTab[ranNum])
		print("Level music: \"" .. musTab[ranNum] .. "\" (" .. ranNum .. "/" .. iTot .. ")")
	end
end


--------------------------------------------------------------------------------
--  Name:		randomBackground
--  Description:	Randomly selects the level background.
--  Syntax:		randomBackground(<tSeed>, <iMod>, <tTab>)
--  Arguments:
--	<tSeed>: the seed for the random number functions.
--	<iMod>: may be 0, 1, 2, 3, 4 or 5.
--	If <iMod> is 0, then this function has been disabled.
--	If <iMod> is 1, then the level background is selected from only the mission backgrounds.
--	If <iMod> is 2, then the level background is selected from only the other backgrounds.
--	If <iMod> is 3, then the level background is selected from both the mission and other backgrounds.
--	If <iMod> is 4, then the level background is selected from only <tTab>.
--	If <iMod> is 5, then the level background is selected from all of the above.
--	<tTab>: (optional) a table containing the names of the custom backgrounds.
--  Notes:
--	1. This function must be called from within the "NonDetermChunk" 
--	   portion of a ".level" file.
--	2. Since it is a NonDetermChunk function, it does not need to be seeded 
--         manually in order to avoid desyncs (I think).
--------------------------------------------------------------------------------

function randomBackground(tSeed, iMod, tTab)
	local iTot = 22
	local iLen = 0
	if (tTab) then
		iLen = getn(tTab)
		iTot = iTot + iLen
	end
	local ranNum = 0
	local backgroundTable =
	{
		"m01", "m02", "m03", "m04", "m05", "m06", "m07", "m08", "m09", "m10", "m11", "m12", "m13", "m14", "m15",
		"planet", "quick", "singlesun", "tanis", "taniswstars", "black", "white",
	}
	if ((iMod == 4) or (iMod == 5)) then
		for k = 1, iLen do
			backgroundTable[k + 22] = tTab[k]
		end
	end
	if (iMod == 1) then
		ranNum = srandom(tSeed, 1, 15)
	elseif (iMod == 2) then
		ranNum = srandom(tSeed, 16, 22)
	elseif (iMod == 3) then
		ranNum = srandom(tSeed, 1, 22)
	elseif (iMod == 4) then
		ranNum = srandom(tSeed, 23, 22 + iLen)
	elseif (iMod == 5) then
		ranNum = srandom(tSeed, 1, 23 + iLen)
	end
	if (iMod ~= 0) then
		loadBackground(backgroundTable[ranNum])
		print("Level background: \"" .. backgroundTable[ranNum] .. "\" (" .. ranNum .. "/" .. iTot .. ")")
	end
end


--------------------------------------------------------------------------------
-- Random number functions.
--

-- Randomly returns either 1 or -1.
function randomSign()
	if (random() > 0.5) then
		return 1
	else
		return -1
	end
end

-- Randomly returns either 1 or 0.
function randomBit()
	if (random() > 0.5) then
		return 1
	else
		return 0
	end
end

-- Works just like random(), but can accept zero as an argument.
function random2(fVal1, fVal2)
	if (fVal2) then
		if ((fVal2 - fVal1) == 0) then
			return fVal2
		else
			return random(fVal1, fVal2)
		end
	elseif (fVal1) then
		if (fVal1 == 0) then
			return 0
		else
			return random(fVal1)
		end
	else
		return random()
	end
end

-- Works just like random(), but can accept zero as an argument and always returns a float value, not an integer.
function random3(fVal1, fVal2)
	if (fVal2) then
		return fVal1 + random() * (fVal2 - fVal1)
	elseif (fVal1) then
		return random() * fVal1
	else
		return random()
	end
end

-- For each argument, returns a random float value between 0 and the argument.
function randomSet(...)
	local v = {}
	for i = 1, getn(arg) do
		v[i] = random3(arg[i])
	end
	if arg[5] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[4] then
		return v[1], v[2], v[3], v[4]
	elseif arg[3] then
		return v[1], v[2], v[3]
	elseif arg[2] then
		return v[1], v[2]
	elseif arg[1] then
		return v[1]
	end
end

-- For every two arguments, returns a random float value between the former argument and the latter argument.
function randomSet2(...)
	local v = {}
	for i = 2, getn(arg), 2 do
		v[i/2] = random3(arg[i-1], arg[i])
	end
	if arg[10] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[8] then
		return v[1], v[2], v[3], v[4]
	elseif arg[6] then
		return v[1], v[2], v[3]
	elseif arg[4] then
		return v[1], v[2]
	elseif arg[2] then
		return v[1]
	end
end

-- rough adaptation of Knuth float generator
-- Note: seedobj must be a table with a field named `seed`;
-- this field must be negative; after the first number has
-- been generated, the seedobj table will be populated with
-- additional state needed to generate numbers; changing its
-- `seed` field to a negative number will reinitialize the
-- generator and start a new pseudorandom sequence.
function srandom( seedobj, fVal1, fVal2 )
	local B =  4000000
	local ma = seedobj.ma
	local seed = seedobj.seed
	local mj, mk
	if seed < 0 or not ma then
		ma = {}
		seedobj.ma = ma
		mj = abs( 1618033 - abs( seed ) )
		mj = mod( mj, B )
		ma[55] = mj
		mk = 1
		for i = 1, 54 do
			local ii = mod( 21 * i,  55 )
			ma[ii] = mk
			mk = mj - mk
			if mk < 0 then
				mk = mk + B
			end
			mj = ma[ii]
		end
		for k = 1, 4 do
			for i = 1, 55 do
				ma[i] = ma[i] - ma[ 1 + mod( i + 30,  55) ]
				if ma[i] < 0 then
					ma[i] = ma[i] + B
				end
			end
		end
		seedobj.inext = 0
		seedobj.inextp = 31
		seedobj.seed = 1
	end -- if
	local inext = seedobj.inext
	local inextp = seedobj.inextp
	inext = inext + 1
	if inext == 56 then
		inext = 1
	end
	seedobj.inext = inext
	inextp = inextp + 1
	if inextp == 56 then
		inextp = 1
	end
	seedobj.inextp = inextp
	mj = ma[ inext ] - ma[ inextp ]
	if mj < 0 then
		mj = mj + B
	end
	ma[ inext ] = mj
	local temp_rand = mj / B
	if fVal2 then
		return floor( fVal1 + 0.5 + temp_rand * ( fVal2 - fVal1 ) )
	elseif fVal1 then
		return floor( temp_rand * fVal1 ) + 1
	else
		return temp_rand
	end
end


-- Randomly returns either 1 or -1. Seeded.
function srandomSign(seedobj)
	if (srandom(seedobj) > 0.5) then
		return 1
	else
		return -1
	end
end

-- Randomly returns either 1 or 0. Seeded.
function srandomBit(seedobj)
	if (srandom(seedobj) > 0.5) then
		return 1
	else
		return 0
	end
end

-- Works just like random(), but can accept zero as an argument. Seeded.
function srandom2(seedobj, fVal1, fVal2)
	if (fVal2) then
		if ((fVal2 - fVal1) == 0) then
			return fVal2
		else
			return srandom(seedobj, fVal1, fVal2)
		end
	elseif (fVal1) then
		if (fVal1 == 0) then
			return 0
		else
			return srandom(seedobj, fVal1)
		end
	else
		return srandom(seedobj)
	end
end

-- Works just like random(), but can accept zero as an argument and always returns a float value, not an integer. Seeded.
function srandom3(seedobj, fVal1, fVal2)
	if (fVal2) then
		return fVal1 + srandom(seedobj) * (fVal2 - fVal1)
	elseif (fVal1) then
		return srandom(seedobj) * fVal1
	else
		return srandom(seedobj)
	end
end

-- For each argument, returns a random float value between 0 and the argument. Seeded.
function srandomSet(seedobj, ...)
	local v = {}
	for i = 1, getn(arg) do
		v[i] = srandom3(seedobj, arg[i])
	end
	if arg[5] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[4] then
		return v[1], v[2], v[3], v[4]
	elseif arg[3] then
		return v[1], v[2], v[3]
	elseif arg[2] then
		return v[1], v[2]
	elseif arg[1] then
		return v[1]
	end
end

-- For every two arguments, returns a random float value between the former argument and the latter argument. Seeded.
function srandomSet2(seedobj, ...)
	local v = {}
	for i = 2, getn(arg), 2 do
		v[i/2] = srandom3(seedobj, arg[i-1], arg[i])
	end
	if arg[10] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[8] then
		return v[1], v[2], v[3], v[4]
	elseif arg[6] then
		return v[1], v[2], v[3]
	elseif arg[4] then
		return v[1], v[2]
	elseif arg[2] then
		return v[1]
	end
end

-- Returns a vector with random components.
function vrand(tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, random(tVecIn[i]))
	end
	return tVecOut
end

-- Returns a vector with random components. Seeded.
function svrand(seedobj, tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, srandom(seedobj, tVecIn[i]))
	end
	return tVecOut
end

-- Returns a vector with random components.
function vrand2(tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, random2(tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

-- Returns a vector with random components. Seeded.
function svrand2(seedobj, tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, srandom2(seedobj, tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

-- Returns a vector with random components.
function vrand3(tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, random3(tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

-- Returns a vector with random components. Seeded.
function svrand3(seedobj, tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, srandom3(seedobj, tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

--------------------------------------------------------------------------------
-- Some trigonometric functions.
--

-- Returns the hyperbolic cosine of an angle.
function cosh(fAng)
	return (exp(fAng) + exp(-fAng))/2
end


-- Returns the hyperbolic sine of an angle.
function sinh(fAng)
	return (exp(fAng) - exp(-fAng))/2
end


-- Returns the hyperbolic tangent of an angle.
function tanh(fAng)
	return (exp(fAng) - exp(-fAng))/(exp(fAng) + exp(-fAng))
end


-- Returns the hyperbolic cosecant of an angle.
function csch(fAng)
	return 1/sinh(fAng)
end


-- Returns the hyperbolic secant of an angle.
function sech(fAng)
	return 1/cosh(fAng)
end


-- Returns the hyperbolic cotangent of an angle.
function coth(fAng)
	return 1/tanh(fAng)
end


-- Returns the cosecant of an angle.
function csc(fAng)
	return 1/sin(fAng)
end


-- Returns the secant of an angle.
function sec(fAng)
	return 1/cos(fAng)
end


-- Returns the cotangent of an angle.
function cot(fAng)
	return 1/tan(fAng)
end


-- Returns the exsecant of an angle.
function exsec(fAng)
	return sec(fAng) - 1
end


-- Returns the coexsecant of an angle.
function coexsec(fAng)
	return csc(fAng) - 1
end


-- Returns the versesine of an angle.
function vers(fAng)
	return 1 - cos(fAng)
end


-- Returns the coversesine of an angle.
function covers(fAng)
	return 1 - sin(fAng)
end


-- Returns the half-versesine of an angle.
function hav(fAng)
	return vers(fAng)/2
end


--------------------------------------------------------------------------------
-- Some miscellaneous mathematical functions.
--

-- Rounds a number to the nearest integer.
function round(fVal)
	return floor(fVal + 0.5)
end

-- Some programming languages need this
function pow(fA, fB)
	return fA^fB
end


--------------------------------------------------------------------------------
-- Some vector functions.
--

-- Returns the normalized form of a vector.
function vnormalize(tVec)
	return vdivide(tVec, vlength(tVec))
end

-- Returns the length of a vector.
function vlength(tVec)
	return sqrt(vsum(vpower(tVec, 2)))
end

-- Returns the distance between two vectors.
function vdistance(tVec1, tVec2)
	return vlength(vsubtractV(tVec2, tVec1))
end

-- Returns the dot product of two vectors.
function vdot(tVec1, tVec2)
	return vsum(vmultiplyV(tVec1, tVec2))
end

-- Returns the angle between two vectors.
function vangle(tVec1, tVec2)
	return acos(vdot(vnormalize(tVec1), vnormalize(tVec2)))
end

-- Returns the cross product of two vectors as a new vector.
function vcross(tVec1, tVec2)
	return
	{
		tVec1[2] * tVec2[3] - tVec1[3] * tVec2[2],
		tVec1[3] * tVec2[1] - tVec1[1] * tVec2[3],
		tVec1[1] * tVec2[2] - tVec1[2] * tVec2[1],
	}
end

-- tests whether two vectors are equal
function veq(tVec1, tVec2)
	if (tVec1[1] == tVec2[1]) and (tVec1[2] == tVec2[2]) and (tVec1[3] == tVec2[3]) then
		return 1
	else
		return 0
	end
end

-- returns the midpoint of two points as a new point
function vmidpoint(tVec1, tVec2)
	return
	{
		(tVec1[1] + tVec2[1]) / 2,
		(tVec1[2] + tVec2[2]) / 2,
		(tVec1[3] + tVec2[3]) / 2,
	}
end

-- Adds an amount to each vector component, then returns the resulting vector.
function vadd(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tVec[i] + fVal
	end
	return tmpVec
end

-- Adds the components of the second vector to the components of the first vector, then returns the resulting vector.
function vaddV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i] + tTab
	end
	return tmpVec
end

-- Subtracts an amount from each vector component, then returns the resulting vector.
function vsubtract(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tVec[i] - fVal
	end
	return tmpVec
end

-- Subtracts the components of the second vector from the components of the first vector, then returns the resulting vector.
function vsubtractV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i] - tTab
	end
	return tmpVec
end

-- Multiplies each vector component by some amount, then returns the resulting vector.
function vmultiply(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tTab * fVal
	end
	return tmpVec
end

-- Multiplies the components of the first vector by the components of the second vector, then returns the resulting vector.
function vmultiplyV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i] * tTab
	end
	return tmpVec
end

-- Divides each vector component by some amount, then returns the resulting vector.
function vdivide(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tTab/fVal
	end
	return tmpVec
end

-- Divides the components of the first vector by the components of the second vector, then returns the resulting vector.
function vdivideV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i]/tTab
	end
	return tmpVec
end

-- Raises each vector component to the some power, then returns the new vector.
function vpower(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tTab^fVal
	end
	return tmpVec
end

-- Raises the components of the first vector to the power specified by the components the second vector, then returns the new vector.
function vpowerV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i]^tTab
	end
	return tmpVec
end

-- Returns the sum of all the vector's components.
function vsum(tVec1)
	local tmpVal = 0
	for i, tTab in tVec1 do
		tmpVal = tmpVal + tTab
	end
	return tmpVal
end

-- Returns a vector converted into a string.
function vstr(tVec)
	local tmpStr = "{"
	for i, tTab in tVec do
		tmpStr = tmpStr .. tTab .. ", "
	end
	tmpStr = tmpStr .. "}\n"
	return tmpStr
end

-- Rotates a vector around the origin by the specified Euler angles, then returns the resulting vector.
-- Rotates around the Z-axis first, followed by the X-axis and the Y-axis.
function vrotate(tVec, tAng)
	tVec =
	{
		tVec[1] * cos(tAng[3]) - tVec[2] * sin(tAng[3]),
		tVec[1] * sin(tAng[3]) + tVec[2] * cos(tAng[3]),
		tVec[3],
	}
	tVec =
	{
		tVec[1],
		tVec[2] * cos(tAng[1]) - tVec[3] * sin(tAng[1]),
		tVec[2] * sin(tAng[1]) + tVec[3] * cos(tAng[1]),
	}
	tVec =
	{
		tVec[1] * cos(tAng[2]) + tVec[3] * sin(tAng[2]),
		tVec[2],
		-1 * tVec[1] * sin(tAng[2]) + tVec[3] * cos(tAng[2]),
	}
	return tVec
end

-- Returns an array containing the vector's Euler angles, relative to the Z-axis.
-- To reproduce the original vector, rotate a point on the Z-axis by these angles.
function vanglesXY(tVec2)
	local fSgnX, fSgnY, tPrjB1 = 1, 1, vnormalize({tVec2[1], 0, tVec2[3],})
	if (tPrjB1[1] ~= 0) then
		fSgnX = tPrjB1[1]/abs(tPrjB1[1]) * -1
	end
	local fAngY = acos(tPrjB1[3]) * fSgnX
	local tPrjB2 = vnormalize(vrotate(tVec2, {0, fAngY, 0,}))
	if (tPrjB2[2] ~= 0) then
		fSgnY = tPrjB2[2]/abs(tPrjB2[2])
	end
	local fAngX = acos(tPrjB2[3]) * fSgnY
	return {fAngX * -1, fAngY * -1, 0,}
end

-- Rotates the first vector around the second vector by some amount, then returns the resulting vector.
function vaxis_rotate(tVec1, tVec2, fAngZ)
	local tAng = vanglesXY(tVec2)
	return vrotate(vrotate(vrotate(vrotate(tVec1, {0, tAng[2], 0,}), {tAng[1], 0, 0,}), {0, 0, fAngZ,}), vmultiply(tAng, -1))
end


--------------------------------------------------------------------------------
-- Some table manipulation functions.
--

--------------------------------------------------------------------------------
-- Returns the length of a table. Useful where the 'getn' function is normally unavailable.
if not getn then
	function getn(tTable)
		local nCount = 0
		for i, iCount in tTable do
			if i ~= "n" then
				nCount = nCount + 1
			end
		end
		return nCount
	end
end


--------------------------------------------------------------------------------
-- Inserts an item into a table. Useful where the 'tinsert' function is normally unavailable.
if not tinsert then
	function tinsert(tTable, Arg1, Arg2)
		if (Arg2) then
			local TempTable = {}
			for i = Arg1, getn(tTable) do
				TempTable[i + 1] = tTable[i]
			end
			for i = Arg1, getn(tTable) do
				tTable[i + 1] = TempTable[i + 1]
			end
			tTable[Arg1] = Arg2
		else
			tTable[getn(tTable) + 1] = Arg1
		end
	end
end


--------------------------------------------------------------------------------
-- Compares two tables and returns true if they're equal and false if they're not.
function tcomp(tTable1, tTable2)
	local same = 1
	if (getn(tTable1) ~= getn(tTable2)) then
		same = 0
	else
		for i, k in tTable1 do
			if (type(tTable1[i]) == "table") and (type(tTable2[i]) == "table") then
				same = tcomp(tTable1[i], tTable2[i])
				if (same == 0) then
					break
				end
			elseif (tTable1[i] ~= tTable2[i]) then
				same = 0
				break
			end
		end
	end
	return same
end


--------------------------------------------------------------------------------
-- Mathematical shape functions
--

function makeCuboid(tPar, tSeed)
	local t, p = srandom(tSeed), srandomSign(tSeed)
	local l, w, h, L, W, H = srandomSet2(tSeed, -tPar[2], tPar[2], -tPar[3], tPar[3], -tPar[4], tPar[4], tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	if (t < 1/3) then
		l = L * p
	elseif (t < 2/3) then
		w = W * p
	elseif (t <= 1) then
		h = H * p
	end
	return {l, h, w,}
end

function makeEllipsoid(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local u, v = srandomSet(tSeed, 180, 360)
	return {L * cos(v) * sin(u), H * sin(v) * sin(u), W * cos(u),}
end

function makeCylinder(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local u, v = srandomSet(tSeed, 180, 360)
	return {L * cos(v), h, W * sin(v),}
end

function makeCone(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {(1 - h/c) * L * cos(v)/2, h, (1 - h/c) * W * sin(v)/2,}
end

function makeToroid(tPar, tSeed)
	local H, M = srandomSet2(tSeed, tPar[4] - tPar[5], tPar[4], tPar[6] - tPar[5], tPar[6])
	local v, o = srandomSet(tSeed, 360, 360)
	return {(tPar[2] + M * cos(v)) * cos(o), H * sin(v), (tPar[3] + M * cos(v)) * sin(o),}
end

function makeHelicoid(tPar, tSeed)
	local L, W = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3])
	local t = srandom(tSeed)
	return {L * cos(t * tPar[6] * 360), tPar[4] * (2 * t - 1), W * sin(t * tPar[6] *  360),}
end

function makeParaboloid(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {L * sqrt(h/1000) * cos(v), h, W * sqrt(h/1000) * sin(v),}
end

function makeHyperboloid(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local t, v, p = srandom(tSeed), srandom3(tSeed, 360), srandomSign(tSeed)
	return {L * sqrt(1 + (t * p)^2) * cos(v), H * (t * p), W * sqrt(1 + (t * p)^2) * sin(v),}
end

function makeAstroid(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local v, o = srandomSet(tSeed, 360, 360)
	return {L * (cos(o) * cos(v))^3, H * (sin(v))^3, W * (sin(o) * cos(v))^3,}
end

function makeFunnel(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local t, v = srandom(tSeed), srandom3(tSeed, 360)
	return {L * t * cos(v), H * log(t)/10, W * t * sin(v),}
end

function makeDini(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local v, u = srandomSet(tSeed, 360, 180)
	return {L * (cos(tPar[6] * v) * sin(u/2)), H * (cos(u/2) + log(tan(u/4)) + rad(tPar[6] * v)/(2 * PI)), W * (sin(tPar[6] * v) * sin(u/2)),}
end

function makeCorkscrew(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local v, u = srandomSet(tSeed, 360, 180)
	return {L * cos(v) * cos(u), H * rad(v)/(2 * PI), W * sin(v) * cos(u),}
end

function makeSeashell(tPar, tSeed)
	local t, o = srandom(tSeed), srandom3(tSeed, 360)
	return
	{
		(tPar[5]/tPar[6] + (1 - t) * (1 + cos(o))) * tPar[2] * cos(tPar[6] * t * 360),
		tPar[4] * t^(1/2) * (2 * tPar[6] - 1) + tPar[3] * sin(o) * (1 - t),
		(tPar[5]/tPar[6] + (1 - t) * (1 + cos(o))) * tPar[2] * sin(tPar[6] * t * 360),
	}
end

function makeSineDisc(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local t, v = srandom(tSeed), srandom3(tSeed, 360)
	return {L * t * cos(v), H * sin(t * 360 * tPar[6]), W * t * sin(v),}
end

function makeSinePlane(tPar, tSeed)
	local s, t = srandom(tSeed), srandom(tSeed)
	return
	{
		tPar[2] * s * 2 - tPar[2],
		tPar[4] * (sin(s * 360 * tPar[6]) + sin(t * 360 * tPar[6]))/2,
		tPar[3] * t * 2 - tPar[3],
	}
end

function makeMoebius(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {L * cos(v) + h * cos(v/2) * cos(v), h * sin(v/2), W * sin(v) + h * cos(v/2) * sin(v),}
end

function makeKlein(tPar, tSeed)
	local u, v = srandomSet(tSeed,360,180)
	return
	{
		cos(u) * (cos(u/2) * (sqrt(2) + cos(v)) + sin(u/2) * sin(v) * cos(v))	* tPar[2],
		(-sin(u/2) * (sqrt(2) + cos(v)) + cos(u/2) * sin(v) * cos(v))		* tPar[4],
		sin(u) * (cos(u/2) * (sqrt(2) + cos(v)) + sin(u/2) * sin(v) * cos(v))	* tPar[3],
	}
end

function makeKlein8(tPar, tSeed)
	local u, v = srandomSet(tSeed,360,360)
	return
	{
		(tPar[6] + cos(u/2) * sin(v) - sin(u/2) * sin(v*2)) * cos(u)	* tPar[2],
		(sin(u/2) * sin(v) + cos(u/2) * sin(v*2))			* tPar[3],
		(tPar[6] + cos(u/2) * sin(v) - sin(u/2) * sin(v*2)) * sin(u)	* tPar[4],
	}
end

function makeKuen(tPar, tSeed)
	local u, v = srandomSet(tSeed,180,360)
	return
	{
		2 * (cos(v) + rad(v) * sin(v)) * sin(u)/(1 + rad(v)^2 * sin(u)^2)	* tPar[2],
		(log(tan(u/2)) + 2 * cos(u)/(1 + rad(v)^2 * sin(u)^2))			* tPar[3],
		2 * (sin(v) - rad(v) * cos(v)) * sin(u)/(1 + rad(v)^2 * sin(u)^2)	* tPar[4],
	}
end

function makeBoy(tPar, tSeed)
	local u, v = srandom(tSeed,180) - 90, srandom(tSeed,180)
	return
	{
		(sqrt(2) * cos(v)^2 * cos(2 * u) + cos(u) * sin(2 * v)) / (2 - sqrt(2) * sin(3 * u) * sin(2 * v))	* tPar[2],
		(3 * cos(v)^2) / (2 - sqrt(2) * sin(3 * u) * sin(2 * v))						* tPar[3],
		(sqrt(2) * cos(v)^2 * sin(2 * u) - sin(u) * sin(2 * v)) / (2 - sqrt(2) * sin(3 * u) * sin(2 * v))	* tPar[4],
	}
end

function makeRectangle(tPar, tSeed)
	local L, W, l = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[2], tPar[2])
	local w, h = srandomSet2(tSeed, -tPar[3], tPar[3], -tPar[4], tPar[4])
	local p, t = srandomSign(tSeed), srandom(tSeed)
	if (t < 1/2) then
		l = L * p
	else
		w = W * p
	end
	return {l, h, w,}
end

function makeEllipse(tPar, tSeed)
	local L, W, h, v = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {L * cos(v), h, W * sin(v),}
end

function makeParabola(tPar, tSeed)
	local w, h, p = srandomSet2(tSeed, -tPar[3], tPar[3], -tPar[4], tPar[4])
	local p = srandomSign(tSeed)
	return
	{
		sqrt(4 * w * tPar[2]) * p + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
		h,
		w + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
	}
end

function makeHyperbola(tPar, tSeed)
	local h, v = srandom3(tSeed, -tPar[4], tPar[4]), srandom3(tSeed, 360)
	return
	{
		tPar[2]/cos(v) + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
		h,
		tPar[3] * tan(v) + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
	}
end

function makeHypotrochoid(tPar, tSeed)
	local v, o, u = srandomSet(tSeed,360,360,180)
	return
	{
		(tPar[2] - tPar[3]) * cos(v * tPar[6]) + tPar[5] * cos((tPar[2] - tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * sin(u) * cos(o),
		0													+ tPar[4] * sin(u) * sin(o),
		(tPar[2] - tPar[3]) * sin(v * tPar[6]) - tPar[5] * sin((tPar[2] - tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * cos(u),
	}
end

function makeEpitrochoid(tPar, tSeed)
	local v, o, u = srandomSet(tSeed,360,360,180)
	return
	{
		(tPar[2] + tPar[3]) * cos(v * tPar[6]) - tPar[5] * cos((tPar[2] + tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * sin(u) * cos(o),
		0													+ tPar[4] * sin(u) * sin(o),
		(tPar[2] + tPar[3]) * sin(v * tPar[6]) - tPar[5] * sin((tPar[2] + tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * cos(u),
	}
end


--------------------------------------------------------------------------------
-- Debug functions
--

function print_map_stats()
	local total = iStartPoints + iPoints + iSpheres + iCameras + iSquadrons + iAsteroids + iSalvage + iPebbles + iClouds + iDustClouds + iNebulas + iDirLights + iRvAsteroids + iRvSquadrons
	print("Level loaded: " .. levelDesc)
	print("Maxplayers: " .. maxPlayers)
	print
	(
		"\niStartPoints = " .. iStartPoints ..
		"\n     iPoints = " ..      iPoints ..
		"\n    iSpheres = " ..     iSpheres ..
		"\n    iCameras = " ..     iCameras ..
		"\n  iSquadrons = " ..   iSquadrons ..
		"\n  iAsteroids = " ..   iAsteroids ..
		"\n    iSalvage = " ..     iSalvage ..
		"\n    iPebbles = " ..     iPebbles ..
		"\n     iClouds = " ..      iClouds ..
		"\n iDustClouds = " ..  iDustClouds ..
		"\n    iNebulas = " ..     iNebulas ..
		"\n  iDirLights = " ..   iDirLights ..
		"\niRvAsteroids = " .. iRvAsteroids ..
		"\niRvSquadrons = " .. iRvSquadrons ..
		"\n       total = " ..        total
	)
end
