-- (2P) Veil of Fire v1.2.6 by Mikali
-- Created: 2004/02/12
-- Updated: 2015/02/26
-- Homepage: http://isometricland.com
-- Teams: Top vs. Bottom

levelDesc = "<c=4284A4>Veil of Fire 1.2.6</c>"
maxPlayers = 2
player = {}

for k = 0, (maxPlayers - 1) do
	player[k] = {id = k, name = "Vaygr", resources = 1500, raceID = 2, startPos = 1,}
end

function DetermChunk()
	setWorldBoundsInner({0, 0, -3822.71,}, {50854.06, 37625.76, 55413.49,})
	setWorldBoundsInner({-4957.07, 0, 0,}, {46720.12, 19706.58, 44159.92,})

	for i, iCount in StartPoints do
		addPoint(iCount[1], iCount[2], iCount[3])
	end

	for i, iCount in EasyPatches do
		easyPatch(iCount[1])
	end

	for i, iCount in Squadrons do
		addSquadron(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5], iCount[6], iCount[7])
	end

	for i, iCount in DustClouds do
		addDustCloud(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5], iCount[6])
	end

end

function NonDetermChunk()
	fogSetActive(1)
	fogSetStart(10)
	fogSetEnd(15000)
	fogSetColour(0.347656, 0.197266, 0.074219, 1)
	fogSetType("linear")
	fogSetDensity(0.28)
	setGlareIntensity(0)
	setLevelShadowColour(0, 0, 0, 1)
	loadBackground("m07")
	setSensorsManagerCameraDistances(12000, 50000)

	for i, iCount in Pebbles do
		addPebble(iCount[1], iCount[2], iCount[3], iCount[4], iCount[5])
	end

end

--------------------------------------------------------------------------------

StartPoints =
{
	-- posX = 9526; posZ = -25; posY = -15115;
	{"StartPos0", {7026, -25, -17615,}, {0, 315, 0,},},
	-- posX = -7713; posZ = 928; posY = 10408; Was Pos2
	{"StartPos1", {-5213, 928, 12908,}, {0, 135, 0,},},
	-- posX = 17077; posZ = 676; posY = -198; Was Pos 1
	{"StartPos2", {17077, 676, -3698,}, {0, 270, 0,},},
	-- posX = -16893; posZ = 3190; posY = -10048;
	{"StartPos3", {-16893, 2190, -13548,}, {0, 90, 0,},},
}

EasyPatches =
{
	{{17077, 676, -198,},},
	{{-7713, 928, 10408,},},
	{{-16893, 3190, -10048,},},
	{{9526, -25, -15115,},},
	{{-29949, 198, 7034,},},
	{{38325, 9404, -5422,},},
--	{{9526, -25, -15115,},},
--	{{20577, 676, -3698,},},
--	{{-2713, 928, 15408,},},
--	{{-16893, 2190, -10048,},},
}

Squadrons =
{
	{"Meg_Foundry", "Meg_Foundry", {-16684, 0, -5174,}, -1, {21.876, -10.207, -26.827,}, 0, 0,},
	{"Meg_FoundryDebris_Chunk9", "Meg_FoundryDebris_Chunk4", {-9958, 2647, 18556,}, -1, {63.505, -61.193, -88.671,}, 0, 0,},
	{"Meg_FoundryDebris_Chunk10", "Meg_FoundryDebris_Chunk4", {-19778, 0, -747,}, -1, {83.46, 28.367, 25.843,}, 0, 0,},
	{"Meg_FoundryDebris_Chunk11", "Meg_FoundryDebris_Chunk4", {-13338, 4148, -15205,}, -1, {150.089, 63.483, 150.095,}, 0, 0,},
	{"Meg_FoundryDebris_Chunk13", "Meg_FoundryDebris_Chunk4", {-16816, 20, 6141,}, -1, {-3.713, -10.928, 21.123,}, 0, 0,},

	{"Meg_FoundryDebris_Flake4", "Meg_FoundryDebris_Flake1", {-22273, -2229, 1553,}, -1, {90.126, 43.764, 90.087,}, 0, 0,},
	{"Meg_FoundryDebris_Flake10", "Meg_FoundryDebris_Flake2", {-15728, 476, 9367,}, -1, {-71.084, -31.068, 56.414,}, 0, 0,},
	{"Meg_FoundryDebris_Flake11", "Meg_FoundryDebris_Flake3", {-15178, 3865, -12767,}, -1, {34.841, 4.715, -76.068,}, 0, 0,},
	{"Meg_FoundryDebris_Flake14", "Meg_FoundryDebris_Flake3", {-20506, -1698, 3510,}, -1, {56.808, -14.376, -80.775,}, 0, 0,},
	{"Meg_FoundryDebris_Flake15", "Meg_FoundryDebris_Flake3", {-15394, 6070, -16324,}, -1, {74.196, 0, -49.454,}, 0, 0,},
	{"Meg_FoundryDebris_Flake17", "Meg_FoundryDebris_Flake4", {-14237, 214, -8771,}, -1, {49.226, -2.189, -88.114,}, 0, 0,},
	{"Meg_FoundryDebris_Flake18", "Meg_FoundryDebris_Flake4", {-19158, -624, 4509,}, -1, {30.971, 160.774, 61.248,}, 0, 0,},
	{"Meg_FoundryDebris_Flake2", "Meg_FoundryDebris_Flake1", {-18559, -383, -2544,}, -1, {-43.746, 0, 0,}, 0, 0,},
	{"Meg_FoundryDebris_Flake3", "Meg_FoundryDebris_Flake1", {-17341, -383, -106,}, -1, {-15.724, -11.264, -70.111,}, 0, 0,},
	{"Meg_FoundryDebris_Flake7", "Meg_FoundryDebris_Flake2", {-16154, 2330, -8449,}, -1, {-42.475, -37.956, 17.974,}, 0, 0,},

	{"Meg_VeilDebris_Bit3", "Meg_VeilDebris_Bit3", {-15647, 2559, -9375,}, -1, {65, 45, 0,}, 0, 0,},
	{"Meg_VeilDebris_Bit1", "Meg_VeilDebris_Bit1", {-17734, 155, 5401,}, -1, {-14, 54, 11,}, 0, 0,},
	{"Meg_VeilDebris_Bit10", "Meg_VeilDebris_Bit10", {-21359, -631, 0,}, -1, {-6, -66, 21,}, 0, 0,},
	{"Meg_VeilDebris_Bit11", "Meg_VeilDebris_Bit11", {-19863, -945, 2505,}, -1, {109, 65, 117,}, 0, 0,},
	{"Meg_VeilDebris_Bit13", "Meg_VeilDebris_Bit13", {-16454, 727, 7850,}, -1, {31, 46, 82,}, 0, 0,},
	{"Meg_VeilDebris_Bit14", "Meg_VeilDebris_Bit14", {-18387, -249, -1266,}, -1, {25, 54, -64,}, 0, 0,},
	{"Meg_VeilDebris_Bit15", "Meg_VeilDebris_Bit15", {-16916, 1208, -1693,}, -1, {56, 204, 14,}, 0, 0,},
	{"Meg_VeilDebris_Bit2", "Meg_VeilDebris_Bit2", {-14790, 762, -7936,}, -1, {14, -66, -19,}, 0, 0,},
	{"Meg_VeilDebris_Bit16", "Meg_VeilDebris_Bit3", {-14790, 2972, -11582,}, -1, {31, 5, 3,}, 0, 0,},
	{"Meg_VeilDebris_Bit4", "Meg_VeilDebris_Bit4", {-14790, 2997, -13211,}, -1, {44, 46, 71,}, 0, 0,},
	{"Meg_VeilDebris_Bit5", "Meg_VeilDebris_Bit5", {-14790, 4665, -14648,}, -1, {-108, 54, 93,}, 0, 0,},
	{"Meg_VeilDebris_Bit6", "Meg_VeilDebris_Bit6", {-17168, 1905, -10502,}, -1, {143, -66, 3,}, 0, 0,},
	{"Meg_VeilDebris_Bit8", "Meg_VeilDebris_Bit8", {-14790, 2245, -7693,}, -1, {42, -75, 143,}, 0, 0,},
	{"Meg_VeilDebris_Bit9", "Meg_VeilDebris_Bit9", {-14790, 1606, 11798,}, -1, {14, 65, 143,}, 0, 0,},
	{"Meg_VeilDebris_Bit17", "Meg_VeilDebris_Bit9", {-13343, 2270, 12466,}, -1, {-78, 46, 14,}, 0, 0,},
	{"Meg_VeilDebris_Bit18", "Meg_VeilDebris_Bit8", {20087, 3394, -8811,}, -1, {-33, 46, 14,}, 0, 0,},
	{"Meg_VeilDebris_Bit19", "Meg_VeilDebris_Bit6", {21174, 3414, -9742,}, -1, {137, 54, 143,}, 0, 0,},
	{"Meg_VeilDebris_Bit20", "Meg_VeilDebris_Bit5", {17554, 1108, 13135,}, -1, {32, -66, 15,}, 0, 0,},
	{"Meg_VeilDebris_Bit21", "Meg_VeilDebris_Bit4", {14842, 1174, 6207,}, -1, {13, -66, -6,}, 0, 0,},
	{"Meg_VeilDebris_Bit22", "Meg_VeilDebris_Bit3", {16470, 1236, 3515,}, -1, {83, 65, -179,}, 0, 0,},
	{"Meg_VeilDebris_Bit23", "Meg_VeilDebris_Bit2", {-7181, 2223, -23089,}, -1, {27.142, 13.4, 42.796,}, 0, 0,},
	{"Meg_VeilDebris_Bit24", "Meg_VeilDebris_Bit15", {-5624, 2103, -24409,}, -1, {-150.876, -11.666, 23.368,}, 0, 0,},
	{"Meg_VeilDebris_Bit25", "Meg_VeilDebris_Bit14", {17966, 2778, -16167,}, -1, {0, 1, 38,}, 0, 0,},
	{"Meg_VeilDebris_Bit26", "Meg_VeilDebris_Bit13", {15195, 2414, -19828,}, -1, {83, 32, 14,}, 0, 0,},

	{"Meg_FoundryDebris_Chunk12", "Meg_FoundryDebris_Chunk4", {21457, 890, 972,}, -1, {164.45, -37.821, -107.252,}, 0, 0,},

	{"Meg_FoundryDebris_Flake19", "Meg_FoundryDebris_Flake4", {15658, 1772, -14936,}, -1, {55.852, -36.352, 111.902,}, 0, 0,},
	{"Meg_FoundryDebris_Flake13", "Meg_FoundryDebris_Flake3", {16896, 1094, 16027,}, -1, {119.172, -12.199, -96.727,}, 0, 0,},
	{"Meg_FoundryDebris_Flake6", "Meg_FoundryDebris_Flake2", {16329, 471, 5615,}, -1, {110.729, 3.033, -80.791,}, 0, 0,},
	{"Meg_FoundryDebris_Flake9", "Meg_FoundryDebris_Flake2", {7745, 1493, -31604,}, -1, {31.998, 6.334, -101.425,}, 0, 0,},
	{"Meg_FoundryDebris_Flake5", "Meg_FoundryDebris_Flake1", {9479, 2646, 28788,}, -1, {76.243, -45.965, -124.577,}, 0, 0,},
	{"Meg_FoundryDebris_Flake16", "Meg_FoundryDebris_Flake4", {-3713, 1361, -21639,}, -1, {48.204, -9.831, 98.678,}, 0, 0,},
	{"Meg_FoundryDebris_Flake20", "Meg_FoundryDebris_Flake4", {-14714, 1591, -25426,}, -1, {153.019, -19.274, -122.958,}, 0, 0,},
	{"Meg_FoundryDebris_Flake1", "Meg_FoundryDebris_Flake1", {-15233, 1960, 13592,}, -1, {98.045, -65.733, 3.489,}, 0, 0,},
	{"Meg_FoundryDebris_Flake12", "Meg_FoundryDebris_Flake3", {-2231, 2915, 28119,}, -1, {122.097, 43.404, 113.316,}, 0, 0,},
	{"Meg_FoundryDebris_Flake8", "Meg_FoundryDebris_Flake2", {-9249, 3792, -22261,}, -1, {56.896, 45.196, 65.175,}, 0, 0,},

	{"Meg_FoundryDebris_Chunk14", "Meg_FoundryDebris_Chunk4", {20832, 4427, -10206,}, -1, {36.561, 146.261, 38.964,}, 0, 0,},
	{"Meg_VeilDebris_Bit27", "Meg_VeilDebris_Bit11", {14991, 4137, -22211,}, -1, {138, 7, -39,}, 0, 0,},
	{"Meg_VeilDebris_Bit28", "Meg_VeilDebris_Bit10", {12187, 3657, -23538,}, -1, {4, 89, -42,}, 0, 0,},
	{"Meg_VeilDebris_Bit29", "Meg_VeilDebris_Bit1", {15538, 5378, -27440,}, -1, {-135, -87, -86,}, 0, 0,},
	{"Meg_VeilDebris_Bit30", "Meg_VeilDebris_Bit3", {10968, 5955, -30513,}, -1, {-93, -61, -106,}, 0, 0,},
	{"Meg_FoundryDebris_Chunk8", "Meg_FoundryDebris_Chunk4", {13959, 4539, -23460,}, -1, {0, -82.445, 0,}, 0, 0,},
}

DustClouds =
{
	{"Nebula_2", "DustCloud_NoRes_M05", {-9026, 2931, 22263,}, {0.978, 1, 0.978, 0.7092,}, 260.977, 2907.172,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-8828, 3093, 19368,}, {0.978, 1, 0.978, 0.7092,}, 249.848, 2907.172,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-8177, 2072, 17895,}, {0.978, 1, 0.978, 0.7092,}, 235.763, 1907.134,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-9250, 2218, 16585,}, {0.978, 1, 0.978, 0.7092,}, 35.388, 1699.719,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-10317, 2475, 16320,}, {0.978, 1, 0.978, 0.7092,}, 17.864, 2118.216,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-10834, 2392, 14268,}, {0.978, 1, 0.978, 0.7092,}, 167.052, 2118.216,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-10558, 2097, 12214,}, {0.978, 1, 0.978, 0.7092,}, 262.032, 2179.82,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-12121, 2354, 10717,}, {0.978, 1, 0.978, 0.7092,}, 244.772, 2179.82,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-11870, 2451, 12237,}, {0.978, 1, 0.978, 0.7092,}, 133.96, 1543.987,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-11355, 2449, 13505,}, {0.978, 1, 0.978, 0.7092,}, 17.985, 2335.934,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-11630, 2771, 15802,}, {0.978, 1, 0.978, 0.7092,}, 61.042, 3281.093,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-11015, 2994, 19017,}, {0.978, 1, 0.978, 0.7092,}, 111.8, 3281.093,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-9776, 3533, 20575,}, {0.978, 1, 0.978, 0.7092,}, 76.489, 2180.381,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-9646, 2980, 22680,}, {0.978, 1, 0.978, 0.7092,}, 174.479, 2519.472,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-7770, 3391, 24312,}, {0.978, 1, 0.978, 0.7092,}, 158.351, 2519.472,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-6772, 3328, 26384,}, {0.978, 1, 0.978, 0.7092,}, 218.14, 3806.893,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-5615, 1357, 29428,}, {0.978, 1, 0.978, 0.7092,}, 144.387, 3806.893,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-2740, 697, 30892,}, {0.978, 1, 0.978, 0.7092,}, 303.353, 3292.284,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-5467, 1008, 29308,}, {0.978, 1, 0.978, 0.7092,}, 224.392, 3997.215,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-6476, 3200, 26121,}, {0.978, 1, 0.978, 0.7092,}, 19.249, 3997.215,},
	{"Nebula_2", "DustCloud_NoRes_M05", {-7329, 3282, 23912,}, {0.978, 1, 0.978, 0.7092,}, 310.879, 2392.144,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-19454, -858, -347,}, {0.978, 1, 0.978, 0.7092,}, 110.306, 2902.482,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-18984, -8, -912,}, {0.978, 1, 0.978, 0.7092,}, 9.613, 1140.887,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-19503, 994, -1082,}, {0.978, 1, 0.978, 0.7092,}, 140.827, 1788.733,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-21111, 1602, -587,}, {0.978, 1, 0.978, 0.7092,}, 11.173, 4507.768,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-23554, -1372, 1760,}, {0.978, 1, 0.978, 0.7092,}, 308.857, 4507.768,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-25457, -1347, 2631,}, {0.978, 1, 0.978, 0.7092,}, 144.683, 2179.82,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-26329, -3022, 3720,}, {0.978, 1, 0.978, 0.7092,}, 220.173, 2179.82,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-25053, -2603, 2958,}, {0.978, 1, 0.978, 0.7092,}, 315.152, 1543.987,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-24078, -1961, 2244,}, {0.978, 1, 0.978, 0.7092,}, 214.207, 2335.934,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-21959, -1956, 1262,}, {0.978, 1, 0.978, 0.7092,}, 285.543, 2335.934,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-20291, -1225, 191,}, {0.978, 1, 0.978, 0.7092,}, 212.625, 2112.41,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-18856, -1306, -440,}, {0.978, 1, 0.978, 0.7092,}, 204.912, 1570.054,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-18684, -235, -958,}, {0.978, 1, 0.978, 0.7092,}, 242.19, 1202.903,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-18898, 535, -1174,}, {0.978, 1, 0.978, 0.7092,}, 3.681, 1858.701,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-20028, 2009, -1255,}, {0.978, 1, 0.978, 0.7092,}, 122.963, 2369.337,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-22036, 1486, -112,}, {0.978, 1, 0.978, 0.7092,}, 277.567, 2369.337,},
	{"Nebula_3", "DustCloud_NoRes_M05", {-22112, -664, 803,}, {0.978, 1, 0.978, 0.7092,}, 313.153, 2902.482,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-16539, 2315, -26208,}, {0.978, 1, 0.978, 0.7092,}, 261.208, 4236.693,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-15487, 3911, -22427,}, {0.978, 1, 0.978, 0.7092,}, 321.821, 4236.693,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14104, 4229, -18915,}, {0.978, 1, 0.978, 0.7092,}, 192.805, 3787.754,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14135, 4264, -16509,}, {0.978, 1, 0.978, 0.7092,}, 280.83, 2406.023,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-15351, 3613, -14886,}, {0.978, 1, 0.978, 0.7092,}, 71.051, 2129.872,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14812, 3200, -13328,}, {0.978, 1, 0.978, 0.7092,}, 287.071, 1699.719,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-13902, 3199, -12661,}, {0.978, 1, 0.978, 0.7092,}, 305.572, 2118.216,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14158, 2439, -10701,}, {0.978, 1, 0.978, 0.7092,}, 226.336, 2118.216,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-15164, 1600, -9068,}, {0.978, 1, 0.978, 0.7092,}, 222.095, 2179.82,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14231, 1161, -7147,}, {0.978, 1, 0.978, 0.7092,}, 90.233, 2179.82,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-13916, 1737, -8545,}, {0.978, 1, 0.978, 0.7092,}, 283.72, 1543.987,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-13943, 2188, -9836,}, {0.978, 1, 0.978, 0.7092,}, 257, 2335.934,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-12850, 3122, -11677,}, {0.978, 1, 0.978, 0.7092,}, 29.334, 2335.934,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-13121, 3553, -13091,}, {0.978, 1, 0.978, 0.7092,}, 307.923, 2141.825,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-12833, 3316, -15201,}, {0.978, 1, 0.978, 0.7092,}, 110.691, 6395.497,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14650, 3223, -21332,}, {0.978, 1, 0.978, 0.7092,}, 170.271, 6395.497,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-15766, 3165, -25875,}, {0.978, 1, 0.978, 0.7092,}, 69.073, 4678.293,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-15624, 2940, -28945,}, {0.978, 1, 0.978, 0.7092,}, 358.209, 3771.943,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-13493, 5894, -29926,}, {0.978, 1, 0.978, 0.7092,}, 233.148, 3771.943,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14297, 4653, -31053,}, {0.978, 1, 0.978, 0.7092,}, 62.69, 1859.585,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-14379, 5109, -30524,}, {0.978, 1, 0.978, 0.7092,}, 98.99, 3768.676,},
	{"Nebula_4", "DustCloud_NoRes_M05", {-16439, 2396, -28912,}, {0.978, 1, 0.978, 0.7092,}, 302.012, 3768.676,},

	{"Nebula_Flake_2", "DustCloud_NoRes_M05", {-23236, -2229, 1095,}, {0.978, 1, 0.978, 0.7092,}, 133.642, 1219.952,},
	{"Nebula_Flake_2", "DustCloud_NoRes_M05", {-24193, -2229, 1851,}, {0.978, 1, 0.978, 0.7092,}, 83.707, 1219.952,},
	{"Nebula_Flake_2", "DustCloud_NoRes_M05", {-23589, -2229, 2707,}, {0.978, 1, 0.978, 0.7092,}, 83.4, 3770.262,},
	{"Nebula_Flake_2", "DustCloud_NoRes_M05", {-19859, -2229, 2153,}, {0.978, 1, 0.978, 0.7092,}, 349.574, 3770.262,},
	{"Nebula_Flake_2", "DustCloud_NoRes_M05", {-22681, -2229, 944,}, {0.978, 1, 0.978, 0.7092,}, 8.24, 3070.421,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-16489, 476, 9665,}, {0.978, 1, 0.978, 0.7092,}, 54.659, 956.192,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-16187, 476, 8758,}, {0.978, 1, 0.978, 0.7092,}, 3.329, 956.192,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-15632, 476, 8204,}, {0.978, 1, 0.978, 0.7092,}, 231.797, 1142.551,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-14876, 476, 9060,}, {0.978, 1, 0.978, 0.7092,}, 149.243, 1142.551,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-14876, 476, 9968,}, {0.978, 1, 0.978, 0.7092,}, 32.641, 1218.911,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-16086, 476, 10119,}, {0.978, 1, 0.978, 0.7092,}, 251.737, 1218.911,},
	{"Nebula_Flake_8", "DustCloud_NoRes_M05", {-16590, 476, 9816,}, {0.978, 1, 0.978, 0.7092,}, 236.708, 587.71,},
	{"Nebula_Flake_9", "DustCloud_NoRes_M05", {-13420, 3865, -11679,}, {0.978, 1, 0.978, 0.7092,}, 192.772, 5191.007,},
	{"Nebula_Flake_9", "DustCloud_NoRes_M05", {-18610, 3865, -11729,}, {0.978, 1, 0.978, 0.7092,}, 19.435, 5191.007,},
	{"Nebula_Flake_9", "DustCloud_NoRes_M05", {-15536, 3865, -12788,}, {0.978, 1, 0.978, 0.7092,}, 93.595, 3251.209,},
	{"Nebula_Flake_9", "DustCloud_NoRes_M05", {-15335, 3865, -10218,}, {0.978, 1, 0.978, 0.7092,}, 310.802, 2578.076,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-15046, 6070, -16530,}, {0.978, 1, 0.978, 0.7092,}, 31.477, 1077.338,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-14845, 6070, -17589,}, {0.978, 1, 0.978, 0.7092,}, 255.385, 1077.338,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-15431, 5777, -17620,}, {0.978, 1, 0.978, 0.7092,}, 311.12, 1393.292,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-15346, 6070, -18979,}, {0.978, 1, 0.978, 0.7092,}, 105.483, 1393.292,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-15544, 6025, -19276,}, {0.978, 1, 0.978, 0.7092,}, 232.17, 917.596,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-15902, 5690, -18500,}, {0.978, 1, 0.978, 0.7092,}, 298.31, 1337.701,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-15527, 6104, -17285,}, {0.978, 1, 0.978, 0.7092,}, 313.889, 1462.534,},
	{"Nebula_Flake_13", "DustCloud_NoRes_M05", {-14947, 6240, -15949,}, {0.978, 1, 0.978, 0.7092,}, 328.512, 1462.534,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-13890, 297, -9078,}, {0.978, 1, 0.978, 0.7092,}, 158.461, 1244.683,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-12832, 297, -9733,}, {0.978, 1, 0.978, 0.7092,}, 127.445, 1764.571,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-14595, 297, -9683,}, {0.978, 1, 0.978, 0.7092,}, 153.978, 1872.797,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-13839, 297, -7970,}, {0.978, 1, 0.978, 0.7092,}, 0.308, 1872.797,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-15251, 297, -8171,}, {0.978, 1, 0.978, 0.7092,}, 278.479, 2457.536,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-12882, 297, -8826,}, {0.978, 1, 0.978, 0.7092,}, 32.334, 2457.536,},
	{"Nebula_Flake_15", "DustCloud_NoRes_M05", {-13033, 297, -9028,}, {0.978, 1, 0.978, 0.7092,}, 246.2, 858.209,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-19270, -665, -2839,}, {0.978, 1, 0.978, 0.7092,}, 55.472, 2614.758,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-19723, -1396, -3604,}, {0.978, 1, 0.978, 0.7092,}, 17.447, 1552.484,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-18816, -525, -2693,}, {0.978, 1, 0.978, 0.7092,}, 6.68, 2068.683,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-18716, -1954, -4186,}, {0.978, 1, 0.978, 0.7092,}, 233.148, 3335.65,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-18464, 346, -1783,}, {0.978, 1, 0.978, 0.7092,}, 329.095, 3335.65,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-17254, 67, -2074,}, {0.978, 1, 0.978, 0.7092,}, 155.417, 4336.671,},
	{"Nebula_Flake_19", "DustCloud_NoRes_M05", {-21588, 172, -1965,}, {0.978, 1, 0.978, 0.7092,}, 87.333, 4336.671,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-15936, -665, -400,}, {0.978, 1, 0.978, 0.7092,}, 235.444, 1300.562,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-16641, -1222, -983,}, {0.978, 1, 0.978, 0.7092,}, 8.218, 1678.262,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-17901, -456, -182,}, {0.978, 1, 0.978, 0.7092,}, 49.836, 1678.262,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-18858, -1118, -873,}, {0.978, 1, 0.978, 0.7092,}, 198.144, 2716.7,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-16792, 102, 401,}, {0.978, 1, 0.978, 0.7092,}, 166.832, 2716.7,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-18556, 520, 838,}, {0.978, 1, 0.978, 0.7092,}, 108.252, 3439.487,},
	{"Nebula_Flake_20", "DustCloud_NoRes_M05", {-15180, 67, 364,}, {0.978, 1, 0.978, 0.7092,}, 123.314, 3439.487,},

	{"Nebula_Foundry_2", "DustCloud_NoRes_M05", {-17357, 1059, -6291,}, {0.8353, 0.8353, 0.8353, 1,}, 218.887, 1834.433,},
	{"Nebula_Foundry_2", "DustCloud_NoRes_M05", {-17128, 668, -5837,}, {0.8353, 0.8353, 0.8353, 1,}, 354.397, 2318.205,},
	{"Nebula_Foundry_2", "DustCloud_NoRes_M05", {-18298, 2669, -5837,}, {0.8353, 0.8353, 0.8353, 1,}, 54.318, 3450.545,},
	{"Nebula_Foundry_2", "DustCloud_NoRes_M05", {-16568, -289, -5434,}, {0.8353, 0.8353, 0.8353, 1,}, 256.187, 3450.545,},
	{"Nebula_Foundry_2", "DustCloud_NoRes_M05", {-17687, 1625, -6291,}, {0.8353, 0.8353, 0.8353, 1,}, 279.182, 2377.163,},
	{"Nebula_Foundry_2", "DustCloud_NoRes_M05", {-18247, 2582, -6795,}, {0.8353, 0.8353, 0.8353, 1,}, 223.634, 1834.433,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-13613, -665, -5200,}, {0.8353, 0.8353, 0.8353, 1,}, 247.738, 1300.562,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-14318, -1222, -5782,}, {0.8353, 0.8353, 0.8353, 1,}, 204.176, 1678.262,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-15578, -456, -4982,}, {0.8353, 0.8353, 0.8353, 1,}, 197.364, 1678.262,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-16536, -1118, -5673,}, {0.8353, 0.8353, 0.8353, 1,}, 88.717, 2716.7,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-14470, 102, -4399,}, {0.8353, 0.8353, 0.8353, 1,}, 177.347, 2716.7,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-16233, 520, -3962,}, {0.8353, 0.8353, 0.8353, 1,}, 241.135, 3439.487,},
	{"Nebula_Foundry_1", "DustCloud_NoRes_M05", {-12857, 67, -4435,}, {0.8353, 0.8353, 0.8353, 1,}, 224.414, 3439.487,},
	{"Nebula_Foundry_3", "DustCloud_NoRes_M05", {-15886, 26, -2315,}, {0.8353, 0.8353, 0.8353, 1,}, 287.554, 1219.952,},
	{"Nebula_Foundry_3", "DustCloud_NoRes_M05", {-16379, 26, -3431,}, {0.8353, 0.8353, 0.8353, 1,}, 356.012, 1219.952,},
	{"Nebula_Foundry_3", "DustCloud_NoRes_M05", {-17360, 26, -3059,}, {0.8353, 0.8353, 0.8353, 1,}, 226.611, 3770.262,},
	{"Nebula_Foundry_3", "DustCloud_NoRes_M05", {-17753, 26, 691,}, {0.8353, 0.8353, 0.8353, 1,}, 212.867, 3770.262,},
	{"Nebula_Foundry_3", "DustCloud_NoRes_M05", {-15878, 26, -1740,}, {0.8353, 0.8353, 0.8353, 1,}, 181.994, 3070.421,},
	{"Nebula_Flake_16", "DustCloud_NoRes_M05", {-18105, -473, 5457,}, {0.8353, 0.8353, 0.8353, 1,}, 161.899, 1075.419,},
	{"Nebula_Flake_16", "DustCloud_NoRes_M05", {-18408, -773, 4470,}, {0.8353, 0.8353, 0.8353, 1,}, 338.543, 2118.216,},
	{"Nebula_Flake_16", "DustCloud_NoRes_M05", {-19907, -1442, 3130,}, {0.8353, 0.8353, 0.8353, 1,}, 90.706, 2118.216,},
	{"Nebula_Flake_16", "DustCloud_NoRes_M05", {-19912, -1088, 4669,}, {0.8353, 0.8353, 0.8353, 1,}, 262.977, 1578.587,},
	{"Nebula_Flake_16", "DustCloud_NoRes_M05", {-19780, -1016, 4843,}, {0.8353, 0.8353, 0.8353, 1,}, 225.029, 1503.327,},
	{"Nebula_Flake_16", "DustCloud_NoRes_M05", {-18460, -570, 5406,}, {0.8353, 0.8353, 0.8353, 1,}, 230.885, 1503.327,},

	{"Nebula_6", "DustCloud_NoRes_M05", {-16806, -162, 5452,}, {0.8353, 0.8353, 0.8353, 1,}, 200.287, 2213.915,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-17539, -15, 6854,}, {0.8353, 0.8353, 0.8353, 1,}, 160.68, 1589.084,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-16466, 279, 7014,}, {0.8353, 0.8353, 0.8353, 1,}, 358.572, 2686.507,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-15794, -151, 4448,}, {0.8353, 0.8353, 0.8353, 1,}, 216.327, 2686.507,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-17375, -624, 4041,}, {0.8353, 0.8353, 0.8353, 1,}, 62.206, 1699.719,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-18408, -773, 4470,}, {0.8353, 0.8353, 0.8353, 1,}, 119.678, 1128.595,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-18105, -473, 5457,}, {0.8353, 0.8353, 0.8353, 1,}, 235.29, 2228.11,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-17724, 106, 7574,}, {0.8353, 0.8353, 0.8353, 1,}, 153.901, 2228.11,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-15878, 397, 6912,}, {0.8353, 0.8353, 0.8353, 1,}, 244.266, 1982.864,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-14894, 270, 5340,}, {0.8353, 0.8353, 0.8353, 1,}, 179.116, 2369.337,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-16329, -473, 3608,}, {0.8353, 0.8353, 0.8353, 1,}, 288.982, 2369.337,},
	{"Nebula_6", "DustCloud_NoRes_M05", {-18540, -853, 4262,}, {0.8353, 0.8353, 0.8353, 1,}, 1.626, 2337.762,},

	{"Nebula_Flake_12", "DustCloud_NoRes_M05", {-19912, -1088, 4669,}, {0.8353, 0.8353, 0.8353, 1,}, 135.323, 3356.981,},
	{"Nebula_Flake_12", "DustCloud_NoRes_M05", {-19907, -1442, 3130,}, {0.8353, 0.8353, 0.8353, 1,}, 297.837, 2093.318,},
	{"Nebula_Flake_12", "DustCloud_NoRes_M05", {-20740, -2060, 1312,}, {0.8353, 0.8353, 0.8353, 1,}, 320.811, 2179.821,},
	{"Nebula_Flake_12", "DustCloud_NoRes_M05", {-22830, -2622, 1049,}, {0.8353, 0.8353, 0.8353, 1,}, 234.214, 2179.821,},
	{"Nebula_Flake_12", "DustCloud_NoRes_M05", {-21830, -2136, 2121,}, {0.8353, 0.8353, 0.8353, 1,}, 264.229, 3356.981,},
	{"Nebula_Flake_5", "DustCloud_NoRes_M05", {-14014, 2482, -8044,}, {0.8353, 0.8353, 0.8353, 1,}, 344.553, 5191.007,},
	{"Nebula_Flake_5", "DustCloud_NoRes_M05", {-19205, 2482, -8095,}, {0.8353, 0.8353, 0.8353, 1,}, 130.774, 5191.007,},
	{"Nebula_Flake_5", "DustCloud_NoRes_M05", {-16130, 2482, -9153,}, {0.8353, 0.8353, 0.8353, 1,}, 325.678, 3251.209,},
	{"Nebula_Flake_5", "DustCloud_NoRes_M05", {-15929, 2482, -6583,}, {0.8353, 0.8353, 0.8353, 1,}, 163.723, 2578.076,},

	{"Nebula_5", "DustCloud_NoRes_M05", {15850, 1983, 70,}, {0.978, 1, 0.978, 0.7092,}, 312.999, 1381.482,},
	{"Nebula_5", "DustCloud_NoRes_M05", {16839, 1587, 595,}, {0.978, 1, 0.978, 0.7092,}, 14.085, 2661.575,},
	{"Nebula_5", "DustCloud_NoRes_M05", {19333, 706, 297,}, {0.978, 1, 0.978, 0.7092,}, 337.005, 2661.575,},
	{"Nebula_5", "DustCloud_NoRes_M05", {20740, 833, 1933,}, {0.978, 1, 0.978, 0.7092,}, 59.35, 2161.163,},
	{"Nebula_5", "DustCloud_NoRes_M05", {22329, 850, 2754,}, {0.978, 1, 0.978, 0.7092,}, 42.09, 1788.733,},
	{"Nebula_5", "DustCloud_NoRes_M05", {23593, 933, 1621,}, {0.978, 1, 0.978, 0.7092,}, 42.606, 1699.719,},
	{"Nebula_5", "DustCloud_NoRes_M05", {23808, 983, 514,}, {0.978, 1, 0.978, 0.7092,}, 208.835, 2118.216,},
	{"Nebula_5", "DustCloud_NoRes_M05", {25846, 1069, -57,}, {0.978, 1, 0.978, 0.7092,}, 263.361, 2118.216,},
	{"Nebula_5", "DustCloud_NoRes_M05", {27924, 1123, 191,}, {0.978, 1, 0.978, 0.7092,}, 241.102, 2179.82,},
	{"Nebula_5", "DustCloud_NoRes_M05", {29352, 1232, -1452,}, {0.978, 1, 0.978, 0.7092,}, 291.191, 2179.82,},
	{"Nebula_5", "DustCloud_NoRes_M05", {27836, 1174, -1165,}, {0.978, 1, 0.978, 0.7092,}, 359.099, 1543.987,},
	{"Nebula_5", "DustCloud_NoRes_M05", {26587, 1114, -610,}, {0.978, 1, 0.978, 0.7092,}, 73.589, 2335.934,},
	{"Nebula_5", "DustCloud_NoRes_M05", {24265, 1051, -853,}, {0.978, 1, 0.978, 0.7092,}, 139.772, 2335.934,},
	{"Nebula_5", "DustCloud_NoRes_M05", {23013, 980, -24,}, {0.978, 1, 0.978, 0.7092,}, 209.153, 1503.327,},
	{"Nebula_5", "DustCloud_NoRes_M05", {21910, 1291, -147,}, {0.978, 1, 0.978, 0.7092,}, 345.651, 2615.718,},
	{"Nebula_5", "DustCloud_NoRes_M05", {19346, 1303, -665,}, {0.978, 1, 0.978, 0.7092,}, 137.421, 3648.164,},
	{"Nebula_5", "DustCloud_NoRes_M05", {15766, 1996, -786,}, {0.978, 1, 0.978, 0.7092,}, 43.496, 3648.164,},
	{"Nebula_5", "DustCloud_NoRes_M05", {14310, 2429, -519,}, {0.978, 1, 0.978, 0.7092,}, 16.645, 1542.974,},
	{"Nebula_5", "DustCloud_NoRes_M05", {13550, 1615, -290,}, {0.978, 1, 0.978, 0.7092,}, 273.974, 1336.344,},
	{"Nebula_5", "DustCloud_NoRes_M05", {12570, 2389, 186,}, {0.978, 1, 0.978, 0.7092,}, 0.637, 1336.344,},
	{"Nebula_5", "DustCloud_NoRes_M05", {12137, 2425, 558,}, {0.978, 1, 0.978, 0.7092,}, 153.495, 1423.909,},
	{"Nebula_5", "DustCloud_NoRes_M05", {13417, 1875, 264,}, {0.978, 1, 0.978, 0.7092,}, 166.085, 1423.909,},
	{"Nebula_5", "DustCloud_NoRes_M05", {14480, 2100, -67,}, {0.978, 1, 0.978, 0.7092,}, 269.778, 1381.482,},

	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {14512, 1772, -15161,}, {0.978, 1, 0.978, 0.7092,}, 201.386, 1406.16,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {15078, 1772, -14454,}, {0.978, 1, 0.978, 0.7092,}, 331.929, 1359.569,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {16209, 1772, -15208,}, {0.978, 1, 0.978, 0.7092,}, 308.527, 1686.338,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {14701, 1772, -15963,}, {0.978, 1, 0.978, 0.7092,}, 176.72, 1686.338,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {14842, 1772, -15020,}, {0.978, 1, 0.978, 0.7092,}, 268.997, 1497.219,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {16162, 1772, -14313,}, {0.978, 1, 0.978, 0.7092,}, 92.068, 1497.219,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {15314, 1772, -13936,}, {0.978, 1, 0.978, 0.7092,}, 285.115, 1655.088,},
	{"Nebula_Flake_17", "DustCloud_NoRes_M05", {15879, 1772, -15491,}, {0.978, 1, 0.978, 0.7092,}, 199.023, 1655.088,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {17062, 1094, 12701,}, {0.978, 1, 0.978, 0.7092,}, 187.982, 4107.176,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {15813, 1094, 15586,}, {0.978, 1, 0.978, 0.7092,}, 253.495, 3144.388,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {17291, 1094, 15405,}, {0.978, 1, 0.978, 0.7092,}, 263.427, 1746.487,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {16502, 1094, 13847,}, {0.978, 1, 0.978, 0.7092,}, 329.116, 1957.017,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {17092, 1094, 15713,}, {0.978, 1, 0.978, 0.7092,}, 286.895, 2888.428,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {16543, 1094, 18549,}, {0.978, 1, 0.978, 0.7092,}, 142.178, 2888.428,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {16001, 1094, 16697,}, {0.978, 1, 0.978, 0.7092,}, 18.93, 1928.913,},
	{"Nebula_Flake_11", "DustCloud_NoRes_M05", {16305, 1094, 16737,}, {0.978, 1, 0.978, 0.7092,}, 0.308, 4107.176,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {15715, 471, 7173,}, {0.8353, 0.8353, 0.8353, 1,}, 272.228, 2601.612,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {14768, 471, 5334,}, {0.8353, 0.8353, 0.8353, 1,}, 55.713, 2326.952,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {16962, 471, 4558,}, {0.8353, 0.8353, 0.8353, 1,}, 241.421, 2632.665,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {19451, 471, 3702,}, {0.8353, 0.8353, 0.8353, 1,}, 124.512, 3136.705,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {17358, 471, 6038,}, {0.8353, 0.8353, 0.8353, 1,}, 287.334, 3136.705,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {16344, 471, 4783,}, {0.8353, 0.8353, 0.8353, 1,}, 353.419, 1613.451,},
	{"Nebula_Flake_4", "DustCloud_NoRes_M05", {16036, 471, 4591,}, {0.8353, 0.8353, 0.8353, 1,}, 106.307, 2601.612,},
	{"Nebula_Flake_7", "DustCloud_NoRes_M05", {7336, 1493, -30903,}, {0.978, 1, 0.978, 0.7092,}, 314.768, 2984.858,},
	{"Nebula_Flake_7", "DustCloud_NoRes_M05", {7941, 1493, -33826,}, {0.978, 1, 0.978, 0.7092,}, 36.355, 2984.858,},
	{"Nebula_Flake_7", "DustCloud_NoRes_M05", {5321, 1493, -32718,}, {0.978, 1, 0.978, 0.7092,}, 51.484, 4669.16,},
	{"Nebula_Flake_7", "DustCloud_NoRes_M05", {9856, 1493, -31609,}, {0.978, 1, 0.978, 0.7092,}, 111.141, 4669.16,},
	{"Nebula_Flake_7", "DustCloud_NoRes_M05", {9151, 1493, -31659,}, {0.978, 1, 0.978, 0.7092,}, 292.981, 1960.259,},
	{"Nebula_Flake_7", "DustCloud_NoRes_M05", {7286, 1493, -31055,}, {0.978, 1, 0.978, 0.7092,}, 293.113, 1960.259,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {11197, 2538, 31197,}, {0.8353, 0.8353, 0.8353, 1,}, 323.239, 3539.981,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {9255, 2538, 28238,}, {0.8353, 0.8353, 0.8353, 1,}, 96.968, 4328.544,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {10848, 2538, 32262,}, {0.8353, 0.8353, 0.8353, 1,}, 82.576, 4328.544,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {11241, 2646, 32048,}, {0.8353, 0.8353, 0.8353, 1,}, 314.944, 4358.346,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {8859, 2646, 28652,}, {0.8353, 0.8353, 0.8353, 1,}, 304.122, 4147.556,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {9731, 2646, 29449,}, {0.8353, 0.8353, 0.8353, 1,}, 14.722, 1180.707,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {9725, 2646, 28776,}, {0.8353, 0.8353, 0.8353, 1,}, 66.151, 1148.865,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {10629, 2646, 29486,}, {0.8353, 0.8353, 0.8353, 1,}, 161.735, 1195.412,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {10026, 2646, 28453,}, {0.8353, 0.8353, 0.8353, 1,}, 322.008, 1195.412,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {9260, 2646, 28566,}, {0.8353, 0.8353, 0.8353, 1,}, 196.683, 774.925,},
	{"Nebula_Flake_3", "DustCloud_NoRes_M05", {9227, 2646, 28183,}, {0.8353, 0.8353, 0.8353, 1,}, 188.136, 4358.346,},
	{"Nebula_Flake_14", "DustCloud_NoRes_M05", {-4877, 1361, -22601,}, {0.978, 1, 0.978, 0.7092,}, 359.758, 2471.232,},
	{"Nebula_Flake_14", "DustCloud_NoRes_M05", {-3013, 1361, -22097,}, {0.978, 1, 0.978, 0.7092,}, 312.274, 1931.545,},
	{"Nebula_Flake_14", "DustCloud_NoRes_M05", {-3214, 1361, -21241,}, {0.978, 1, 0.978, 0.7092,}, 52.802, 1825.412,},
	{"Nebula_Flake_14", "DustCloud_NoRes_M05", {-5029, 1361, -21442,}, {0.978, 1, 0.978, 0.7092,}, 102.374, 3513.916,},
	{"Nebula_Flake_14", "DustCloud_NoRes_M05", {-5502, 2401, -24765,}, {0.978, 1, 0.978, 0.7092,}, 350.551, 3513.916,},
	{"Nebula_Flake_14", "DustCloud_NoRes_M05", {-5754, 2401, -24664,}, {0.978, 1, 0.978, 0.7092,}, 257.978, 2471.232,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-14257, 1591, -25275,}, {0.978, 1, 0.978, 0.7092,}, 232.214, 2400.627,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-13833, 1591, -25982,}, {0.978, 1, 0.978, 0.7092,}, 264.932, 2028.978,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-15860, 1591, -26076,}, {0.978, 1, 0.978, 0.7092,}, 44.87, 2028.978,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-15294, 1591, -24615,}, {0.978, 1, 0.978, 0.7092,}, 135.026, 1566.826,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-15530, 1591, -25416,}, {0.978, 1, 0.978, 0.7092,}, 329.556, 2080.873,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-13503, 1591, -24945,}, {0.978, 1, 0.978, 0.7092,}, 11.58, 2812.32,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-15671, 1591, -26736,}, {0.978, 1, 0.978, 0.7092,}, 161.592, 2812.32,},
	{"Nebula_Flake_18", "DustCloud_NoRes_M05", {-15907, 1591, -27019,}, {0.978, 1, 0.978, 0.7092,}, 82.301, 2400.627,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-15793, 1960, 12126,}, {0.8353, 0.8353, 0.8353, 1,}, 56.373, 518.856,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-16247, 1960, 12378,}, {0.8353, 0.8353, 0.8353, 1,}, 180.61, 1219.952,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-17003, 1960, 13336,}, {0.8353, 0.8353, 0.8353, 1,}, 271.612, 1622.869,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-16045, 1960, 14646,}, {0.8353, 0.8353, 0.8353, 1,}, 76.852, 1622.869,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-15239, 1960, 14948,}, {0.8353, 0.8353, 0.8353, 1,}, 277.622, 1009.173,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-14231, 1960, 14999,}, {0.8353, 0.8353, 0.8353, 1,}, 200.375, 1009.173,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-14836, 1960, 14243,}, {0.8353, 0.8353, 0.8353, 1,}, 306.726, 968.07,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-14332, 1960, 14192,}, {0.8353, 0.8353, 0.8353, 1,}, 194.013, 807.905,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-14382, 1960, 13386,}, {0.8353, 0.8353, 0.8353, 1,}, 312.966, 1197.893,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-15491, 1960, 13840,}, {0.8353, 0.8353, 0.8353, 1,}, 81.982, 2027.137,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-13828, 1960, 12680,}, {0.8353, 0.8353, 0.8353, 1,}, 133.576, 2027.137,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-14785, 1960, 11622,}, {0.8353, 0.8353, 0.8353, 1,}, 12.591, 1498.373,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-15894, 1960, 12630,}, {0.8353, 0.8353, 0.8353, 1,}, 143.233, 1498.373,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-13424, 2538, 13566,}, {0.8353, 0.8353, 0.8353, 1,}, 116.975, 3338.977,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-14283, 2538, 16792,}, {0.8353, 0.8353, 0.8353, 1,}, 72.534, 4814.861,},
	{"Nebula_Flake_1", "DustCloud_NoRes_M05", {-15949, 2538, 12275,}, {0.8353, 0.8353, 0.8353, 1,}, 45.023, 4814.861,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-1878, 2915, 28064,}, {0.978, 1, 0.978, 0.7092,}, 321.821, 2457.019,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-517, 2915, 27976,}, {0.978, 1, 0.978, 0.7092,}, 79.961, 2640.372,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-2766, 2915, 29359,}, {0.978, 1, 0.978, 0.7092,}, 201.627, 2640.372,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-3357, 2915, 29136,}, {0.978, 1, 0.978, 0.7092,}, 152.517, 1831.662,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-1525, 2915, 29135,}, {0.978, 1, 0.978, 0.7092,}, 311.087, 1848.226,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-957, 2915, 27376,}, {0.978, 1, 0.978, 0.7092,}, 96.265, 1848.226,},
	{"Nebula_Flake_10", "DustCloud_NoRes_M05", {-1136, 2915, 25722,}, {0.978, 1, 0.978, 0.7092,}, 245.398, 2457.019,},
	{"Nebula_Flake_6", "DustCloud_NoRes_M05", {-9204, 3792, -21963,}, {0.8353, 0.8353, 0.8353, 1,}, 345.179, 1593.654,},
	{"Nebula_Flake_6", "DustCloud_NoRes_M05", {-8296, 3792, -23273,}, {0.8353, 0.8353, 0.8353, 1,}, 283.764, 1912.384,},
	{"Nebula_Flake_6", "DustCloud_NoRes_M05", {-10111, 3792, -22669,}, {0.8353, 0.8353, 0.8353, 1,}, 294.618, 3030.876,},
	{"Nebula_Flake_6", "DustCloud_NoRes_M05", {-7893, 3792, -20602,}, {0.8353, 0.8353, 0.8353, 1,}, 48.88, 3030.876,},
	{"Nebula_Flake_6", "DustCloud_NoRes_M05", {-8448, 3792, -21913,}, {0.8353, 0.8353, 0.8353, 1,}, 7.229, 1645.404,},
	{"Nebula_Flake_6", "DustCloud_NoRes_M05", {-9909, 3792, -22669,}, {0.8353, 0.8353, 0.8353, 1,}, 269.393, 1645.404,},

	{"Nebula_7", "DustCloud_NoRes_M05", {20888, 5129, -8996,}, {0.978, 1, 0.978, 0.7092,}, 324.766, 1743.006,},
	{"Nebula_7", "DustCloud_NoRes_M05", {22258, 5094, -8896,}, {0.978, 1, 0.978, 0.7092,}, 276.446, 3029.961,},
	{"Nebula_7", "DustCloud_NoRes_M05", {23509, 4505, -6200,}, {0.978, 1, 0.978, 0.7092,}, 227.149, 3029.961,},
	{"Nebula_7", "DustCloud_NoRes_M05", {25444, 4215, -3924,}, {0.978, 1, 0.978, 0.7092,}, 245.673, 3002.026,},
	{"Nebula_7", "DustCloud_NoRes_M05", {27753, 5634, -2997,}, {0.978, 1, 0.978, 0.7092,}, 180.159, 2864.048,},
	{"Nebula_7", "DustCloud_NoRes_M05", {29222, 6435, -2538,}, {0.978, 1, 0.978, 0.7092,}, 95.738, 1734.849,},
	{"Nebula_7", "DustCloud_NoRes_M05", {30277, 6912, -2112,}, {0.978, 1, 0.978, 0.7092,}, 232.785, 1568.127,},
	{"Nebula_7", "DustCloud_NoRes_M05", {31377, 8016, -2285,}, {0.978, 1, 0.978, 0.7092,}, 94.903, 1568.127,},
	{"Nebula_7", "DustCloud_NoRes_M05", {30443, 7442, -2608,}, {0.978, 1, 0.978, 0.7092,}, 165.624, 1143.225,},
	{"Nebula_7", "DustCloud_NoRes_M05", {29713, 6794, -2767,}, {0.978, 1, 0.978, 0.7092,}, 126.577, 1465.245,},
	{"Nebula_7", "DustCloud_NoRes_M05", {28576, 6141, -3421,}, {0.978, 1, 0.978, 0.7092,}, 171.557, 2952.236,},
	{"Nebula_7", "DustCloud_NoRes_M05", {26102, 5314, -4803,}, {0.978, 1, 0.978, 0.7092,}, 145.398, 2952.236,},
	{"Nebula_7", "DustCloud_NoRes_M05", {24954, 5323, -6250,}, {0.978, 1, 0.978, 0.7092,}, 9.943, 6642.719,},
	{"Nebula_7", "DustCloud_NoRes_M05", {20650, 3776, -11067,}, {0.978, 1, 0.978, 0.7092,}, 214.866, 6642.719,},
	{"Nebula_7", "DustCloud_NoRes_M05", {19937, 3776, -10647,}, {0.978, 1, 0.978, 0.7092,}, 155.582, 1858.701,},
	{"Nebula_7", "DustCloud_NoRes_M05", {18811, 4229, -9240,}, {0.978, 1, 0.978, 0.7092,}, 137.872, 2369.337,},
	{"Nebula_7", "DustCloud_NoRes_M05", {20012, 5593, -7720,}, {0.978, 1, 0.978, 0.7092,}, 3.626, 2369.337,},
	{"Nebula_7", "DustCloud_NoRes_M05", {22228, 6022, -8329,}, {0.978, 1, 0.978, 0.7092,}, 311.472, 2337.763,},
	{"Nebula_1", "DustCloud_NoRes_M05", {16584, 3799, -20569,}, {0.978, 1, 0.978, 0.7092,}, 251.869, 1221.78,},
	{"Nebula_1", "DustCloud_NoRes_M05", {16183, 3415, -21657,}, {0.978, 1, 0.978, 0.7092,}, 216.844, 1221.78,},
	{"Nebula_1", "DustCloud_NoRes_M05", {15952, 4025, -21896,}, {0.978, 1, 0.978, 0.7092,}, 201.462, 933.387,},
	{"Nebula_1", "DustCloud_NoRes_M05", {15417, 4735, -22182,}, {0.978, 1, 0.978, 0.7092,}, 136.158, 933.387,},
	{"Nebula_1", "DustCloud_NoRes_M05", {15182, 4867, -22222,}, {0.978, 1, 0.978, 0.7092,}, 337.444, 954.089,},
	{"Nebula_1", "DustCloud_NoRes_M05", {14822, 4697, -23089,}, {0.978, 1, 0.978, 0.7092,}, 347.08, 1541.705,},
	{"Nebula_1", "DustCloud_NoRes_M05", {15926, 4498, -24147,}, {0.978, 1, 0.978, 0.7092,}, 210.23, 1699.719,},
	{"Nebula_1", "DustCloud_NoRes_M05", {15020, 4582, -25582,}, {0.978, 1, 0.978, 0.7092,}, 146.529, 1699.719,},
	{"Nebula_1", "DustCloud_NoRes_M05", {13965, 4632, -25979,}, {0.978, 1, 0.978, 0.7092,}, 179.489, 2118.216,},
	{"Nebula_1", "DustCloud_NoRes_M05", {13742, 4718, -28084,}, {0.978, 1, 0.978, 0.7092,}, 314.922, 2118.216,},
	{"Nebula_1", "DustCloud_NoRes_M05", {14335, 4772, -30091,}, {0.978, 1, 0.978, 0.7092,}, 281.346, 2179.82,},
	{"Nebula_1", "DustCloud_NoRes_M05", {12954, 4881, -31775,}, {0.978, 1, 0.978, 0.7092,}, 211.834, 2179.82,},
	{"Nebula_1", "DustCloud_NoRes_M05", {12983, 4823, -30232,}, {0.978, 1, 0.978, 0.7092,}, 100.55, 1543.987,},
	{"Nebula_1", "DustCloud_NoRes_M05", {13322, 4762, -28908,}, {0.978, 1, 0.978, 0.7092,}, 314.79, 2335.934,},
	{"Nebula_1", "DustCloud_NoRes_M05", {12694, 4700, -26659,}, {0.978, 1, 0.978, 0.7092,}, 108.504, 2335.934,},
	{"Nebula_1", "DustCloud_NoRes_M05", {13302, 4629, -25286,}, {0.978, 1, 0.978, 0.7092,}, 311.977, 1503.327,},
	{"Nebula_1", "DustCloud_NoRes_M05", {13532, 4610, -24995,}, {0.978, 1, 0.978, 0.7092,}, 68.656, 959.873,},
	{"Nebula_1", "DustCloud_NoRes_M05", {13178, 4453, -24117,}, {0.978, 1, 0.978, 0.7092,}, 320.525, 2246.425,},
	{"Nebula_1", "DustCloud_NoRes_M05", {14019, 4599, -22039,}, {0.978, 1, 0.978, 0.7092,}, 10.36, 2491.772,},
	{"Nebula_1", "DustCloud_NoRes_M05", {15903, 4325, -20431,}, {0.978, 1, 0.978, 0.7092,}, 21.325, 2491.772,},
	{"Nebula_1", "DustCloud_NoRes_M05", {16787, 4086, -19645,}, {0.978, 1, 0.978, 0.7092,}, 92.497, 1940.974,},
	{"Nebula_1", "DustCloud_NoRes_M05", {18166, 3116, -18683,}, {0.978, 1, 0.978, 0.7092,}, 41.804, 1952.196,},
	{"Nebula_1", "DustCloud_NoRes_M05", {19436, 1927, -17798,}, {0.978, 1, 0.978, 0.7092,}, 178.16, 1952.196,},
	{"Nebula_1", "DustCloud_NoRes_M05", {19039, 2436, -18295,}, {0.978, 1, 0.978, 0.7092,}, 17.743, 1241.418,},
	{"Nebula_1", "DustCloud_NoRes_M05", {18241, 3227, -18823,}, {0.978, 1, 0.978, 0.7092,}, 121.556, 1562.307,},
	{"Nebula_1", "DustCloud_NoRes_M05", {17155, 3756, -19813,}, {0.978, 1, 0.978, 0.7092,}, 185.598, 1562.307,},
}

Pebbles =
{
	{"Pebble_0", {17421, 1282, -20076,}, 0, 0, 0,},
	{"Pebble_0", {16858, 2993, -7537,}, 0, 0, 0,},
	{"Pebble_0", {56821, 11274, -7374,}, 0, 0, 0,},
	{"Pebble_0", {40275, 10567, -4808,}, 0, 0, 0,},
	{"Pebble_0", {20941, 5759, -8461,}, 0, 0, 0,},
	-- mark
	{"Pebble_0", {38325, 9404, -5422,}, 0, 0, 0,},
	{"Pebble_0", {16874, 685, -19183,}, 0, 0, 0,},
	{"Pebble_0", {19971, 6224, -2995,}, 0, 0, 0,},
	{"Pebble_0", {16553, 1340, -19922,}, 0, 0, 0,},
	{"Pebble_0", {13305, 1928, -13408,}, 0, 0, 0,},
	{"Pebble_0", {49354, 11027, -6365,}, 0, 0, 0,},
	{"Pebble_0", {39864, 8124, -4274,}, 0, 0, 0,},
	{"Pebble_0", {37577, 9833, -5688,}, 0, 0, 0,},
	{"Pebble_0", {20125, 579, -6375,}, 0, 0, 0,},
	{"Pebble_0", {21043, 7901, -10668,}, 0, 0, 0,},
	{"Pebble_0", {58701, 12517, -5463,}, 0, 0, 0,},
	{"Pebble_0", {32788, 3142, -7094,}, 0, 0, 0,},
	{"Pebble_0", {21046, 1305, -5907,}, 0, 0, 0,},
	{"Pebble_0", {18537, 4569, -9873,}, 0, 0, 0,},
	{"Pebble_0", {23323, 9224, -8289,}, 0, 0, 0,},
	{"Pebble_0", {17134, 1676, -20420,}, 0, 0, 0,},
	{"Pebble_0", {57753, 12590, -3433,}, 0, 0, 0,},
	{"Pebble_0", {16359, 629, -17633,}, 0, 0, 0,},
	{"Pebble_0", {16647, 1427, -15509,}, 0, 0, 0,},
	{"Pebble_0", {56664, 11949, -6069,}, 0, 0, 0,},
	{"Pebble_0", {23574, 7034, -3969,}, 0, 0, 0,},
	{"Pebble_0", {16557, 4702, -8215,}, 0, 0, 0,},
	{"Pebble_0", {60790, 11793, -6351,}, 0, 0, 0,},
	{"Pebble_0", {17740, 1455, -20635,}, 0, 0, 0,},
	{"Pebble_0", {35079, 11153, -7135,}, 0, 0, 0,},
	{"Pebble_0", {15152, 1811, -18296,}, 0, 0, 0,},
	{"Pebble_0", {19493, 2730, -8480,}, 0, 0, 0,},
	{"Pebble_0", {55367, 11465, -7140,}, 0, 0, 0,},
	{"Pebble_0", {37876, 5935, -4988,}, 0, 0, 0,},
	{"Pebble_0", {38281, 10305, -4959,}, 0, 0, 0,},
	{"Pebble_0", {16261, 2331, -9886,}, 0, 0, 0,},
	{"Pebble_0", {44650, 12197, -8932,}, 0, 0, 0,},
	{"Pebble_0", {32028, 3505, -7678,}, 0, 0, 0,},
	{"Pebble_0", {15792, 1358, -15178,}, 0, 0, 0,},
	{"Pebble_0", {16928, 1352, -20192,}, 0, 0, 0,},
	{"Pebble_0", {53559, 11881, -6145,}, 0, 0, 0,},
	{"Pebble_0", {17799, 133, -8270,}, 0, 0, 0,},
	{"Pebble_0", {15528, 2274, -17174,}, 0, 0, 0,},
	{"Pebble_0", {20979, 5998, -3584,}, 0, 0, 0,},
	{"Pebble_0", {17817, 1375, -12010,}, 0, 0, 0,},
	{"Pebble_0", {32385, 9351, -8872,}, 0, 0, 0,},
	{"Pebble_0", {37733, 9541, -4995,}, 0, 0, 0,},
	{"Pebble_0", {17741, 4495, -8977,}, 0, 0, 0,},
	{"Pebble_0", {14908, -73, -15194,}, 0, 0, 0,},
	-- mark
	{"Pebble_0", {34658, 6751, -6324,}, 0, 0, 0,},
	{"Pebble_0", {29509, 5695, -3801,}, 0, 0, 0,},
	{"Pebble_0", {19352, 7429, -6320,}, 0, 0, 0,},
	{"Pebble_0", {39312, 6189, -8448,}, 0, 0, 0,},
	{"Pebble_0", {23177, 3238, -3092,}, 0, 0, 0,},
	{"Pebble_0", {31250, 8929, -6880,}, 0, 0, 0,},
	{"Pebble_0", {37196, 7200, -4099,}, 0, 0, 0,},
	{"Pebble_0", {43989, 10711, -7523,}, 0, 0, 0,},
	{"Pebble_0", {54842, 11374, -7262,}, 0, 0, 0,},
	{"Pebble_0", {37082, 7610, -8732,}, 0, 0, 0,},
	{"Pebble_0", {16410, 746, -16520,}, 0, 0, 0,},
	{"Pebble_0", {45325, 11391, -6076,}, 0, 0, 0,},
	{"Pebble_0", {42853, 9057, -4949,}, 0, 0, 0,},
	{"Pebble_0", {13571, 2090, -13054,}, 0, 0, 0,},
	{"Pebble_0", {44958, 11703, -6047,}, 0, 0, 0,},
	{"Pebble_0", {42198, 8220, -5646,}, 0, 0, 0,},
	{"Pebble_0", {15827, 2803, -8898,}, 0, 0, 0,},
	{"Pebble_0", {17030, 1062, -20421,}, 0, 0, 0,},
	{"Pebble_0", {47410, 12160, -9070,}, 0, 0, 0,},

	{"Pebble_0", {20802, 34, 17431,}, 0, 0, 0,},
	{"Pebble_0", {16090, 5300, 1176,}, 0, 0, 0,},
	{"Pebble_0", {17708, 146, 12905,}, 0, 0, 0,},
	{"Pebble_0", {14921, 3062, 9074,}, 0, 0, 0,},
	{"Pebble_0", {20089, 1633, 17143,}, 0, 0, 0,},
	{"Pebble_0", {22543, 918, 18805,}, 0, 0, 0,},
	{"Pebble_0", {21550, 1018, 18903,}, 0, 0, 0,},
	{"Pebble_0", {17308, -307, 12673,}, 0, 0, 0,},
	{"Pebble_0", {13475, 2857, 8661,}, 0, 0, 0,},
	{"Pebble_0", {15736, 4286, -2271,}, 0, 0, 0,},
	{"Pebble_0", {16602, 5109, 869,}, 0, 0, 0,},
	{"Pebble_0", {16411, 914, 9438,}, 0, 0, 0,},
	{"Pebble_0", {13700, 362, 5176,}, 0, 0, 0,},
	{"Pebble_0", {19426, 5191, -4857,}, 0, 0, 0,},
	{"Pebble_0", {18497, 4787, -7206,}, 0, 0, 0,},
	{"Pebble_0", {14172, 722, 3642,}, 0, 0, 0,},
	{"Pebble_0", {19874, 6794, -6786,}, 0, 0, 0,},
	{"Pebble_0", {20492, 1255, 18108,}, 0, 0, 0,},
	{"Pebble_0", {16109, 1167, 12412,}, 0, 0, 0,},
	{"Pebble_0", {20044, 2085, 16661,}, 0, 0, 0,},
	{"Pebble_0", {16028, 3641, 2696,}, 0, 0, 0,},
	{"Pebble_0", {22139, 1047, 17940,}, 0, 0, 0,},
	{"Pebble_0", {19343, 3337, -3992,}, 0, 0, 0,},
	{"Pebble_0", {17469, 1338, 11156,}, 0, 0, 0,},
	{"Pebble_0", {19165, 305, 14241,}, 0, 0, 0,},
	{"Pebble_0", {15301, 3621, 2917,}, 0, 0, 0,},
	{"Pebble_0", {21995, 6577, -7005,}, 0, 0, 0,},
	{"Pebble_0", {20973, 6259, -4100,}, 0, 0, 0,},
	{"Pebble_0", {21278, 6182, -2232,}, 0, 0, 0,},
	{"Pebble_0", {21411, 6085, -3448,}, 0, 0, 0,},
	{"Pebble_0", {12952, 302, 5790,}, 0, 0, 0,},
	{"Pebble_0", {13276, 3305, 1716,}, 0, 0, 0,},
	{"Pebble_0", {20942, 3036, -2164,}, 0, 0, 0,},
	{"Pebble_0", {12956, -400, 5872,}, 0, 0, 0,},
	{"Pebble_0", {12496, 1575, 8479,}, 0, 0, 0,},
	{"Pebble_0", {17109, 3156, -6297,}, 0, 0, 0,},
	{"Pebble_0", {21403, 4854, -6681,}, 0, 0, 0,},
	{"Pebble_0", {15787, 1085, 11780,}, 0, 0, 0,},
	{"Pebble_0", {15983, 1720, 10150,}, 0, 0, 0,},

	{"Pebble_0", {-15286, 2870, 8851,}, 0, 0, 0,},
	{"Pebble_0", {-16786, -736, 3998,}, 0, 0, 0,},
	{"Pebble_0", {-14308, 2447, 8497,}, 0, 0, 0,},
	{"Pebble_0", {-16090, 659, 10321,}, 0, 0, 0,},
	{"Pebble_0", {-15937, 2496, 3663,}, 0, 0, 0,},
	{"Pebble_0", {-15813, 5033, 13340,}, 0, 0, 0,},
	{"Pebble_0", {-15049, 3668, 14279,}, 0, 0, 0,},
	{"Pebble_0", {-13744, 1595, 11396,}, 0, 0, 0,},
	{"Pebble_0", {-16441, 1524, 6331,}, 0, 0, 0,},
	{"Pebble_0", {-13263, 17, 6815,}, 0, 0, 0,},
	{"Pebble_0", {-17064, -603, 8269,}, 0, 0, 0,},
	{"Pebble_0", {-16592, 1897, 2888,}, 0, 0, 0,},
	{"Pebble_0", {-18382, 2354, 5487,}, 0, 0, 0,},
	{"Pebble_0", {-14764, 2235, 8912,}, 0, 0, 0,},
	{"Pebble_0", {-14742, 2706, 12741,}, 0, 0, 0,},
	{"Pebble_0", {-21715, -2054, 24,}, 0, 0, 0,},
	{"Pebble_0", {-16184, 2844, 12548,}, 0, 0, 0,},
	{"Pebble_0", {-16516, 49, 5959,}, 0, 0, 0,},
	{"Pebble_0", {-15156, 2722, 13638,}, 0, 0, 0,},
	{"Pebble_0", {-18136, 2784, 4708,}, 0, 0, 0,},
	{"Pebble_0", {-20337, -3542, -453,}, 0, 0, 0,},
	{"Pebble_0", {-15166, 2863, 11641,}, 0, 0, 0,},
	{"Pebble_0", {-15588, 2821, 10289,}, 0, 0, 0,},
	{"Pebble_0", {-16735, -667, 8525,}, 0, 0, 0,},
	{"Pebble_0", {-16309, 788, 4730,}, 0, 0, 0,},
	{"Pebble_0", {-18138, 508, 5210,}, 0, 0, 0,},
	{"Pebble_0", {-14483, 2146, 6312,}, 0, 0, 0,},
	{"Pebble_0", {-15417, -698, 9031,}, 0, 0, 0,},
	{"Pebble_0", {-14403, -347, 7039,}, 0, 0, 0,},
	{"Pebble_0", {-17642, -1448, 6464,}, 0, 0, 0,},
	{"Pebble_0", {-20185, 37, 5909,}, 0, 0, 0,},
	{"Pebble_0", {-13553, 2037, 6532,}, 0, 0, 0,},
	{"Pebble_0", {-15556, 2816, 5339,}, 0, 0, 0,},
	{"Pebble_0", {-14878, -661, 9755,}, 0, 0, 0,},
	{"Pebble_0", {-13382, 796, 7171,}, 0, 0, 0,},
	{"Pebble_0", {-14885, 244, 6992,}, 0, 0, 0,},
	{"Pebble_0", {-19071, 635, 4919,}, 0, 0, 0,},
	{"Pebble_0", {-13638, 1149, 11037,}, 0, 0, 0,},
	{"Pebble_0", {-19138, 1463, 6251,}, 0, 0, 0,},
	{"Pebble_0", {-17305, -3316, 4829,}, 0, 0, 0,},
	{"Pebble_0", {-14533, 3343, 9948,}, 0, 0, 0,},
	{"Pebble_0", {-14688, 1652, 10568,}, 0, 0, 0,},
	{"Pebble_0", {-16767, 2116, 6936,}, 0, 0, 0,},
	{"Pebble_0", {-15081, 2451, 6138,}, 0, 0, 0,},
	{"Pebble_0", {-16188, -26, 7394,}, 0, 0, 0,},
	{"Pebble_0", {-13938, 3120, 9870,}, 0, 0, 0,},
	{"Pebble_0", {-13115, 715, 6324,}, 0, 0, 0,},
	{"Pebble_0", {-14935, -1971, 6558,}, 0, 0, 0,},
	{"Pebble_0", {-15151, 2685, 13791,}, 0, 0, 0,},
	{"Pebble_0", {-18544, -1947, 4733,}, 0, 0, 0,},
	{"Pebble_0", {-19457, -4432, 5909,}, 0, 0, 0,},
	{"Pebble_0", {-18231, -2312, 1289,}, 0, 0, 0,},
	{"Pebble_0", {-21926, 599, 4591,}, 0, 0, 0,},
	{"Pebble_0", {-14364, 3001, 10201,}, 0, 0, 0,},
	{"Pebble_0", {-15944, -2464, 5293,}, 0, 0, 0,},
	{"Pebble_0", {-16368, 2683, 5648,}, 0, 0, 0,},
	{"Pebble_0", {-15331, 2307, 12740,}, 0, 0, 0,},
	{"Pebble_0", {-13632, 2807, 9388,}, 0, 0, 0,},
	{"Pebble_0", {-16520, -856, 3964,}, 0, 0, 0,},
	{"Pebble_0", {-13870, 1580, 7216,}, 0, 0, 0,},
	{"Pebble_0", {-16393, 1622, 5415,}, 0, 0, 0,},
	{"Pebble_0", {-16362, 1428, 8493,}, 0, 0, 0,},
	{"Pebble_0", {-13270, -1036, 6738,}, 0, 0, 0,},
	{"Pebble_0", {-19726, -3617, 5285,}, 0, 0, 0,},
	{"Pebble_0", {-15191, 4823, 13196,}, 0, 0, 0,},
	{"Pebble_0", {-15052, 1760, 12719,}, 0, 0, 0,},
	{"Pebble_0", {-17944, -2586, 2922,}, 0, 0, 0,},
	{"Pebble_0", {-15149, 4972, 13620,}, 0, 0, 0,},
	{"Pebble_0", {-18077, 197, 2697,}, 0, 0, 0,},
	{"Pebble_0", {-14208, 3341, 13123,}, 0, 0, 0,},
	{"Pebble_0", {-23225, 1108, 3221,}, 0, 0, 0,},
	{"Pebble_0", {-14260, 1943, 12138,}, 0, 0, 0,},
	{"Pebble_0", {-16389, 4129, 13760,}, 0, 0, 0,},
	{"Pebble_0", {-14392, 3432, 10808,}, 0, 0, 0,},
	{"Pebble_0", {-14622, 2322, 7303,}, 0, 0, 0,},
	{"Pebble_0", {-15329, -1396, 4586,}, 0, 0, 0,},
	{"Pebble_0", {-21893, -4731, 1991,}, 0, 0, 0,},
	{"Pebble_0", {-15200, 3221, 13780,}, 0, 0, 0,},
	{"Pebble_0", {-14549, 3605, 13197,}, 0, 0, 0,},
	{"Pebble_0", {-20424, -1008, 1673,}, 0, 0, 0,},
	{"Pebble_0", {-13550, 165, 5388,}, 0, 0, 0,},
	{"Pebble_0", {-16100, -1902, 1668,}, 0, 0, 0,},
	{"Pebble_0", {-16718, -738, 3421,}, 0, 0, 0,},
	{"Pebble_0", {-14434, 2681, 11092,}, 0, 0, 0,},
	{"Pebble_0", {-14794, 3561, 10644,}, 0, 0, 0,},
	{"Pebble_0", {-21585, -5720, 6014,}, 0, 0, 0,},
	{"Pebble_0", {-13800, -336, 9837,}, 0, 0, 0,},
	{"Pebble_0", {-13348, -1097, 5330,}, 0, 0, 0,},
	{"Pebble_0", {-13668, 277, 8696,}, 0, 0, 0,},
	{"Pebble_0", {-14029, 3, 6522,}, 0, 0, 0,},
	{"Pebble_0", {-16020, -1036, 6636,}, 0, 0, 0,},
	{"Pebble_0", {-21496, -879, 4179,}, 0, 0, 0,},
	{"Pebble_0", {-17078, -656, 1046,}, 0, 0, 0,},
	{"Pebble_0", {-14121, 1874, 8474,}, 0, 0, 0,},
	{"Pebble_0", {-19215, -955, 6766,}, 0, 0, 0,},
	{"Pebble_0", {-16182, 1809, 7906,}, 0, 0, 0,},
	{"Pebble_0", {-16371, -2515, 4545,}, 0, 0, 0,},
	{"Pebble_0", {-13021, 1312, 7333,}, 0, 0, 0,},
	{"Pebble_0", {-18112, 1711, 4920,}, 0, 0, 0,},
	{"Pebble_0", {-13544, 2873, 11909,}, 0, 0, 0,},
	{"Pebble_0", {-17313, 1165, -3552,}, 0, 0, 0,},
	{"Pebble_0", {-41185, -9329, 4891,}, 0, 0, 0,},
	{"Pebble_0", {-28109, -3919, 4815,}, 0, 0, 0,},
	{"Pebble_0", {-14715, -1960, -1817,}, 0, 0, 0,},
	{"Pebble_0", {-18522, 859, -3178,}, 0, 0, 0,},
	{"Pebble_0", {-14712, 244, -4470,}, 0, 0, 0,},
	{"Pebble_0", {-26818, -4256, 4224,}, 0, 0, 0,},
	{"Pebble_0", {-12540, -1691, -5218,}, 0, 0, 0,},
	{"Pebble_0", {-16771, 879, -3689,}, 0, 0, 0,},
	{"Pebble_0", {-47477, -9077, 6242,}, 0, 0, 0,},
	{"Pebble_0", {-29641, -5458, 6114,}, 0, 0, 0,},
	{"Pebble_0", {-17815, -3029, -1186,}, 0, 0, 0,},
	{"Pebble_0", {-41729, -9003, 5010,}, 0, 0, 0,},
	{"Pebble_0", {-40321, -8039, 2593,}, 0, 0, 0,},
	{"Pebble_0", {-44126, -8995, 5789,}, 0, 0, 0,},
	{"Pebble_0", {-13169, 0, -2846,}, 0, 0, 0,},
	{"Pebble_0", {-40135, -8979, 5220,}, 0, 0, 0,},
	{"Pebble_0", {-13230, 2409, -3783,}, 0, 0, 0,},
	{"Pebble_0", {-14298, -1898, -5762,}, 0, 0, 0,},
	{"Pebble_0", {-11473, 3697, -7460,}, 0, 0, 0,},
	{"Pebble_0", {-34393, -7301, 3952,}, 0, 0, 0,},
	{"Pebble_0", {-14352, 1769, -11533,}, 0, 0, 0,},
	{"Pebble_0", {-39904, -9036, 4826,}, 0, 0, 0,},
	{"Pebble_0", {-15184, 7964, -11449,}, 0, 0, 0,},
	{"Pebble_0", {-16411, 415, -7855,}, 0, 0, 0,},
	{"Pebble_0", {-11563, 4437, -14935,}, 0, 0, 0,},
	{"Pebble_0", {-22042, -2879, 3468,}, 0, 0, 0,},
	{"Pebble_0", {-20060, -2758, -371,}, 0, 0, 0,},
	{"Pebble_0", {-15548, 994, -5293,}, 0, 0, 0,},
	{"Pebble_0", {-31056, -5385, 3758,}, 0, 0, 0,},
	{"Pebble_0", {-35799, -7501, 4559,}, 0, 0, 0,},
	{"Pebble_0", {-29194, -6067, 5742,}, 0, 0, 0,},
	{"Pebble_0", {-39181, -8674, 5091,}, 0, 0, 0,},
	{"Pebble_0", {-25192, -4990, 3226,}, 0, 0, 0,},
	{"Pebble_0", {-21858, -1301, 3385,}, 0, 0, 0,},
	{"Pebble_0", {-29907, -6699, 2866,}, 0, 0, 0,},
	{"Pebble_0", {-28809, -4205, 3590,}, 0, 0, 0,},
	{"Pebble_0", {-14529, 2449, -9869,}, 0, 0, 0,},
	{"Pebble_0", {-15112, 785, -14180,}, 0, 0, 0,},
	{"Pebble_0", {-23663, -3758, 3682,}, 0, 0, 0,},
	{"Pebble_0", {-14142, 7538, -12232,}, 0, 0, 0,},
	{"Pebble_0", {-13909, -1908, -8197,}, 0, 0, 0,},
	{"Pebble_0", {-16007, 288, -11174,}, 0, 0, 0,},
	{"Pebble_0", {-13208, 7551, -10621,}, 0, 0, 0,},
	{"Pebble_0", {-14165, 1062, -2287,}, 0, 0, 0,},
	{"Pebble_0", {-13216, 1437, -17215,}, 0, 0, 0,},
	{"Pebble_0", {-35973, -7880, 3655,}, 0, 0, 0,},
	{"Pebble_0", {-15340, 3472, -17022,}, 0, 0, 0,},
	{"Pebble_0", {-13911, 4134, -15503,}, 0, 0, 0,},
	{"Pebble_0", {-13220, 3859, -15781,}, 0, 0, 0,},
	{"Pebble_0", {-35551, -7267, 4384,}, 0, 0, 0,},
	{"Pebble_0", {-14343, 2145, -5976,}, 0, 0, 0,},
	{"Pebble_0", {-39899, -8950, 4976,}, 0, 0, 0,},
	{"Pebble_0", {-21936, -2597, 3404,}, 0, 0, 0,},
	{"Pebble_0", {-12222, 2065, -4723,}, 0, 0, 0,},
	{"Pebble_0", {-14706, 413, -14156,}, 0, 0, 0,},
	{"Pebble_0", {-30076, -4735, 4234,}, 0, 0, 0,},
	{"Pebble_0", {-15757, 8532, -12324,}, 0, 0, 0,},
	{"Pebble_0", {-26320, -4761, 2212,}, 0, 0, 0,},
	{"Pebble_0", {-29428, -5674, 4131,}, 0, 0, 0,},
	{"Pebble_0", {-14480, 3248, -12789,}, 0, 0, 0,},
	{"Pebble_0", {-15671, -521, -9881,}, 0, 0, 0,},
	{"Pebble_0", {-12515, 225, -2622,}, 0, 0, 0,},
	{"Pebble_0", {-24157, -1285, 1715,}, 0, 0, 0,},
	{"Pebble_0", {-23169, -3301, 3238,}, 0, 0, 0,},
	{"Pebble_0", {-46220, -9139, 6399,}, 0, 0, 0,},
	{"Pebble_0", {-28266, -5132, 4387,}, 0, 0, 0,},
	{"Pebble_0", {-15469, 1839, -17639,}, 0, 0, 0,},
	{"Pebble_0", {-33472, -6835, 4317,}, 0, 0, 0,},
	{"Pebble_0", {-26836, -5216, 2583,}, 0, 0, 0,},
	{"Pebble_0", {-24322, -3214, 1346,}, 0, 0, 0,},
	{"Pebble_0", {-43737, -9050, 5374,}, 0, 0, 0,},
	{"Pebble_0", {-21237, -1705, 1037,}, 0, 0, 0,},
	{"Pebble_0", {-16042, 3390, -13450,}, 0, 0, 0,},
	{"Pebble_0", {-11883, 4323, -15706,}, 0, 0, 0,},
	{"Pebble_0", {-17408, 1414, -742,}, 0, 0, 0,},
	{"Pebble_0", {-16921, 8142, -13379,}, 0, 0, 0,},
	{"Pebble_0", {-18745, 1551, -1044,}, 0, 0, 0,},
	{"Pebble_0", {-16916, 1191, -5421,}, 0, 0, 0,},
	{"Pebble_0", {-37650, -8557, 4843,}, 0, 0, 0,},
	{"Pebble_0", {-44752, -9399, 5602,}, 0, 0, 0,},
	{"Pebble_0", {-13581, -2579, -6179,}, 0, 0, 0,},
	{"Pebble_0", {-30118, -6540, 2758,}, 0, 0, 0,},
	{"Pebble_0", {-19565, 415, 711,}, 0, 0, 0,},
	{"Pebble_0", {-15682, 2158, -14198,}, 0, 0, 0,},
	{"Pebble_0", {-20790, 418, 1318,}, 0, 0, 0,},
	{"Pebble_0", {-11006, 4763, -13846,}, 0, 0, 0,},
	{"Pebble_0", {-42991, -9131, 5428,}, 0, 0, 0,},
	{"Pebble_0", {-15716, 5437, -9452,}, 0, 0, 0,},
	{"Pebble_0", {-12649, 129, -13249,}, 0, 0, 0,},
	{"Pebble_0", {-19587, -3004, -851,}, 0, 0, 0,},
	{"Pebble_0", {-14574, 2410, -10548,}, 0, 0, 0,},
	{"Pebble_0", {-51106, -8791, 6667,}, 0, 0, 0,},
	{"Pebble_0", {-32663, -5976, 4578,}, 0, 0, 0,},
	{"Pebble_0", {-29140, -4982, 3737,}, 0, 0, 0,},
	{"Pebble_0", {-19293, -932, 22,}, 0, 0, 0,},
	{"Pebble_0", {-27862, -3863, 3830,}, 0, 0, 0,},
	{"Pebble_0", {-13853, -762, -2155,}, 0, 0, 0,},
	{"Pebble_0", {-29179, -5022, 4000,}, 0, 0, 0,},
	{"Pebble_0", {-41738, -9001, 4922,}, 0, 0, 0,},
	{"Pebble_0", {-16174, -110, -6818,}, 0, 0, 0,},
	{"Pebble_0", {-35896, -6519, 6156,}, 0, 0, 0,},
	{"Pebble_0", {-18073, -2070, -1091,}, 0, 0, 0,},
	{"Pebble_0", {-19801, -2197, -581,}, 0, 0, 0,},
	{"Pebble_0", {-11865, 4126, -6453,}, 0, 0, 0,},
	{"Pebble_0", {-32991, -7264, 4472,}, 0, 0, 0,},
	{"Pebble_0", {-24621, -4327, 1798,}, 0, 0, 0,},
	{"Pebble_0", {-27177, -5529, 4263,}, 0, 0, 0,},
	{"Pebble_0", {-45842, -9031, 6853,}, 0, 0, 0,},
	{"Pebble_0", {-31523, -6784, 4156,}, 0, 0, 0,},
	{"Pebble_0", {-15609, -773, -7725,}, 0, 0, 0,},
	{"Pebble_0", {-25313, -3008, 1412,}, 0, 0, 0,},
	{"Pebble_0", {-30382, -6318, 2822,}, 0, 0, 0,},
	{"Pebble_0", {-14763, 4884, -16563,}, 0, 0, 0,},
	{"Pebble_0", {-26088, -4523, 2092,}, 0, 0, 0,},

	{"Pebble_0", {-5255, 1141, -35550,}, 0, 0, 0,},
	{"Pebble_0", {-3977, 11, -42413,}, 0, 0, 0,},
	{"Pebble_0", {-5085, -2403, -24332,}, 0, 0, 0,},
	{"Pebble_0", {-5828, 1730, -57093,}, 0, 0, 0,},
	{"Pebble_0", {-8865, -225, -47600,}, 0, 0, 0,},
	{"Pebble_0", {-5344, 729, -62613,}, 0, 0, 0,},
	{"Pebble_0", {-4757, 1004, -65280,}, 0, 0, 0,},
	{"Pebble_0", {-7362, 736, -67807,}, 0, 0, 0,},
	{"Pebble_0", {-6262, 1356, -70297,}, 0, 0, 0,},
	{"Pebble_0", {-6834, -376, -72503,}, 0, 0, 0,},
	{"Pebble_0", {-4781, 1267, -74788,}, 0, 0, 0,},
	{"Pebble_0", {-5433, -699, -76796,}, 0, 0, 0,},
	{"Pebble_0", {-7034, 94, -79095,}, 0, 0, 0,},
	{"Pebble_0", {-6222, -666, -80941,}, 0, 0, 0,},
	{"Pebble_0", {-5664, 1644, -82972,}, 0, 0, 0,},
	{"Pebble_0", {-4271, 60, -84427,}, 0, 0, 0,},
	{"Pebble_0", {-2429, -1973, -87232,}, 0, 0, 0,},
	{"Pebble_0", {-3753, -715, -89250,}, 0, 0, 0,},
	{"Pebble_0", {-5304, -2435, -91166,}, 0, 0, 0,},
	{"Pebble_0", {-4181, -2782, -92332,}, 0, 0, 0,},
	{"Pebble_0", {-213, -3652, -119167,}, 0, 0, 0,},
	{"Pebble_0", {831, 458, -104893,}, 0, 0, 0,},
	{"Pebble_0", {-446, -1235, -97687,}, 0, 0, 0,},

	{"Pebble_0", {135, -4412, -98406,}, 0, 0, 0,},
	{"Pebble_0", {102, -925, -100031,}, 0, 0, 0,},
	{"Pebble_0", {2374, -4623, -99163,}, 0, 0, 0,},
	{"Pebble_0", {621, -3300, -102312,}, 0, 0, 0,},
	{"Pebble_0", {-1540, -1854, -127181,}, 0, 0, 0,},
	{"Pebble_0", {192, -606, -118123,}, 0, 0, 0,},
	{"Pebble_0", {5733, 3518, -148393,}, 0, 0, 0,},
	{"Pebble_0", {-3388, 249, -98232,}, 0, 0, 0,},
	{"Pebble_0", {7080, -1509, -99452,}, 0, 0, 0,},
	{"Pebble_0", {7478, -3762, -102590,}, 0, 0, 0,},
	{"Pebble_0", {-1802, -1087, -110273,}, 0, 0, 0,},
	{"Pebble_0", {8849, 170, -104166,}, 0, 0, 0,},
	{"Pebble_0", {10433, -1792, -102996,}, 0, 0, 0,},
	{"Pebble_0", {2306, 3936, -131946,}, 0, 0, 0,},
	{"Pebble_0", {1610, 1315, -123660,}, 0, 0, 0,},
	{"Pebble_0", {11226, -1261, -106632,}, 0, 0, 0,},
	{"Pebble_0", {11119, -1976, -108037,}, 0, 0, 0,},
	{"Pebble_0", {12510, -1208, -107831,}, 0, 0, 0,},
	{"Pebble_0", {11944, -3220, -109253,}, 0, 0, 0,},
	{"Pebble_0", {14616, -3993, -107503,}, 0, 0, 0,},
	{"Pebble_0", {7091, -603, -132075,}, 0, 0, 0,},
	{"Pebble_0", {13520, -6068, -110254,}, 0, 0, 0,},
	{"Pebble_0", {15544, -6360, -109792,}, 0, 0, 0,},
	{"Pebble_0", {16122, -6889, -110439,}, 0, 0, 0,},
	{"Pebble_0", {-200, 1112, -138904,}, 0, 0, 0,},
	{"Pebble_0", {15074, -5680, -113478,}, 0, 0, 0,},
	{"Pebble_0", {14722, -5327, -114754,}, 0, 0, 0,},
	{"Pebble_0", {15865, -4158, -115806,}, 0, 0, 0,},
	{"Pebble_0", {1548, 4741, -165715,}, 0, 0, 0,},
	{"Pebble_0", {19010, -3444, -117678,}, 0, 0, 0,},
	{"Pebble_0", {18008, -3695, -119095,}, 0, 0, 0,},
	{"Pebble_0", {16582, -5293, -120188,}, 0, 0, 0,},
	{"Pebble_0", {18622, -4077, -121572,}, 0, 0, 0,},
	{"Pebble_0", {20314, -5999, -122342,}, 0, 0, 0,},
	{"Pebble_0", {16756, -5397, -134314,}, 0, 0, 0,},
	{"Pebble_0", {16498, -5968, -125455,}, 0, 0, 0,},
	{"Pebble_0", {18378, -8394, -132702,}, 0, 0, 0,},
	{"Pebble_0", {18217, -9332, -127648,}, 0, 0, 0,},
	{"Pebble_0", {17711, -6573, -140314,}, 0, 0, 0,},
	{"Pebble_0", {22564, -5334, -146569,}, 0, 0, 0,},
	{"Pebble_0", {21852, -4326, -156249,}, 0, 0, 0,},
	{"Pebble_0", {20344, -6332, -151430,}, 0, 0, 0,},
	{"Pebble_0", {19547, -5841, -154913,}, 0, 0, 0,},
	{"Pebble_0", {19320, -8733, -137274,}, 0, 0, 0,},
	{"Pebble_0", {18422, -8444, -151183,}, 0, 0, 0,},
	{"Pebble_0", {20027, -7768, -158012,}, 0, 0, 0,},
	{"Pebble_0", {20717, -6381, -162764,}, 0, 0, 0,},
	{"Pebble_0", {18622, -5218, -171675,}, 0, 0, 0,},
	{"Pebble_0", {21030, -7011, -162713,}, 0, 0, 0,},

	{"Pebble_0", {-7631, 336, 62334,}, 0, 0, 0,},
	{"Pebble_0", {-5755, 823, 52126,}, 0, 0, 0,},
	{"Pebble_0", {-9606, -1139, 65177,}, 0, 0, 0,},
	{"Pebble_0", {-7079, 1133, 42922,}, 0, 0, 0,},
	{"Pebble_0", {-7942, 465, 31138,}, 0, 0, 0,},
	{"Pebble_0", {-12714, 5067, 19118,}, 0, 0, 0,},
	{"Pebble_0", {-13903, 2064, 16642,}, 0, 0, 0,},
	{"Pebble_0", {-16329, 3692, 12821,}, 0, 0, 0,},
	{"Pebble_0", {-19545, 2746, 1616,}, 0, 0, 0,},
	{"Pebble_0", {-20090, 4995, 177,}, 0, 0, 0,},

	{"Pebble_0", {-18632, 1581, -1984,}, 0, 0, 0,},
	{"Pebble_0", {-17676, 6783, -3270,}, 0, 0, 0,},
	{"Pebble_0", {-17066, 1233, -5133,}, 0, 0, 0,},
	{"Pebble_0", {-19164, 8540, -5997,}, 0, 0, 0,},
	{"Pebble_0", {-20885, 6365, -7620,}, 0, 0, 0,},
	{"Pebble_0", {-17955, 7893, -8787,}, 0, 0, 0,},
	{"Pebble_0", {-15066, 4092, -9833,}, 0, 0, 0,},
	{"Pebble_0", {-13455, 4184, -11865,}, 0, 0, 0,},
	{"Pebble_0", {-14413, 9297, -16057,}, 0, 0, 0,},
	{"Pebble_0", {-17750, 2842, -17991,}, 0, 0, 0,},
	{"Pebble_0", {-16104, 8666, -20770,}, 0, 0, 0,},
	{"Pebble_0", {-15625, 8875, -22248,}, 0, 0, 0,},
	{"Pebble_0", {-17295, 5744, -25339,}, 0, 0, 0,},
	{"Pebble_0", {-15722, 7718, -27213,}, 0, 0, 0,},
	{"Pebble_0", {-15503, 3769, -28734,}, 0, 0, 0,},
	{"Pebble_0", {-15823, 3627, -30728,}, 0, 0, 0,},
	{"Pebble_0", {-14556, 7008, -33409,}, 0, 0, 0,},
	{"Pebble_0", {-14867, 6852, -35696,}, 0, 0, 0,},
	{"Pebble_0", {-16203, 5722, -37808,}, 0, 0, 0,},
	{"Pebble_0", {-13816, 2037, -40299,}, 0, 0, 0,},
	{"Pebble_0", {-16284, 5818, -42880,}, 0, 0, 0,},
	{"Pebble_0", {-15477, 3328, -45346,}, 0, 0, 0,},
	{"Pebble_0", {-17279, 755, -47387,}, 0, 0, 0,},
	{"Pebble_0", {-16520, 2871, -50352,}, 0, 0, 0,},
	{"Pebble_0", {-17414, 3804, -52902,}, 0, 0, 0,},
	{"Pebble_0", {-19505, 2984, -55099,}, 0, 0, 0,},
	{"Pebble_0", {-18909, 3423, -57709,}, 0, 0, 0,},
	{"Pebble_0", {-18891, -343, -59751,}, 0, 0, 0,},
	{"Pebble_0", {-19651, 1563, -62239,}, 0, 0, 0,},
	{"Pebble_0", {-18480, 2223, -64508,}, 0, 0, 0,},
	{"Pebble_0", {-19977, 1519, -66670,}, 0, 0, 0,},
	{"Pebble_0", {-17464, 51, -68279,}, 0, 0, 0,},
	{"Pebble_0", {-16847, 687, -70090,}, 0, 0, 0,},
	{"Pebble_0", {-17487, -134, -72053,}, 0, 0, 0,},
	{"Pebble_0", {-17127, 24, -73816,}, 0, 0, 0,},
	{"Pebble_0", {-16668, 240, -75512,}, 0, 0, 0,},
	{"Pebble_0", {-16427, 539, -77290,}, 0, 0, 0,},
	{"Pebble_0", {-14448, 647, -80024,}, 0, 0, 0,},
	{"Pebble_0", {-13002, 247, -81029,}, 0, 0, 0,},
	{"Pebble_0", {-7992, 129, -88264,}, 0, 0, 0,},

	{"Pebble_0", {2036, -1848, -141653,}, 0, 0, 0,},
	{"Pebble_0", {18921, 4457, 78483,}, 0, 0, 0,},
	{"Pebble_0", {9762, 3208, 92931,}, 0, 0, 0,},
	{"Pebble_0", {7210, -115, 112260,}, 0, 0, 0,},
	{"Pebble_0", {14458, 3678, 69192,}, 0, 0, 0,},
	{"Pebble_0", {15217, 2925, 62592,}, 0, 0, 0,},
	{"Pebble_0", {15412, 3706, 58581,}, 0, 0, 0,},
	{"Pebble_0", {14335, 4686, 48382,}, 0, 0, 0,},
	{"Pebble_0", {14940, 1687, 52338,}, 0, 0, 0,},
	{"Pebble_0", {16083, 2462, 48215,}, 0, 0, 0,},
	{"Pebble_0", {17340, 772, 45899,}, 0, 0, 0,},
	{"Pebble_0", {16914, 682, 43734,}, 0, 0, 0,},
	{"Pebble_0", {14910, 671, 41676,}, 0, 0, 0,},
	{"Pebble_0", {17622, 1540, 39408,}, 0, 0, 0,},
	{"Pebble_0", {16423, 3418, 37451,}, 0, 0, 0,},
	{"Pebble_0", {17532, 1584, 35212,}, 0, 0, 0,},
	{"Pebble_0", {16286, 3503, 33281,}, 0, 0, 0,},
	{"Pebble_0", {18154, -326, 30925,}, 0, 0, 0,},
	{"Pebble_0", {14932, 709, 24514,}, 0, 0, 0,},
	{"Pebble_0", {17793, 6255, 21413,}, 0, 0, 0,},
	{"Pebble_0", {19270, 4035, 19318,}, 0, 0, 0,},
	{"Pebble_0", {19055, 3326, 17097,}, 0, 0, 0,},
	{"Pebble_0", {17348, 2129, 14558,}, 0, 0, 0,},
	{"Pebble_0", {17203, 6518, -14395,}, 0, 0, 0,},
	{"Pebble_0", {15305, 7052, -17254,}, 0, 0, 0,},
	{"Pebble_0", {17409, 3612, -27710,}, 0, 0, 0,},
	{"Pebble_0", {18244, 5559, -31634,}, 0, 0, 0,},
	{"Pebble_0", {11705, 5199, -33734,}, 0, 0, 0,},
	{"Pebble_0", {12914, 7483, -37877,}, 0, 0, 0,},
	{"Pebble_0", {17407, 2438, -42419,}, 0, 0, 0,},
	{"Pebble_0", {15690, 4583, -45869,}, 0, 0, 0,},
	{"Pebble_0", {14153, 354, -48859,}, 0, 0, 0,},
	{"Pebble_0", {9561, 4207, -51591,}, 0, 0, 0,},
	{"Pebble_0", {8107, 262, -54486,}, 0, 0, 0,},
	{"Pebble_0", {6433, 2598, -57737,}, 0, 0, 0,},
	{"Pebble_0", {8001, 5306, -61754,}, 0, 0, 0,},
	{"Pebble_0", {6024, 913, -64163,}, 0, 0, 0,},
	{"Pebble_0", {5613, 12, -67104,}, 0, 0, 0,},
	{"Pebble_0", {5754, 577, -70116,}, 0, 0, 0,},
	{"Pebble_0", {4494, 4628, -72920,}, 0, 0, 0,},
	{"Pebble_0", {3870, 1760, -75129,}, 0, 0, 0,},
	{"Pebble_0", {4438, 3753, -77693,}, 0, 0, 0,},
	{"Pebble_0", {6300, 728, -79787,}, 0, 0, 0,},
	{"Pebble_0", {5151, 2557, -81710,}, 0, 0, 0,},
	{"Pebble_0", {5904, 634, -83349,}, 0, 0, 0,},
	{"Pebble_0", {4296, 1213, -84986,}, 0, 0, 0,},
	{"Pebble_0", {3516, -1621, -86397,}, 0, 0, 0,},
	{"Pebble_0", {3960, 1138, -87946,}, 0, 0, 0,},
	{"Pebble_0", {5833, -1496, -88835,}, 0, 0, 0,},
	{"Pebble_0", {5273, 301, -90226,}, 0, 0, 0,},
	{"Pebble_0", {2248, -165, -92189,}, 0, 0, 0,},
	{"Pebble_0", {2327, 2186, -110989,}, 0, 0, 0,},
	{"Pebble_0", {-5142, 3335, -93170,}, 0, 0, 0,},
	{"Pebble_0", {6968, 1317, -96213,}, 0, 0, 0,},

	{"Pebble_0", {9870, -426, 90647,}, 0, 0, 0,},
	{"Pebble_0", {12757, -843, 84615,}, 0, 0, 0,},
	{"Pebble_0", {8624, -3470, 105283,}, 0, 0, 0,},
	{"Pebble_0", {8711, 428, 79534,}, 0, 0, 0,},
	{"Pebble_0", {8972, -773, 85505,}, 0, 0, 0,},
	{"Pebble_0", {10302, -18, 76867,}, 0, 0, 0,},
	{"Pebble_0", {4102, -1588, 93921,}, 0, 0, 0,},
	{"Pebble_0", {8620, 637, 71351,}, 0, 0, 0,},
	{"Pebble_0", {874, 433, 79985,}, 0, 0, 0,},
	{"Pebble_0", {265, -3896, 104127,}, 0, 0, 0,},
	{"Pebble_0", {5998, 726, 67954,}, 0, 0, 0,},
	{"Pebble_0", {7829, 142, 64895,}, 0, 0, 0,},
	{"Pebble_0", {9427, -303, 60868,}, 0, 0, 0,},
	{"Pebble_0", {5463, 1486, 61019,}, 0, 0, 0,},
	{"Pebble_0", {7314, 1309, 59098,}, 0, 0, 0,},
	{"Pebble_0", {7243, 387, 57704,}, 0, 0, 0,},
	{"Pebble_0", {5677, 276, 51504,}, 0, 0, 0,},
	{"Pebble_0", {4543, 1492, 54717,}, 0, 0, 0,},
	{"Pebble_0", {5452, 723, 47996,}, 0, 0, 0,},
	{"Pebble_0", {3967, 1148, 46146,}, 0, 0, 0,},
	{"Pebble_0", {4492, 1306, 44838,}, 0, 0, 0,},
	{"Pebble_0", {6570, 1236, 49125,}, 0, 0, 0,},
	{"Pebble_0", {2900, 965, 42009,}, 0, 0, 0,},
	{"Pebble_0", {1698, 949, 48927,}, 0, 0, 0,},
	{"Pebble_0", {3203, 1489, 39635,}, 0, 0, 0,},
	{"Pebble_0", {2510, 3526, 39047,}, 0, 0, 0,},
	{"Pebble_0", {2364, 3683, 38000,}, 0, 0, 0,},
	{"Pebble_0", {-162, 2830, 38174,}, 0, 0, 0,},
	{"Pebble_0", {719, 4113, 36707,}, 0, 0, 0,},
	{"Pebble_0", {-908, 776, 36172,}, 0, 0, 0,},
	{"Pebble_0", {1405, 953, 33637,}, 0, 0, 0,},
	{"Pebble_0", {-993, 3610, 34354,}, 0, 0, 0,},
	{"Pebble_0", {-801, 3198, 33066,}, 0, 0, 0,},
	{"Pebble_0", {-3429, 3755, 30579,}, 0, 0, 0,},
	{"Pebble_0", {-4205, 5576, 30295,}, 0, 0, 0,},
	{"Pebble_0", {-4917, 5949, 29804,}, 0, 0, 0,},
	{"Pebble_0", {-7317, 2239, 29076,}, 0, 0, 0,},
	{"Pebble_0", {-5388, 3815, 21487,}, 0, 0, 0,},
	{"Pebble_0", {-7325, 5433, 21238,}, 0, 0, 0,},
	{"Pebble_0", {-6928, 5625, 20230,}, 0, 0, 0,},
	{"Pebble_0", {-10788, 3823, 19447,}, 0, 0, 0,},
	{"Pebble_0", {-11728, 3275, 19208,}, 0, 0, 0,},
	{"Pebble_0", {-10577, 2941, 17987,}, 0, 0, 0,},
	{"Pebble_0", {-13914, 3466, 18750,}, 0, 0, 0,},
	{"Pebble_0", {-10263, 1536, 16662,}, 0, 0, 0,},
	{"Pebble_0", {-8843, 2308, 15509,}, 0, 0, 0,},
	{"Pebble_0", {-13580, 3145, 16506,}, 0, 0, 0,},
	{"Pebble_0", {-15954, 2161, 14442,}, 0, 0, 0,},
	{"Pebble_0", {-15048, -11636, 12515,}, 0, 0, 0,},

	{"Pebble_0", {-7910, -2393, -4553,}, 0, 0, 0,},
	{"Pebble_0", {188, 2960, 1073,}, 0, 0, 0,},
	{"Pebble_0", {-20944, -256, 11078,}, 0, 0, 0,},
	{"Pebble_0", {-27504, -2130, 4301,}, 0, 0, 0,},
	{"Pebble_0", {-10371, 9639, -1889,}, 0, 0, 0,},
	{"Pebble_0", {-18209, -15537, -303,}, 0, 0, 0,},
	{"Pebble_0", {-30783, 1356, 10464,}, 0, 0, 0,},
	{"Pebble_0", {-9188, -2027, 9067,}, 0, 0, 0,},
	{"Pebble_0", {-14012, 17142, 6887,}, 0, 0, 0,},
	{"Pebble_0", {-31024, -8188, 369,}, 0, 0, 0,},
	{"Pebble_0", {-18197, 17698, -2617,}, 0, 0, 0,},
	{"Pebble_0", {-22062, 15693, 1871,}, 0, 0, 0,},
	{"Pebble_0", {-14558, 11235, -1085,}, 0, 0, 0,},
	{"Pebble_0", {-29878, -70, 2885,}, 0, 0, 0,},
	{"Pebble_0", {-29421, 1219, 6766,}, 0, 0, 0,},
	{"Pebble_0", {-24295, -3286, -11800,}, 0, 0, 0,},
	{"Pebble_0", {-25592, 13927, 8821,}, 0, 0, 0,},
	{"Pebble_0", {-33065, -4275, 3456,}, 0, 0, 0,},
	{"Pebble_0", {-19782, -7634, 469,}, 0, 0, 0,},
	{"Pebble_0", {-19444, -8484, 11896,}, 0, 0, 0,},
	{"Pebble_0", {-13094, 9427, 12134,}, 0, 0, 0,},
	{"Pebble_0", {-30441, 7661, 1509,}, 0, 0, 0,},
	{"Pebble_0", {-27111, 14650, -488,}, 0, 0, 0,},
	{"Pebble_0", {-23554, -7883, 9304,}, 0, 0, 0,},
	{"Pebble_0", {-713, -1700, 796,}, 0, 0, 0,},
	{"Pebble_0", {-21828, 12653, -8009,}, 0, 0, 0,},
	{"Pebble_0", {-30441, 1102, 4619,}, 0, 0, 0,},
	{"Pebble_0", {-16551, 12832, 11605,}, 0, 0, 0,},
	{"Pebble_0", {-15143, 6680, -9271,}, 0, 0, 0,},
	{"Pebble_0", {-24803, -3778, 13307,}, 0, 0, 0,},
	{"Pebble_0", {-26299, 12671, 844,}, 0, 0, 0,},
	{"Pebble_0", {-33639, 1661, 4385,}, 0, 0, 0,},
	{"Pebble_0", {-12109, -4540, -10695,}, 0, 0, 0,},
	{"Pebble_0", {-24626, -2587, 8008,}, 0, 0, 0,},
	{"Pebble_0", {-7505, -3574, -6271,}, 0, 0, 0,},
	{"Pebble_0", {-7011, -10924, -1813,}, 0, 0, 0,},
	{"Pebble_0", {-31102, -219, 10325,}, 0, 0, 0,},
	{"Pebble_0", {-19376, 181, 65,}, 0, 0, 0,},
	{"Pebble_0", {-31187, 8518, 5671,}, 0, 0, 0,},
	{"Pebble_0", {-10412, -9558, 6339,}, 0, 0, 0,},
	{"Pebble_0", {-29229, 12238, 4253,}, 0, 0, 0,},
	{"Pebble_0", {-14231, -2263, -428,}, 0, 0, 0,},

	{"Pebble_0", {27010, 8962, -6573,}, 0, 0, 0,},
	{"Pebble_0", {28725, 3037, -16136,}, 0, 0, 0,},
	{"Pebble_0", {28343, -13772, -7719,}, 0, 0, 0,},
	{"Pebble_0", {20862, 10230, -9442,}, 0, 0, 0,},
	{"Pebble_0", {31533, 3715, -7903,}, 0, 0, 0,},
	{"Pebble_0", {3286, -10704, -13790,}, 0, 0, 0,},
	{"Pebble_0", {32413, -8636, -7906,}, 0, 0, 0,},
	{"Pebble_0", {31484, -2187, -6119,}, 0, 0, 0,},
	{"Pebble_0", {24369, -16293, -5867,}, 0, 0, 0,},
	{"Pebble_0", {5372, 605, -106,}, 0, 0, 0,},
	{"Pebble_0", {28045, 11335, -6976,}, 0, 0, 0,},
	{"Pebble_0", {4158, -7470, -18863,}, 0, 0, 0,},
	{"Pebble_0", {33118, -4984, -9088,}, 0, 0, 0,},
	{"Pebble_0", {18500, -11585, -2406,}, 0, 0, 0,},
	{"Pebble_0", {34305, -594, -11547,}, 0, 0, 0,},
	{"Pebble_0", {14382, 972, -817,}, 0, 0, 0,},
	{"Pebble_0", {16165, -12917, -18926,}, 0, 0, 0,},
	{"Pebble_0", {5593, -13948, -12170,}, 0, 0, 0,},
	{"Pebble_0", {10148, 11187, -259,}, 0, 0, 0,},
	{"Pebble_0", {32483, 3146, -4382,}, 0, 0, 0,},
	{"Pebble_0", {2697, -6741, -15502,}, 0, 0, 0,},
	{"Pebble_0", {4584, -11428, -15226,}, 0, 0, 0,},
	{"Pebble_0", {765, -4155, -14363,}, 0, 0, 0,},

	{"Pebble_0", {-5822, 2686, -53753,}, 0, 0, 0,},
	{"Pebble_0", {-5473, 2854, -52376,}, 0, 0, 0,},
	{"Pebble_0", {-5563, 2977, -50936,}, 0, 0, 0,},
	{"Pebble_0", {-4780, 2851, -49612,}, 0, 0, 0,},
	{"Pebble_0", {-4857, 3437, -48165,}, 0, 0, 0,},
	{"Pebble_0", {-4115, 2910, -46851,}, 0, 0, 0,},
	{"Pebble_0", {-4640, 3346, -45306,}, 0, 0, 0,},
	{"Pebble_0", {-4513, 3484, -43862,}, 0, 0, 0,},
	{"Pebble_0", {-3670, 2272, -42655,}, 0, 0, 0,},
	{"Pebble_0", {-4812, 3363, -40889,}, 0, 0, 0,},
	{"Pebble_0", {-3065, 1353, -39977,}, 0, 0, 0,},
	{"Pebble_0", {-2101, 1907, -38619,}, 0, 0, 0,},
	{"Pebble_0", {-4288, 2778, -36621,}, 0, 0, 0,},
	{"Pebble_0", {-4523, 2416, -35150,}, 0, 0, 0,},
	{"Pebble_0", {-1636, 2539, -34172,}, 0, 0, 0,},
	{"Pebble_0", {-2696, 1098, -32756,}, 0, 0, 0,},
	{"Pebble_0", {-1554, 1645, -31377,}, 0, 0, 0,},
	{"Pebble_0", {-1189, 353, -30220,}, 0, 0, 0,},
	{"Pebble_0", {-561, 1014, -28713,}, 0, 0, 0,},
	{"Pebble_0", {-1379, -975, -27497,}, 0, 0, 0,},
	{"Pebble_0", {-2020, 1312, -25392,}, 0, 0, 0,},
	{"Pebble_0", {-2306, -2451, -24681,}, 0, 0, 0,},

	{"Pebble_0", {312, 960, -18564,}, 0, 0, 0,},
	{"Pebble_0", {1293, -142, -17532,}, 0, 0, 0,},
	{"Pebble_0", {637, 211, -15916,}, 0, 0, 0,},
	{"Pebble_0", {-462, -1505, -14643,}, 0, 0, 0,},
	{"Pebble_0", {954, -6290, -14342,}, 0, 0, 0,},
	{"Pebble_0", {-1117, -5949, -12495,}, 0, 0, 0,},
	{"Pebble_0", {-1660, -4300, -10732,}, 0, 0, 0,},
	{"Pebble_0", {250, -1404, -9248,}, 0, 0, 0,},
	{"Pebble_0", {-2265, -4885, -7975,}, 0, 0, 0,},
	{"Pebble_0", {710, -8005, -7388,}, 0, 0, 0,},
	{"Pebble_0", {2906, -157, -5592,}, 0, 0, 0,},
	{"Pebble_0", {338, 391, -3935,}, 0, 0, 0,},
	{"Pebble_0", {7051, -5763, -3892,}, 0, 0, 0,},
	{"Pebble_0", {6392, -4951, -2399,}, 0, 0, 0,},
	{"Pebble_0", {4262, -3375, -748,}, 0, 0, 0,},

	{"Pebble_0", {-832, -985, 1178,}, 0, 0, 0,},
	{"Pebble_0", {6839, 731, 11319,}, 0, 0, 0,},
	{"Pebble_0", {1217, 656, 13232,}, 0, 0, 0,},
	{"Pebble_0", {9672, -2350, 14375,}, 0, 0, 0,},
	{"Pebble_0", {724, -5815, 20098,}, 0, 0, 0,},
	{"Pebble_0", {3583, -902, 21211,}, 0, 0, 0,},
	{"Pebble_0", {5539, -6866, 23321,}, 0, 0, 0,},
	{"Pebble_0", {6399, 902, 28150,}, 0, 0, 0,},
	{"Pebble_0", {11488, -4924, 30261,}, 0, 0, 0,},
	{"Pebble_0", {3229, -334, 34418,}, 0, 0, 0,},
	{"Pebble_0", {9373, -6853, 36643,}, 0, 0, 0,},
	{"Pebble_0", {7621, -2299, 38596,}, 0, 0, 0,},
	{"Pebble_0", {7444, 3105, 40509,}, 0, 0, 0,},
	{"Pebble_0", {11794, -2999, 42940,}, 0, 0, 0,},
	{"Pebble_0", {5387, -6350, 45832,}, 0, 0, 0,},
	{"Pebble_0", {9719, 4430, 47492,}, 0, 0, 0,},
	{"Pebble_0", {12270, 1614, 50011,}, 0, 0, 0,},
	{"Pebble_0", {400, -1840, 53408,}, 0, 0, 0,},
	{"Pebble_0", {5708, 1032, 55655,}, 0, 0, 0,},
	{"Pebble_0", {11004, -4276, 58259,}, 0, 0, 0,},
	{"Pebble_0", {11979, 2435, 60769,}, 0, 0, 0,},
	{"Pebble_0", {1633, 864, 64254,}, 0, 0, 0,},
	{"Pebble_0", {10843, 4118, 66553,}, 0, 0, 0,},
	{"Pebble_0", {7760, 4548, 69691,}, 0, 0, 0,},
	{"Pebble_0", {12507, 1635, 72505,}, 0, 0, 0,},
	{"Pebble_0", {5824, 521, 75984,}, 0, 0, 0,},
	{"Pebble_0", {12902, -748, 78718,}, 0, 0, 0,},
	{"Pebble_0", {4646, 2048, 82320,}, 0, 0, 0,},
	{"Pebble_0", {7530, 3735, 85348,}, 0, 0, 0,},
	{"Pebble_0", {6065, 846, 88733,}, 0, 0, 0,},
	{"Pebble_0", {10015, -2481, 91841,}, 0, 0, 0,},
	{"Pebble_0", {10854, 1836, 95088,}, 0, 0, 0,},
	{"Pebble_0", {9292, -3786, 98606,}, 0, 0, 0,},
	{"Pebble_0", {11373, 3910, 101838,}, 0, 0, 0,},
	{"Pebble_0", {13975, -310, 105162,}, 0, 0, 0,},
	{"Pebble_0", {10959, 3903, 108794,}, 0, 0, 0,},
	{"Pebble_0", {9306, -3657, 112435,}, 0, 0, 0,},
	{"Pebble_0", {9495, 644, 115938,}, 0, 0, 0,},
	{"Pebble_0", {14070, -46, 119228,}, 0, 0, 0,},
	{"Pebble_0", {14448, 103, 122785,}, 0, 0, 0,},
	{"Pebble_0", {12409, 1737, 126501,}, 0, 0, 0,},
	{"Pebble_0", {12496, -2650, 130120,}, 0, 0, 0,},
	{"Pebble_0", {14329, -758, 133641,}, 0, 0, 0,},
	{"Pebble_0", {10902, -1240, 137490,}, 0, 0, 0,},
	{"Pebble_0", {11210, -1379, 141128,}, 0, 0, 0,},
	{"Pebble_0", {14478, 651, 144600,}, 0, 0, 0,},
	{"Pebble_0", {14739, 640, 148257,}, 0, 0, 0,},
	{"Pebble_0", {12377, 0, 152074,}, 0, 0, 0,},

	{"Pebble_0", {18013, -13201, -20697,}, 0, 155.126, 0,},
	{"Pebble_0", {13797, -2102, -24645,}, 0, 155.126, 0,},
	{"Pebble_0", {17131, 5040, -21034,}, 0, 155.126, 0,},
	{"Pebble_0", {15971, -9602, -21751,}, 0, 155.126, 0,},
	{"Pebble_0", {14103, -4926, -23308,}, 0, 155.126, 0,},
}

--  Name: MapFunctions v1.18.0
--  Author: Mikali
--  Created: 2004/10/07
--  Updated: 2013/09/30
--  Homepage: http//isometricland.net
--  Discussion:
--  http://forums.relicnews.com/showthread.php?t=48818
--  http://forums.relicnews.com/showthread.php?t=82964 (old thread)
-- http://forums.relicnews.com/showthread.php?t=40779 (old thread)
--  Credits:
--  * MathWorld and Wikipedia for the parametric surface functions used in 
--    "shapeAdd", "harmonographAdd" and probably elsewhere.
--  * GameDev.net for the implicit metaball formula used in "blobAdd".
--  * The function "flokalAdd" is based on 'doodle 4' by bitcraft at 
--    OpenProcessing.org.
--  * Lorenzo Donati at Stack Overflow for the new pseudo random number 
--    generator.


--------------------------------------------------------------------------------
-- Global variables.
--

-- incremental counters
iStartPoints, iPoints, iSpheres, iCameras, iSquadrons, iAsteroids, iSalvage, iPebbles, iClouds, iDustClouds, iNebulas, iDirLights, iRvAsteroids, iRvSquadrons = 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0
TWO_PI = 2 * PI


--------------------------------------------------------------------------------
--  Name:		appendShape
--  Description:	General shape-adding function utilized internally by the other functions.
--  Syntax:		appendShape(<tPos>, <i>, <tPar>, <j>, <tCoo>, <tRot>)
--  Arguments:
--	<tPos>: a table containing the initial coordinates for the object.
--	<i>: the index of the object within the distribution table.
--	<tPar>: a table containing the object-specific parameters.
--	<j>: the position number of the object within the distribution table.
--	<tCoo>: a table containing the modified coordinates for the object.
--	<tRot>: a table containing the Euler rotation angles.
--  Notes:
--	1. I would like to change the order of the parameters so that <tPos> 
--	   comes after <tRot> since translation is done after rotation. Would 
--	   be good to modify all the other functions to copy this syntax as 
--	   well.
--	2. I should group <i> and <j> together as well.
--------------------------------------------------------------------------------

function appendShape(tPos, i, tPar, j, tCoo, tRot)
	tCoo = vaddV(vrotate(tCoo, tRot), tPos)
	local objType = tPar[2]
	if (objType == "Squadron") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addSquadron(<sSquadronName>, <sSquadronType>, <tPosition>, <iPlayerIndex>, <tRotation>, <iNumberShips>, <bHyperspace>)
		addSquadron(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8], tPar[9])
		iSquadrons = iSquadrons + 1
	elseif (objType == "Asteroid") then
		--addAsteroid(<sAsteroidType>, <tPosition>, <fRU%>, ?, ?, ?, ?)
		addAsteroid(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7], tPar[8], tPar[9])
		iAsteroids = iAsteroids + 1
	elseif (objType == "Salvage") then
		--addSalvage(<sChunkType>, <tPosition>, <fRU%>, ?, ?, ?, ?)
		addSalvage(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7], tPar[8], tPar[9])
		iSalvage = iSalvage + 1
	elseif (objType == "Pebble") then
		--addPebble(<sPebbleType>, <tPosition>, ?, ?, ?)
		addPebble(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7])
		iPebbles = iPebbles + 1
	elseif (objType == "Cloud") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addCloud(<sCloudName>, <sCloudType>, <tPosition>, <tColor>, ?, <fRadius>)
		addCloud(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8])
		iClouds = iClouds + 1
	elseif (objType == "DustCloud") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addDustCloud(<sDustCloudName>, <sDustCloudType>, <tPosition>, <tColor>, ?, <fRadius>)
		addDustCloud(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8])
		iDustClouds = iDustClouds + 1
	elseif (objType == "Nebula") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addNebula(<sNebulaName>, <sNebulaType>, <tPosition>, <tColor>, ?, <fRadius>)
		addNebula(name, tPar[4], vaddV(tCoo, tPar[5]), tPar[6], tPar[7], tPar[8])
		iNebulas = iNebulas + 1
	elseif (objType == "Point") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addPoint(<sPointName>, <tPosition>, <tRotation>)
		addPoint(name, vaddV(tCoo, tPar[4]), tPar[5])
		iPoints = iPoints + 1
	elseif (objType == "StartPoint") then
		local name = "StartPos" .. iStartPoints
		--addPoint(<sPointName>, <tPosition>, <tRotation>)
		addPoint(name, vaddV(tCoo, tPar[4]), tPar[5])
		iStartPoints = iStartPoints + 1
	elseif (objType == "Sphere") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addSphere(<sSphereName>, <tPosition>, <fRadius>)
		addSphere(name, vaddV(tCoo, tPar[4]), tPar[5])
		iSpheres = iSpheres + 1
	elseif (objType == "Camera") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--addCamera(<sCameraName>, <tTarget>, <tPosition>)
		addCamera(name, tPar[5], vaddV(tCoo, tPar[4]))
		iCameras = iCameras + 1
	elseif (objType == "DirLight") then
		local name = tPar[3]
		if (tPar[1] > 1) then
			name = name .. "_" .. j
		end
		--createDirLight(<sLightName>, <tPosition>, <tColor>)
		createDirLight(name, vaddV(tCoo, tPar[4]), tPar[5])
		--setLightSpecular (<sLightName>, <tSpecular>)
		setLightSpecular(name, tPar[6])
		iDirLights = iDirLights + 1
	elseif (objType == "ReactiveSquadron") then
		--addReactiveFleetSlot(<sSobGroupName>, <iPlayerIndex>, ?, <tPosition>, ?, ?, ?, <sShipType>)
		addReactiveFleetSlot(tPar[5], tPar[6], tPar[7], vaddV(tCoo, tPar[4]), tPar[8], tPar[9], tPar[10], tPar[3])
		iRvSquadrons = iRvSquadrons + 1
	elseif (objType == "ReactiveAsteroid") then
		--addReactiveFleetResourceSlot(<sResourceType>, <tPosition>, ?, ?, ?)
		addReactiveFleetResourceSlot(tPar[3], vaddV(tCoo, tPar[4]), tPar[5], tPar[6], tPar[7])
		iRvAsteroids = iRvAsteroids + 1
	elseif (objType == "Coordinate") then
		tinsert(tPar[3], tCoo)
		print("function appendShape: adding a coordinate to the coordinate table")
		print("function appendShape: coordinate table length = " .. getn(tPar[3]))
	elseif (objType == "Function") then
		if not (tPar[7]) then
			tPar[7] = {0,0,0,}
		end
		if (tPar[3] == literalAdd) then
			literalAdd(tPar[4], tPar[5], tPar[6], vaddV(tRot, tPar[7]))
		else
			tPar[3](vaddV(tCoo, tPar[4]), tPar[5], tPar[6], vaddV(tRot, tPar[7]))
		end
	else
		print("function appendShape: object class not recognized")
	end
end

function addCoordinate(tCoo, rTable)
	tinsert(rTable, tCoo)
end

function addSOBGroup(sSobName, ...)
	createSOBGroup(sSobName)
	for i = 1, getn(arg) do
		addToSOBGroup(arg[i], sSobName)
	end
end

function doAllSOBGroups(ttable)
	for sobgname, sobgarray in ttable do
		for j = 1, getn(sobgarray) do
			if sobgarray[j][4] == 0 then
				if sobgarray[j][2] == 1 then
					addToSOBGroup(sobgarray[j][1], sobgname)
				else
					for k = 1, sobgarray[j][2] do
						addToSOBGroup(sobgarray[j][1] .. "_" .. k, sobgname)
					end
				end
			end
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		branchAdd
--  Description:	Creates a branching tree-like fractal.
--  Syntax:		branchAdd(<tPos>, <tDst>, {<tDiv>, <tInt>, <tFrq>, <tBeg>, <tEnd>, <tRad>, <tLen>, <tThk>, <tAng>, <iMod>,}, <tRot>, <tSeed>, ...)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following ten parameters:
--		<tDiv>: a table containing the minimum and maximum number of new shoots that are generated each time the tree divides.
--		<tInt>: a table containing the minimum and maximum number of segments between instances of division.
--		<tFrq>: a table containing the minimum and maximum number of times the tree divides.
--		<tBeg>: a table containing the minimum and maximum number of segments added to the beginning of the tree.
--		<tEnd>: a table containing the minimum and maximum number of segments added to the end of the tree (at the end of each branch). (Note: this value needs to be greater than zero in order for the last division to be noticable.)
--		<tRad>: a table containing the the minimum and maximum radius of a segment.
--		<tLen>: a table containing the minimum and maximum length of a segment.
--		<tThk>: a table containing the minimum and maximum thickness, as percentages of the radius, of a segment.
--		<tAng>: a table containing the minimum and maximum angle of deviation between segments.
--		<iMod>: 0 is non-random mode, 1 is random placement with steadily decreasing length and radius, 2 is random placement with random length and radius, 3 is a bug-ridden method using splines.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--	The remaining arguments are used internally by the function and should not be modified directly.
--  Notes:
--	1. I suppose I need an <iMod> = 4 mode for a random method using splines, but without decreasing length and radius.
--------------------------------------------------------------------------------

function branchAdd(tPos, tDst, tPar, tRot, tSeed, lastRad, countDiv, countFrq, lastPos, nextPos, tiltDeg, spinDeg)
	local thisPos = {}
	local tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6], tPar[7], tPar[8], tPar[9], tPar[10]
	local minRad, maxRad, minDist, maxDist, minThck, maxThck = tRad[1], tRad[2], tLen[1], tLen[2], tThk[1]/100, tThk[2]/100
	local minAng, maxAng, minBeg, maxBeg, minEnd, maxEnd = tAng[1], tAng[2], tBeg[1], tBeg[2], tEnd[1], tEnd[2]
	local minDiv, maxDiv, minInt, maxInt, minFrq, maxFrq = tDiv[1], tDiv[2], tInt[1], tInt[2], tFrq[1], tFrq[2]
	local numSeg, numInt, numDiv, numBeg, numEnd, numFrq = 0, 0, 0, 0, 0, 0
	if (lastRad == nil) then
		lastRad = maxRad
		countDiv = 1
		countFrq = minFrq
	else
		countFrq = countFrq - 1
	end
	if (lastPos == nil) then
		lastPos = {0,0,0,}
		nextPos = {0,0,0,}
		tiltDeg, spinDeg = 0, 0
	end
	local thisRad = sqrt(lastRad^2/countDiv)
	-- if set to non-random mode
	if (iMod == 0) then
		numInt, numDiv, numBeg, numEnd, numFrq = maxInt, minDiv, maxBeg, maxEnd, maxFrq
	-- if set to random mode, or random mode with decreasing length and radius
	else
		numInt, numDiv, numBeg, numEnd, numFrq = srandom2(tSeed, minInt, maxInt), srandom2(tSeed, minDiv, maxDiv), srandom2(tSeed, minBeg, maxBeg), srandom2(tSeed, minEnd, maxEnd), srandom2(tSeed, minFrq, maxFrq)
	end
	if (numBeg > 0) then
		numSeg = numBeg
	elseif (numFrq > 0) then
		numSeg = numInt
	elseif (numEnd > 0) then
		numSeg = numEnd
	end
	for k = 1, numSeg do
		local rad, len, thk, angY, angZ = 0, 0, 0, 0, 0
		-- if set to non-random mode
		if (iMod == 0) then
			local sign1, sign2 = srandomSign(tSeed), srandomSign(tSeed)
			rad, len, angY, angZ = maxRad, maxDist, sign1 * maxAng, sign2 * maxAng
		-- if set to random mode with decreasing length and radius
		elseif (iMod == 1) or (iMod == 3) then
			local sign1, sign2, narrw = srandomSign(tSeed), srandomSign(tSeed), srandom3(tSeed, 0.9, 1)
			thisRad = thisRad * narrw
			thk, rad, len, angY, angZ = srandom3(tSeed, minThck, maxThck) * narrw, thisRad, maxDist - (maxDist - minDist)/(numFrq + 1), srandom3(tSeed, minAng, maxAng) * sign1, srandom3(tSeed, minAng, maxAng) * sign2
		-- if set to random mode
		elseif (iMod == 2) then
			local sign1, sign2 = srandomSign(tSeed), srandomSign(tSeed)
			thk, rad, len, angY, angZ = srandom3(tSeed, minThck, maxThck), srandom3(tSeed, minRad, maxRad), srandom3(tSeed, minDist, maxDist), srandom3(tSeed, minAng, maxAng) * sign1, srandom3(tSeed, minAng, maxAng) * sign2
		end
		tiltDeg, spinDeg = tiltDeg + angZ, spinDeg + angY
		thisPos = nextPos
		nextPos = vaddV(nextPos, vrotate({len, 0, 0,}, {0, spinDeg, tiltDeg,}))
		for i, tTab in tDst do
			local Volume1, Volume2 = PI * maxRad^2 * maxDist, PI * rad^2 * len
			local Density = Volume2/Volume1
			local iNum, gradX = floor(tTab[1] * Density + 0.5), len
			for j = 1, iNum do
				-- if set to non-random mode
				if (iMod == 0) then
					local tCoo = {gradX, 0, 0,}
					tCoo = vaddV(thisPos, vrotate(tCoo, {0, spinDeg, tiltDeg,}))
					appendShape(tPos, i, tTab, j, tCoo, tRot)
				-- if set to random mode with decreasing length and radius
				elseif (iMod == 1) then
					local r = sqrt(srandom(tSeed)) * thk * rad + (1 - thk) * rad
					local v, h = srandom3(tSeed, 360), srandom3(tSeed, len)
					local tCoo = {h, r * cos(v), r * sin(v),}
					tCoo = vaddV(thisPos, vrotate(tCoo, {0, spinDeg, tiltDeg,}))
					appendShape(tPos, i, tTab, j, tCoo, tRot)
				-- if set to random mode
				elseif (iMod == 2) then
					local r = sqrt(srandom(tSeed)) * thk * rad + (1 - thk) * rad
					local v, h = srandom3(tSeed, 360), srandom3(tSeed, len)
					local tCoo = {h, r * cos(v), r * sin(v),}
					tCoo = vaddV(thisPos, vrotate(tCoo, {0, spinDeg, tiltDeg,}))
					appendShape(tPos, i, tTab, j, tCoo, tRot)
				-- if set to random method using splines with decreasing length and radius
				elseif (iMod == 3) then
					local t = srandom(tSeed)
					local A = vmidpoint(lastPos, thisPos)
					local B = thisPos
					local C = vmidpoint(thisPos, nextPos)
					local r = sqrt(srandom(tSeed)) * thk * rad + (1 - thk) * rad
					local v = srandom(tSeed, 360)
					local tCirc =
					{
						r * cos(v),
						r * sin(v),
						0,
					}
					local tCoo =
					{
						(1 - t)^2 * A[1] + 2 * (1 - t) * t * B[1] + t^2 * C[1],
						(1 - t)^2 * A[2] + 2 * (1 - t) * t * B[2] + t^2 * C[2],
						(1 - t)^2 * A[3] + 2 * (1 - t) * t * B[3] + t^2 * C[3],
					}
					local tDerivatives =
					{
						2 * (1 - t) * (B[1] - A[1]) + 2 * t * (C[1] - B[1]),
						2 * (1 - t) * (B[2] - A[2]) + 2 * t * (C[2] - B[2]),
						2 * (1 - t) * (B[3] - A[3]) + 2 * t * (C[3] - B[3]),
					}
					local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
					appendShape(tPos, i, tTab, j, vaddV(tCoo, tNormedPos), tRot)
				end
				gradX = gradX - len/iNum
			end
		end
		lastPos = thisPos
	end
	if (numBeg > 0) then
		tBeg = {0, 0,}
		branchAdd(tPos, tDst, {tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod,}, tRot, tSeed, nil, nil, nil, lastPos, nextPos, tiltDeg, spinDeg)
	elseif (numFrq > 0) then
		if (minFrq >= numFrq) then
			minFrq = numFrq - 1
		end
		tFrq = {minFrq, numFrq - 1,}
		for j = 1, numDiv do
			branchAdd(tPos, tDst, {tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod,}, tRot, tSeed, thisRad, numDiv, countFrq, lastPos, nextPos, tiltDeg, spinDeg)
		end
	elseif (numEnd > 0) then
		tDiv, tInt, tFrq, tEnd = {0, 0,}, {0, 0,}, {0, 0,}, {0, 0,}
		branchAdd(tPos, tDst, {tDiv, tInt, tFrq, tBeg, tEnd, tRad, tLen, tThk, tAng, iMod,}, tRot, tSeed, thisRad, numDiv, countFrq, lastPos, nextPos, tiltDeg, spinDeg)
	end
end


--------------------------------------------------------------------------------
--  Name:		spline3Add
--  Description:	Creates a Hermite spline-shaped tube connecting any two points using two control points.
--  Syntax:		spline3Add(<tPos>, <tDst>, {<tP1A>, <tP1B>, <tP2A>, <tP2B>, <tRad>, <tThk>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following six parameters:
--		<tP1A>: a table containing the coordinates of the starting point.
--		<tP1B>: a table containing the coordinates of the first control point.
--		<tP2A>: a table containing the coordinates of the ending point.
--		<tP2B>: a table containing the coordinates of the second control point.
--		<tRad>: a table containing the initial and final radii of the tube.
--		<tThk>: a table containing the initial and final thickness of the tube lining, as a percentage of the radius.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Still not sure whether <tThk> should be a percentage instead of a fixed value.
--	2. Needs an <iMode> parameter to output non-random coordinates.
--------------------------------------------------------------------------------

function spline3Add(tPos, tDst, tPar, tRot, tSeed)
	local tP1A, tP1B, tP2A, tP2B, tRad, tThk = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6]
	local begRad, endRad, begThk, endThk = tRad[1], tRad[2], tThk[1]/100, tThk[2]/100
	local P1A_x, P1A_y, P1A_z, P1B_x, P1B_y, P1B_z = tP1A[1], tP1A[2], tP1A[3], tP1B[1], tP1B[2], tP1B[3]
	local P2A_x, P2A_y, P2A_z, P2B_x, P2B_y, P2B_z = tP2A[1], tP2A[2], tP2A[3], tP2B[1], tP2B[2], tP2B[3]

	-- need to reverse the direction of the second control point so that the curves can be stitched neatly together, later
	local C_x = 2 * P2A_x - P2B_x
	local C_y = 2 * P2A_y - P2B_y
	local C_z = 2 * P2A_z - P2B_z

	for i, tTab in tDst do
		for j = 1, tTab[1] do
			local t, phi = srandom(tSeed), srandom(tSeed, 360)
			local r = begRad + (endRad - begRad) * t
			local h = begThk + (endThk - begThk) * t
			r = sqrt(srandom(tSeed)) * h * r + (1 - h) * r
			local tCirc =
			{
				r * cos(phi),
				r * sin(phi),
				0,
			}
			local tCoo =
			{
				(P2A_x + 3 * P1B_x - 3 * C_x - P1A_x) * t^3 + (3 * C_x - 6 * P1B_x + 3 * P1A_x) * t^2 + (3 * P1B_x - 3 * P1A_x) * t + P1A_x,
				(P2A_y + 3 * P1B_y - 3 * C_y - P1A_y) * t^3 + (3 * C_y - 6 * P1B_y + 3 * P1A_y) * t^2 + (3 * P1B_y - 3 * P1A_y) * t + P1A_y,
				(P2A_z + 3 * P1B_z - 3 * C_z - P1A_z) * t^3 + (3 * C_z - 6 * P1B_z + 3 * P1A_z) * t^2 + (3 * P1B_z - 3 * P1A_z) * t + P1A_z,
			}
			local tDerivatives =
			{
				(P2A_x + 3 * P1B_x - 3 * C_x - P1A_x) * 3 * t^2 + (3 * C_x - 6 * P1B_x + 3 * P1A_x) * 2 * t + (3 * P1B_x - 3 * P1A_x),
				(P2A_y + 3 * P1B_y - 3 * C_y - P1A_y) * 3 * t^2 + (3 * C_y - 6 * P1B_y + 3 * P1A_y) * 2 * t + (3 * P1B_y - 3 * P1A_y),
				(P2A_z + 3 * P1B_z - 3 * C_z - P1A_z) * 3 * t^2 + (3 * C_z - 6 * P1B_z + 3 * P1A_z) * 2 * t + (3 * P1B_z - 3 * P1A_z),
			}
			local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
			appendShape(tPos, i, tTab, j, vaddV(tCoo, tNormedPos), tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		spline2Add
--  Description:	Creates a quadratic spline-shaped tube connecting any two points using a control point.
--  Syntax:		spline2Add(<tPos>, <tDst>, {<tP1>, <tP2>, <tP3>, <tRad>, <tThk>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following six parameters:
--		<tP1>: a table containing the coordinates of the starting point.
--		<tP2>: a table containing the coordinates of the control point.
--		<tP3>: a table containing the coordinates of the ending point.
--		<tRad>: a table containing the initial and final radii of the tube.
--		<tThk>: a table containing the initial and final thickness of the tube lining, as a percentage of the radius.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Still not sure whether <tThk> should be a percentage instead of a fixed value.
--	2. Needs an <iMode> parameter to output non-random coordinates.
--------------------------------------------------------------------------------

function spline2Add(tPos, tDst, tPar, tRot, tSeed)
	local tP1, tP2, tP3, tRad, tThk = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5]
	local begRad, endRad, begThk, endThk = tRad[1], tRad[2], tThk[1]/100, tThk[2]/100
	for i, tTab in tDst do
		for j = 1, tTab[1] do
			local t, phi = srandom(tSeed), srandom(tSeed, 360)
			local r = begRad + (endRad - begRad) * t
			local h = begThk + (endThk - begThk) * t
			r = sqrt(srandom(tSeed)) * h * r + (1 - h) * r
			local tCirc =
			{
				r * cos(phi),
				r * sin(phi),
				0,
			}
			local tCoo =
			{
				(1 - t)^2 * tP1[1] + 2 * (1 - t) * t * tP2[1] + t^2 * tP3[1],
				(1 - t)^2 * tP1[2] + 2 * (1 - t) * t * tP2[2] + t^2 * tP3[2],
				(1 - t)^2 * tP1[3] + 2 * (1 - t) * t * tP2[3] + t^2 * tP3[3],
			}
			local tDerivatives =
			{
				2 * (1 - t) * (tP2[1] - tP1[1]) + 2 * t * (tP3[1] - tP2[1]),
				2 * (1 - t) * (tP2[2] - tP1[2]) + 2 * t * (tP3[2] - tP2[2]),
				2 * (1 - t) * (tP2[3] - tP1[3]) + 2 * t * (tP3[3] - tP2[3]),
			}
			local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
			appendShape(tPos, i, tTab, j, vaddV(tCoo, tNormedPos), tRot)
		end
	end
end

--------------------------------------------------------------------------------
--  Name:		blobAdd
--  Description:	Creates a network of metaballs, or blobs, based on the formula for electromagnetic fields.
--  Syntax:		blobAdd(<tPos>, <tDst>, {<tBlobs>, <fThrsh1>, <fThrsh2>, <tScale>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following four parameters:
--		<tBlobs>: a table containing the location coordinates and strength of each blob.
--		<fThrsh1>: threshold 1 in units of field strength.
--		<fThrsh2>: threshold 2 in units of field strength.
--		<tScale>: scale the entire shape by these amounts in the {x,y,z} directions.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. This function is kind of a mess, but the results look OK. I would 
--	   rather plot points parametrically instead of plotting them randomly 
--	   and then testing whether they're inside the blob or not. 
--	   Unfortunately, the function is an implicit isosurface.
--	2. Negative field strength/radius doesn't work here like it does in 
--	   "fieldAdd". Nor does it make sense to I think.
--	3. Should this function use the "fieldCalc" function to calculate 
--	   field strength?
--	4. See Method 1 at: http://www.geogebra.org/en/upload/files/english/Michael_Horvath/Metaballs/geogebra_metaballs.htm
--------------------------------------------------------------------------------

function blobAdd(tPos, tDst, tPar, tRot, tSeed)
	local tBlobs = tPar[1]
	local Blob_threshold_1 = tPar[2]
	local Blob_threshold_2 = tPar[3]
	local Blob_scale = tPar[4]

	-- calculate the bounding box enclosing the blobs
	local Blob_min = {0,0,0,}
	local Blob_max = {0,0,0,}
	for j, jBlob in tBlobs do
		local Blob_vector = jBlob[1]
		local Blob_radius = jBlob[2]
		Blob_min = {min(Blob_min[1], Blob_vector[1] - Blob_radius), min(Blob_min[2], Blob_vector[2] - Blob_radius), min(Blob_min[3], Blob_vector[3] - Blob_radius),}
		Blob_max = {max(Blob_max[1], Blob_vector[1] + Blob_radius), max(Blob_max[2], Blob_vector[2] + Blob_radius), max(Blob_max[3], Blob_vector[3] + Blob_radius),}
	end

	for i, tTab in tDst do
		local jCount = 1
		local jMax = tTab[1]
		while (jCount <= jMax) do
			-- generate a new point somewhere within the blob's bounding box
			local Vector_new = {srandom3(tSeed, Blob_min[1], Blob_max[1]), srandom3(tSeed, Blob_min[2], Blob_max[2]), srandom3(tSeed, Blob_min[3], Blob_max[3]),}
	--		local Vector_new = {random3(Blob_min[1], Blob_max[1]), random3(Blob_min[2], Blob_max[2]), random3(Blob_min[3], Blob_max[3]),}

			-- get the field strength at that point
			local Actual_strength = 0
			for j, jBlob in tBlobs do
				local Blob_vector = jBlob[1]
				local Blob_radius = jBlob[2]
				Actual_strength = Actual_strength + (Blob_radius / sqrt((Vector_new[1] - Blob_vector[1])^2 + (Vector_new[2] - Blob_vector[2])^2 + (Vector_new[3] - Blob_vector[3])^2))
			end

			if (Actual_strength > Blob_threshold_1) then
				-- the field strength, normalized to between 0 and 1
				local Strength_ratio = (Actual_strength - Blob_threshold_1)/(Blob_threshold_2 - Blob_threshold_1)
				-- points should be denser where the strength is greater
				if (Strength_ratio > sqrt(srandom3(tSeed))) then
					-- scale all coordinates by this amount to make the blobs look flatter and better
					Vector_new = vmultiplyV(Vector_new, Blob_scale)
					appendShape(tPos, i, tTab, jCount, Vector_new, tRot)
					jCount = jCount + 1
				end
			end
		end
	end
end

-- old version not using distributions
function blobAdd2(tPos, xNil, tPar, tRot, tSeed)
	local tBlobs = tPar[1]
	local Point_number = tPar[2]
	local Blob_threshold_1 = tPar[3]
	local Blob_threshold_2 = tPar[4]
	local Blob_scale = tPar[5]

	-- calculate the bounding box enclosing the blobs
	-- not really a good method...
	local Blob_min = {0,0,0,}
	local Blob_max = {0,0,0,}
	for j, jBlob in tBlobs do
		local Blob_vector = jBlob[1]
		local Blob_radius = jBlob[2]
		Blob_min = {min(Blob_min[1], Blob_vector[1] - Blob_radius), min(Blob_min[2], Blob_vector[2] - Blob_radius), min(Blob_min[3], Blob_vector[3] - Blob_radius),}
		Blob_max = {max(Blob_max[1], Blob_vector[1] + Blob_radius), max(Blob_max[2], Blob_vector[2] + Blob_radius), max(Blob_max[3], Blob_vector[3] + Blob_radius),}
	end

	local Point_padding = 500		-- put in tPar?
	local Point_maxradius = 1000;
	local Point_list = {}
	local Point_count = 1
	while (Point_count <= Point_number) do
		-- generate a new point somewhere within the blob's bounding box
		local Vector_new = {srandom3(tSeed, Blob_min[1], Blob_max[1]), srandom3(tSeed, Blob_min[2], Blob_max[2]), srandom3(tSeed, Blob_min[3], Blob_max[3]),}
--		local Vector_new = {random3(Blob_min[1], Blob_max[1]), random3(Blob_min[2], Blob_max[2]), random3(Blob_min[3], Blob_max[3]),}

		-- get the field strength at that point
		local Actual_strength = 0
		for j, jBlob in tBlobs do
			local Blob_vector = jBlob[1]
			local Blob_radius = jBlob[2]
			Actual_strength = Actual_strength + (Blob_radius / sqrt((Vector_new[1] - Blob_vector[1])^2 + (Vector_new[2] - Blob_vector[2])^2 + (Vector_new[3] - Blob_vector[3])^2))
		end

		if (Actual_strength > Blob_threshold_1) then
			-- the field strength, normalized to between 0 and 1
			local Strength_ratio = (Actual_strength - Blob_threshold_1)/(Blob_threshold_2 - Blob_threshold_1)
			local Random_ratio = Strength_ratio * srandom3(tSeed)
			-- points should be denser where the strength is greater
			if (Random_ratio > sqrt(srandom3(tSeed))) then
				-- the point's radius, points should be larger where the strength is greater
				local Radius_new = min(Point_maxradius * Random_ratio, Point_maxradius)

				-- scale all coordinates by this amount to make the blobs look flatter and better
				Vector_new = vmultiplyV(Vector_new, Blob_scale)

				-- make sure the asteroids are not too close to each other (TOO SLOW!!!)
				local Pass_bool = 1

				local Point_count_sub = 1
				while (Point_count_sub < Point_count) do
					local Vector_old = Point_list[Point_count_sub][1]
					local Radius_old = Point_list[Point_count_sub][2]
					local Distance = vdistance(Vector_old, Vector_new)
					local Radius_all = max(Radius_old, Radius_new, Point_padding)
					if (Distance <= Radius_all) then
						Pass_bool = 0
						break
					end
					Point_count_sub = Point_count_sub + 1
				end

				-- make sure no points are equal
--				local Point_count_sub = 1
--				while (Point_count_sub < Point_count) do
--					local Vector_old = Point_list[Point_count_sub][1]
--					if (veq(Vector_old, Vector_new) == 1) then
--						Pass_bool = 0
--						print("\tPoint_count = " .. Point_count .. "\n\tVector_old = " .. vstr(Vector_old) .. "\tPoint_count_sub = " .. Point_count_sub .. "\n\tVector_new = " .. vstr(Vector_new))
--						break
--					end
--					Point_count_sub = Point_count_sub + 1
--				end

				if (Pass_bool == 1) then
					-- the square roots here may not be necessary
					-- raising the threshold might achieve the same
					-- but the test map looks good with them
					if (Random_ratio <= sqrt(2/10)) then
						--appendShape(tPos, i, tPar, j, tCoo, tRot)
						--addAsteroid(<sAsteroidType>, <tPosition>, <fRU%>, ?, ?, ?, ?)
	--					appendShape(tPos, 1, {1, "Asteroid", "Asteroid_1", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
						appendShape(tPos, 1, {1, "Pebble", "Pebble_1", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(4/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_2", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(6/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_3", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(8/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_4", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					elseif (Random_ratio <= sqrt(10/10)) then
						appendShape(tPos, 1, {1, "Asteroid", "Asteroid_5", {0,0,0,}, 100, 0, 0, 0, 0,}, Point_count, Vector_new, tRot)
					end
					--print("Point_count = " .. Point_count .. "\nVector_new = " .. vstr(Vector_new))
					Point_list[Point_count] = {Vector_new, Radius_new}
					Point_count = Point_count + 1
				end
			end
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		fieldAdd
--  Description:	Similar to blobAdd, except it produces a heightmap based on the field strength instead of 3D blobs.
--  Syntax:		fieldAdd(<tPos>, <tRes>, {<tBlobs>, <fThrshMin>, <fThrshMax>, <fFieldSize>, <fStepHeight>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following four parameters:
--		<tBlobs>: a table containing the location coordinates and strength of each blob.
--		<fThrshMin>: minimum threshold in units of field strength.
--		<fThrshMax>: maximum threshold in units of field strength.
--		<fFieldSize>: the size of the entire field in X, Y, Z dimensions.
--		<fStepHeight>: the height of one unit of field strength.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. The output looks kind of weird near the peaks of the functions 
--	   unless you use a large value for <fFieldSize>.
--	2. See Method 1 at: http://www.geogebra.org/en/upload/files/english/Michael_Horvath/Metaballs/geogebra_metaballs.htm
--------------------------------------------------------------------------------

function fieldAdd(tPos, tTab, tPar, tRot, xNil)
	local tBlobs = tPar[1]
	local Blob_threshold_1 = tPar[2]
	local Blob_threshold_2 = tPar[3]
	local field_size = tPar[4]
	local step_height = tPar[5]
	local jCount = 0
	local jMax = floor(sqrt(tTab[1]))
	local jStep = field_size/jMax
	for j = 0, jMax do
		for k = 0, jMax do
			-- generate a new point
			local Vector_new = {j * jStep - field_size/2, 0, k * jStep - field_size/2,}

			-- get the field strength at that point
			local Actual_strength = fieldCalc(tBlobs, Vector_new, Blob_threshold_1, Blob_threshold_2)

			Vector_new = {Vector_new[1], Actual_strength * step_height, Vector_new[3],}

			jCount = jCount + 1
			appendShape(tPos, i, tTab, jCount, Vector_new, tRot)
		end
	end
end

-- calculate the strength of an electromagnetic field at a given point
function fieldCalc(tBlobs, tVector, minThrsh, maxThrsh)
	-- get the field strength at that point
	local Actual_strength = 0
	for j, jBlob in tBlobs do
		local Blob_vector = jBlob[1]
		local Blob_radius = jBlob[2]
		Actual_strength = Actual_strength + Blob_radius / sqrt((tVector[1] - Blob_vector[1])^2 + (tVector[2] - Blob_vector[2])^2 + (tVector[3] - Blob_vector[3])^2)
	end
	return max(min(Actual_strength, maxThrsh), minThrsh)
end

--------------------------------------------------------------------------------
--  Name:		flokalAdd
--  Description:	Creates a kaleidoscopic bubble and swirl pattern kind of like a doily.
--  			Based on 'doodle 4' by bitcraft, http://www.openprocessing.org/sketch/17344 
--  Syntax:		flokalAdd(<tPos>, <tRes>, {<iNx>, <iNy>, <iXmin>, <iSx>, <iSy>, <iSym>, <fEcc>, <bInside>, <fScale>}, <tRot>, <xNil>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following parameters:
--		<iNx>: the number of "horizontal" equipotential lines per charge, not taking into account iXmin.
--		<iNy>: the number of "vertical" flow lines per charge.
--		<iXmin>: size of the empty hole for each charge, measured in "horizontal" lines.
--		<iSx>: the number of extra items spaced between "horizontal" lines.
--		<iSy>: the number of extra items spaced between "vertical" lines.
--		<iSym>: number of charges arranged around the origin.
--		<fEcc>: the eccentricity of the shape, i.e. the amount the shape diverges from a circle.
--		<bInside>: are the curved lines inside or outside of the reference circle?
--		<fScale>: scale the whole shape by this amount in all directions.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<xNil>: this should always remain "nil".
--  Notes:
--	1. Not sure if <fEcc> has the same meaning as the eccentricity of an ellipse.
--------------------------------------------------------------------------------

function flokalAdd(tPos, tRes, tPar, tRot, xNil)
	local iNx = tPar[1];
	local iNy = tPar[2];
	local iXmin = tPar[3];
	local iSx = tPar[4];
	local iSy = tPar[5];
	local iSym = tPar[6];
	local fEcc = tPar[7];
	local bInside = tPar[8];
	local fScale = tPar[9];
	local pow = function(fA, fB)
		return fA^fB
	end
	local dist = function(fX1, fY1, fX2, fY2)
		return sqrt(%pow(fX2 - fX1, 2) + %pow(fY2 - fY1, 2))
	end
	local mag = function(fX, fY)
		return %dist(fX, fY, 0, 0)
	end
	local norm = function()
		local fY1 = 0;
		local fX1 = 0;
		local fX2 = exp(fX1) * cos(deg(fY1));
		local fY2 = exp(fX1) * sin(deg(fY1)) + %fEcc;
		local fD = 0;
		if (%bInside == 1) then
			fD = %pow(%mag(fX2, fY2),  1/%iSym);
		else
			fD = %pow(%mag(fX2, fY2), -1/%iSym);
		end
		local fArg = rad(atan2(fX2, fY2)) * -1/%iSym;
		local fX3 = fD * cos(deg(fArg))/TWO_PI;
		local fY3 = fD * sin(deg(fArg))/TWO_PI;
		return %mag(fX3, fY3)
	end

	-- calculate the distance from the origin to the center of each eye, then use it to normalize the shape to within 1 unit of the center
	local fNorm = norm();

	local fn = function(fX, fY)
		local aP = {};
		local fX1 = exp(fX) * cos(deg(fY));
		local fY1 = exp(fX) * sin(deg(fY)) + %fEcc;
		local fD = 0;
		if (%bInside == 1) then
			fD = %pow(%mag(fX1, fY1),  1/%iSym);
		else
			fD = %pow(%mag(fX1, fY1), -1/%iSym);
		end
		local fArg = rad(atan2(fX1, fY1)) * -1/%iSym;
		for i = 0, %iSym - 1 do
			local fX2 = fD * cos(deg(fArg + i * TWO_PI/%iSym))/TWO_PI;
			local fY2 = fD * sin(deg(fArg + i * TWO_PI/%iSym))/TWO_PI;
			aP[i + 1] = {fX2, fY2};
		end
		return aP
	end
	local lines = function(aP1, aP2)
		for i = 0, %iSym - 1 do
			local fX1 = aP1[i + 1][0 + 1];
			local fY1 = aP1[i + 1][1 + 1];
			local fX2 = aP2[i + 1][0 + 1];
			local fY2 = aP2[i + 1][1 + 1];
			local tCoo = {fX1 * %fScale/%fNorm, 0, fY1 * %fScale/%fNorm,}
			appendShape(%tPos, 1, %tRes, 0, tCoo, %tRot)
		end
	end

	-- for each vertical flowline
	for i = 0, iNy - 1 do
		local fY = i * TWO_PI/iNy;
		for j = iXmin * iSx, iNx * iSx - 1 do
			-- make sure we don't have overlapping objects
			if (mod(j, iSx) > 0) then
				local fX1 = j * TWO_PI/iNx/iSx;
				local fX2 = (j + 1) * TWO_PI/iNx/iSx;
				lines(fn(fX1, fY), fn(fX2, fY))
			end
		end
	end
	-- for each horizontal equipotential line
	for i = iXmin, iNx do
		local fX = i * TWO_PI/iNx;
		for j = 0, iNy * iSy - 1 do
			local fY1 = j * TWO_PI/iNy/iSy;
			local fY2 = (j + 1) * TWO_PI/iNy/iSy;
			lines(fn(fX, fY1), fn(fX, fY2))
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		ringAdd
--  Description:	Creates an elliptical ring centered on one focus.
--  Syntax:		ringAdd(<tPos>, <tDst>, {<fAx1>, <fAx2>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following six parameters:
--		<fAx1>: the length of axis 1.
--		<fAx2>: the length of axis 2.
--		<fThk>: the distance from the outer radius to the inner radius (varies according to <iMod>).
--		<fHgh>: the height of the ring, relative to the plane.
--		<tArc>: a table containing the beginning and ending degrees of the arc.
--		<iMod>: if 0, then non-random mode. If 1, then random mode w/ gradual width. If 2, then random mode w/ even width.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Should maybe add an option to center the shape on the origin instead of only the foci.
--------------------------------------------------------------------------------

function ringAdd(tPos, tDst, tPar, tRot, tSeed)
	local fAx1, fAx2, fThk, fHgh, tArc, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6]
	local fFoc = sqrt(abs(fAx1^2 - fAx2^2))
	local tCoo, minArc, maxArc = {}, tArc[1], tArc[2]
	for i, tTab in tDst do
		local u, w, h, arc, iNum = 0, 0, 0, 0, tTab[1]
		for j = 1, iNum do
			if (iMod == 2) then
				u = srandom3(tSeed, minArc, maxArc)
				tCoo =
				{
					cos(u) * fAx2 - srandom3(tSeed, fThk),
					random3(fHgh) - fHgh/2,
					sin(u) * fAx1 - srandom3(tSeed, fThk),
				}
			elseif (iMod == 1) then
				u = srandom3(tSeed, minArc, maxArc)
				tCoo =
				{
					cos(u) * (fAx2 - srandom3(tSeed, fThk)),
					srandom3(tSeed, fHgh) - fHgh/2,
					sin(u) * sqrt((fAx2 - srandom3(tSeed, fThk))^2 - fAx2^2 + fAx1^2),
				}
			elseif (iMod == 0) then
				u = minArc + arc
				tCoo =
				{
					cos(u) * (fAx2 + fThk/-2 + w),
					fHgh/-2 + h,
					sin(u) * (fAx1 + fThk/-2 + w),
				}
				arc, w, h = arc + (maxArc - minArc)/iNum, w + fThk/iNum, h + fHgh/iNum
			end
			tCoo = vaddV(tCoo, {0,0,fFoc,})
			appendShape(tPos, i, tTab, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		globeAdd
--  Description:	Creates a series of rings in the shape of a sphere, like the latitudinal and longitudinal lines of a globe.
--  Syntax:		globeAdd(<tPos>, <tDst>, {<fRad>, <iLat>, <iLon>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <xNil>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tPar>: a table containing the following seven parameters:
--		<fRad>: the radius of the sphere.
--		<iLat>: the number of latitudinal rings.
--		<iLon>: the number of longitudinal rings.
--		<fThk>: see the description for the "ringAdd" function.
--		<fHgh>: see the description for the "ringAdd" function.
--		<tArc>: see the description for the "ringAdd" function.
--		<iMod>: see the description for the "ringAdd" function.
--	<xNil>: this argument is ignored and is used only to adhere to the API.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--  	1. Beware that objects may overlap where the longitudinal rings intersect at the poles.
--	2. Need to get <tRot> working for this function.
--------------------------------------------------------------------------------

function globeAdd(tPos, tDst, tPar, xNil, tSeed)
	local lat, lon, u, X, Y = 0, 0, 0, 0, 0
	local fRad, iLat, iLon, fThk, fHgh, tArc, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6], tPar[7]
	for i = 1, iLat do
		lat = lat + 360/(iLat * 2 + 2)
		u = lat
		X, Y = cos(u) * fRad, sin(u) * fRad
		-- ringAdd(<tPos>, <tDst>, {<fAx1>, <fAx2>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <tRot>, <tSeed>)
		ringAdd(vaddV(tPos, {0, X, 0,}), tDst, {Y, Y, fThk, fHgh, tArc, iMod,}, {0, 0, 0,}, tSeed)
	end
	for i = 1, iLon do
		lon = lon + 360/iLon
		-- ringAdd(<tPos>, <tDst>, {<fAx1>, <fAx2>, <fThk>, <fHgh>, <tArc>, <iMod>,}, <tRot>, <tSeed>)
		ringAdd(tPos, tDst, {fRad, fRad, fThk, fHgh, tArc, iMod,}, {0, lon, 90,}, tSeed)
	end
end


--------------------------------------------------------------------------------
--  Name:		shapeAdd
--  Description:	Creates one of several available shapes.
--  Syntax:		shapeAdd(<tPos>, <tDst>, {<sLay>, ...}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing up to several parameters: <sLay> and <fA>, <fB>, ..., etc.
--		<sLay>: the type of shape to generate.
--		If <sLay> is "Cylinder", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Cone", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Ellipsoid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Cuboid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Toroid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the width of the tube, <fD> equals the thickness, and <fE> equals the height of the tube.
--		If <sLay> is "Helicoid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, and <fD> equals the width (thickness is not supported), <fE> is the number of revolutions.
--		If <sLay> is "Paraboloid", then <fA> equals the length of axis 1 at a height of 1000 units, <fB> equals the length of axis 2 at a height of 1000 units, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Hyperboloid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Astroid", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Funnel", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals roughly the inverse of the length of axis 3 for large numbers of objects, <fD> equals the thickness, and <fE> is zero.
--		If <sLay> is "Dini", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the distance between each twist, <fD> is zero, and <fE> is the number of twists.
--		If <sLay> is "Corkscrew", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the height of the screw, <fD> is zero, and <fE> is zero.
--		If <sLay> is "Seashell", then <fA> equals the length of axis 1 of the tube, <fB> equals the length of axis 2 of the tube, <fC> equals the vertical separation between revolutions, <fD> equals the radius of the center gap, and <fE> equals the number of revolutions.
--		If <sLay> is "SineDisc", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the maximum height of the wave, <fD> zero, and <fE> equals the frequency of the wave pattern.
--		If <sLay> is "SinePlane", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the maximum height of the wave, <fD> zero, and <fE> equals the frequency of the wave pattern.
--		If <sLay> is "Moebius", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals half the width of the strip, <fD> is zero, and <fE> is zero.
--		If <sLay> is "Klein", then <fA> equals the scaling along the x-axis, <fB> equals the scaling along the z-axis, <fC> equals the scaling along the y-axis, <fD> is zero, and <fE> is zero.
--		If <sLay> is "Klein8", then <fA> equals the scaling along the x-axis, <fB> equals the scaling along the z-axis, <fC> equals the scaling along the y-axis, <fD> is zero, and <fE> is the radius of the circle before scaling.
--		If <sLay> is "Boy", then <fA> equals the scaling along the x-axis, <fB> equals the scaling along the z-axis, <fC> equals the scaling along the y-axis.
--		If <sLay> is "Rectangle", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, and <fD> equals the thickness.
--		If <sLay> is "Ellipse", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the length of axis 3, and <fD> equals the thickness.
--		If <sLay> is "Triangle", [...to do.]
--		If <sLay> is "Parabola", then <fA> equals the distance between the vertex and the focus, <fB> equals the length, <fC> equals the height, and <fD> equals the thickness.
--		If <sLay> is "Hyperbola", then <fA> equals the length of axis 1, <fB> equals the length of axis 2, <fC> equals the distance from the origin to one of the foci, <fD> equals the thickness.
--		If <sLay> is "Catenary", [...to do.]
--		If <sLay> is "Hypotrochoid", then <fA> equals the radius of the greater circle, <fB> equals the radius of the lesser circle, <fC> equals the radius of the sphere sweep, <fD> equals the distance from the center of the lesser circle, and <fE> equals the number of revolutions.
--		If <sLay> is "Epitrochoid", then <fA> equals the radius of the greater circle, <fB> equals the radius of the lesser circle, <fC> equals the radius of the sphere sweep, <fD> equals the distance from the center of the lesser circle, and <fE> equals the number of revolutions.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Should be able to plot non-random points as well as random ones. Lots of extra work though.
--------------------------------------------------------------------------------

function shapeAdd(tPos, tDst, tPar, tRot, tSeed)
	local sLay = tPar[1]
	for i, tTab in tDst do
		for j = 1, tTab[1] do
			local tCoo = {}
			if (sLay == "Cuboid") then
				tCoo = makeCuboid(tPar, tSeed)
			elseif (sLay == "Ellipsoid") then
				tCoo = makeEllipsoid(tPar, tSeed)
			elseif (sLay == "Cylinder") then
				tCoo = makeCylinder(tPar, tSeed)
			elseif (sLay == "Cone") then
				tCoo = makeCone(tPar, tSeed)
			elseif (sLay == "Toroid") then
				tCoo = makeToroid(tPar, tSeed)
			elseif (sLay == "Helicoid") then
				tCoo = makeHelicoid(tPar, tSeed)
			elseif (sLay == "Paraboloid") then
				tCoo = makeParaboloid(tPar, tSeed)
			elseif (sLay == "Hyperboloid") then
				tCoo = makeHyperboloid(tPar, tSeed)
			elseif (sLay == "Astroid") then
				tCoo = makeAstroid(tPar, tSeed)
			elseif (sLay == "Funnel") then
				tCoo = makeFunnel(tPar, tSeed)
			elseif (sLay == "Dini") then
				tCoo = makeDini(tPar, tSeed)
			elseif (sLay == "Corkscrew") then
				tCoo = makeCorkscrew(tPar, tSeed)
			elseif (sLay == "Seashell") then
				tCoo = makeSeashell(tPar, tSeed)
			elseif (sLay == "SineDisc") then
				tCoo = makeSineDisc(tPar, tSeed)
			elseif (sLay == "SinePlane") then
				tCoo = makeSinePlane(tPar, tSeed)
			elseif (sLay == "Moebius") then
				tCoo = makeMoebius(tPar, tSeed)
			elseif (sLay == "Klein") then
				tCoo = makeKlein(tPar, tSeed)
			elseif (sLay == "Klein8") then
				tCoo = makeKlein8(tPar, tSeed)
			elseif (sLay == "Kuen") then
				tCoo = makeKuen(tPar, tSeed)
			elseif (sLay == "Boy") then
				tCoo = makeBoy(tPar, tSeed)
			elseif (sLay == "Rectangle") then
				tCoo = makeRectangle(tPar, tSeed)
			elseif (sLay == "Ellipse") then
				tCoo = makeEllipse(tPar, tSeed)
			--elseif (sLay == "Triangle") then
				-- to do
			elseif (sLay == "Parabola") then
				tCoo = makeParabola(tPar, tSeed)
			elseif (sLay == "Hyperbola") then
				tCoo = makeHyperbola(tPar, tSeed)
			--elseif (sLay == "Catenary") then
				-- to do
			elseif (sLay == "Hypotrochoid") then
				tCoo = makeHypotrochoid(tPar, tSeed)
			elseif (sLay == "Epitrochoid") then
				tCoo = makeEpitrochoid(tPar, tSeed)
			else
				print("function shapeAdd: shape not recognized")
			end
			appendShape(tPos, i, tTab, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		harmonographAdd
--  Description:	Creates a squiggly curving tube. The shape is similar to that produced by a harmonograph, except in three dimensions.
--			See for more info: http://en.wikipedia.org/wiki/Harmonograph
--  Syntax:		harmonographAdd(<tPos>, <tDst>, {{<fA>, <fF>, <fP>, <fD>}, <tGrp2>, <tGrp3>, <tGrp4>, <tGrp5>, <tGrp6>, <fTim>, <fRad>, <fThk>, <tScale>, <iMod>}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following seven parameters:
--		<tGrp1>: a table containing the following four parameters:
--			<fA>: amplitude.
--			<fF>: frequency (degrees).
--			<fP>: phase (degrees).
--			<fD>: damping.
--		<fGrp2>: ditto.
--		<fGrp3>: ditto.
--		<fGrp4>: ditto.
--		<fGrp5>: ditto.
--		<tGrp6>: ditto.
--		<fTim>: the time parameter.
--		<fRad>: the radius of the curving tube.
--		<fThk>: the thickness of the tube as a percentage of the radius.
--		<tScale>: scale the entire shape by this much.
--		<iMod>: 0 = non-random, 1 = random.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<tSeed>: the seed for the random number functions.
--------------------------------------------------------------------------------

function harmonographAdd(tPos, tDst, tPar, tRot, tSeed)
	local grp1, grp2, grp3, grp4, grp5, grp6 = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6]
	local fTime, fRadius, fThick, tScale, iMod = rad(tPar[7]), tPar[8], tPar[9]/100, tPar[10], tPar[11]
	local A1, F1, P1, D1 = grp1[1], grp1[2], grp1[3], grp1[4]
	local A2, F2, P2, D2 = grp2[1], grp2[2], grp2[3], grp2[4]
	local A3, F3, P3, D3 = grp3[1], grp3[2], grp3[3], grp3[4]
	local A4, F4, P4, D4 = grp4[1], grp4[2], grp4[3], grp4[4]
	local A5, F5, P5, D5 = grp5[1], grp5[2], grp5[3], grp5[4]
	local A6, F6, P6, D6 = grp6[1], grp6[2], grp6[3], grp6[4]
	print
	(
		"\n{A1 = " .. A1 .. ",\tF1 = " .. F1 .. ",\tP1 = " .. P1 .. ",\tD1 = " .. D1 .. "}," ..
		"\n{A2 = " .. A2 .. ",\tF2 = " .. F2 .. ",\tP2 = " .. P2 .. ",\tD2 = " .. D2 .. "}," ..
		"\n{A3 = " .. A3 .. ",\tF3 = " .. F3 .. ",\tP3 = " .. P3 .. ",\tD3 = " .. D3 .. "}," ..
		"\n{A4 = " .. A4 .. ",\tF4 = " .. F4 .. ",\tP4 = " .. P4 .. ",\tD4 = " .. D4 .. "}," ..
		"\n{A5 = " .. A5 .. ",\tF5 = " .. F5 .. ",\tP5 = " .. P5 .. ",\tD5 = " .. D5 .. "}," ..
		"\n{A6 = " .. A6 .. ",\tF6 = " .. F6 .. ",\tP6 = " .. P6 .. ",\tD6 = " .. D6 .. "},"
	)
	for i, tTab in tDst do
		local jNum = tTab[1]
		local t, u, r = 0, 0, 0
		local tReg, uReg = 0, 0
		local tDif, uDif = fTime/jNum, 360/jNum
		for j = 1, jNum do
			if (iMod == 1) then
				t, u = srandomSet(tSeed,fTime,360)
				r = fRadius * fThick * sqrt(srandom(tSeed)) + fRadius * (1 - fThick)
			else
				t, u, r = tReg, uReg, fRadius
			end
			local tCirc =
			{
				r * cos(u),
				r * sin(u),
				0,
			}
			local tCoo = 
			{
				A1 * sin(deg(t) * F1 + P1) * exp(-D1 * t) + A2 * sin(deg(t) * F2 + P2) * exp(-D2 * t),
				A3 * sin(deg(t) * F3 + P3) * exp(-D3 * t) + A4 * sin(deg(t) * F4 + P4) * exp(-D4 * t),
				A5 * sin(deg(t) * F5 + P5) * exp(-D5 * t) + A6 * sin(deg(t) * F6 + P6) * exp(-D6 * t),
			}
			tCoo = vmultiplyV(tCoo, tScale)
			local tDerivatives =
			{
				A1 * -D1 * exp(-D1 * t) * sin(deg(t) * F1 + P1) + A1 * F1 * exp(-D1 * t) * cos(deg(t) * F1 + P1)	+ A2 * -D2 * exp(-D2 * t) * sin(deg(t) * F2 + P2) + A2 * F2 * exp(-D2 * t) * cos(deg(t) * F2 + P2),
				A3 * -D3 * exp(-D3 * t) * sin(deg(t) * F3 + P3) + A3 * F3 * exp(-D3 * t) * cos(deg(t) * F3 + P3)	+ A4 * -D4 * exp(-D4 * t) * sin(deg(t) * F4 + P4) + A4 * F4 * exp(-D4 * t) * cos(deg(t) * F4 + P4),
				A5 * -D5 * exp(-D5 * t) * sin(deg(t) * F5 + P5) + A5 * F5 * exp(-D5 * t) * cos(deg(t) * F5 + P5)	+ A6 * -D6 * exp(-D6 * t) * sin(deg(t) * F6 + P6) + A6 * F6 * exp(-D6 * t) * cos(deg(t) * F6 + P6),
			}
			tDerivatives = vmultiplyV(tDerivatives, tScale)
			local tNormedPos = vrotate(tCirc, vanglesXY(tDerivatives))
			tCoo = vaddV(tCoo, tNormedPos)
			tReg = tReg + tDif
			uReg = uReg + uDif
			appendShape(tPos, i, tTab, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		heightmapAdd
--  Description:	Creates a matrix of dots based on heightmap data.
--  Syntax:		heightmapAdd(<tPos>, <tRes>, {<tData>, <tScale>}, <tRot>, <xNil>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following five parameters:
--		<tData>: the heightmap data in the form of a two-dimensional array.
--		<tScale>: the amount to scale the heightmap in the X, Y and Z directions.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<xNil>: this should always remain "nil". It is ignored and used only to adhere to the API.
--  Notes:
--	1. I used the included "pgm_to_array_converter.html" tool to convert 
--	   from PGM to a Lua table. PGM images can be read and written using 
--	   the Windows freeware program XnView. Make sure to set the output to 
--	   ASCII in the XnView options.
--------------------------------------------------------------------------------

function heightmapAdd(tPos, tRes, tPar, tRot, xNil)
	local tData, tScale = tPar[1], tPar[2]
	local iLen = getn(tData)
	for i, iCount in tData do
		local jLen = getn(iCount)
		for j, jCount in iCount do
			local tCoo = {i - iLen/2, jCount, j - jLen/2}
			tCoo = vmultiplyV(tCoo, tScale)
			appendShape(tPos, i, tRes, j, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		strangeAdd
--  Description:	Creates a strange attractor, such as the Clifford or Lorenz attractors.
--			See for more info: http://www.aidansamuel.com/strange.php
--  Syntax:		strangeAdd(<tPos>, <tDst>, {<fA>, <fB>, <fC>, <fD>, <fScale>}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following five parameters:
--		<fA>: an arbitrary constant that partially determines the end result.
--		<fB>: ditto.
--		<fC>: ditto.
--		<fD>: ditto.
--		<fScale>: the rough size or scale of the curve.
--	<tRot>: a table containing the X, Y and Z Euler rotation angles, in degrees, for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Would like the function to generate spirals with three or five arms instead of always just four.
--------------------------------------------------------------------------------

function strangeAdd(tPos, tDst, tPar, tRot, tSeed)
	local a, b, c, d, scale = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5]
	print("{" .. a .. "," .. b .. "," .. c .. "," .. d .. "," .. scale .. ",}")
	local minBox = {0,0,0,}
	local maxBox = {0,0,0,}
	-- determine the bounding box so that you can then center the shape on the origin
	for i, tTab in tDst do
		local x, y, z = 0, 0, 0
		for j = 1, tTab[1] do
			local ptX = sin(deg(a * y)) - z * cos(deg(b * x))
			local ptY = z * sin(deg(c * x)) - cos(deg(d * y))
			local ptZ = sin(deg(x))
			if (i == 1) and (j == 1) then
				minBox = {ptX,ptY,ptZ,}
				maxBox = {ptX,ptY,ptZ,}
			else
				minBox = {min(minBox[1], ptX), min(minBox[2], ptY), min(minBox[3], ptZ),}
				maxBox = {max(maxBox[1], ptX), max(maxBox[2], ptY), max(maxBox[3], ptZ),}
			end
			x = ptX
			y = ptY
			z = ptZ
		end
	end
	local midBox = {(minBox[1] + maxBox[1])/2, (minBox[2] + maxBox[2])/2, (minBox[3] + maxBox[3])/2,}
	--print("minBox = " .. vstr(vmultiply(minBox, scale)))
	--print("maxBox = " .. vstr(vmultiply(maxBox, scale)))
	print("midBox = " .. vstr(vmultiply(midBox, scale)))
	for i, tTab in tDst do
		local x, y, z = 0, 0, 0
		for j = 1, tTab[1] do
			local ptX = sin(deg(a * y)) - z * cos(deg(b * x))
			local ptY = z * sin(deg(c * x)) - cos(deg(d * y))
			local ptZ = sin(deg(x))
			local tCoo = 
			{
				(ptX - midBox[1]) * scale,
				(ptY - midBox[2]) * scale,
				(ptZ - midBox[3]) * scale,
			}
			--print("tCoo = " .. vstr(tCoo))
			appendShape(tPos, i, tTab, j, tCoo, tRot)
			x = ptX
			y = ptY
			z = ptZ
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		spiralAdd
--  Description:	Creates a spiral.
--  Syntax:		spiralAdd(<tPos>, <tDst>, {<sLay>, <fRad>, <iArm>, <fRot>, <fAng>, <fHgh>, <fWid>, <fThk>, <tTim>, <iMod>,}, <tRot>, <tSeed>)
--  Arguments:
--	<tPos>: a table containing the shape's center coordinates.
--	<tDst>: the distribution table used to populate the shape.
--	<tPar>: a table containing the following ten parameters:
--		<sLay>: may be either "Nautilus" or "Archimedes".
--		<fRad>: depending on <fAng>, this is either the minimum or maximum radius of the spiral.
--		<iArm>: the number of arms the spiral will have.
--		<fRot>: the number of times the spiral will rotate around the origin.
--		<fAng>: the angle (degrees) of deviation (90' and 270' make a circle).
--		<fHgh>: the height of the spiral above the plane.
--		<fWid>: the width of the spiral arms.
--		<fThk>: the thickness of the spiral arms.
--		<tTim>: a table containing the minimum and maximum values for "t" (time) at which the curve is sampled. (must be a float between 0 and 1)
--		<iMod>: 0 is non-random, 1 is random, 2 is random-mode with tapering width.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Would be nice to also have tubular cross-sections instead of only rectangular.
--------------------------------------------------------------------------------

function spiralAdd(tPos, tDst, tPar, tRot, tSeed)
	local sLay, nRad, nArm, nRot, nAng, nHgh, nWid, nThk, tTim, iMod = tPar[1], tPar[2], tPar[3], tPar[4], tPar[5], tPar[6], tPar[7], tPar[8], tPar[9], tPar[10]
	local minTim, maxTim, v, t, s, l, w, h = tTim[1], tTim[2], 360 * nRot, 0, 0, 0, 0, 0
	local rotArm = 0
	local divArm = (360/nArm)
	for k = 1, nArm do
		for i, tTab in tDst do
			local t_X, l_X, w_X, h_X = minTim, nWid/-2, nWid/-2, nThk/-2
			local iNum = tTab[1]
			for j = 1, iNum do
				local tCoo = {}
				if (iMod == 1) then
					v, t = v, srandom3(tSeed, minTim, maxTim)
					s = t
					if (sLay == "Archimedes") then
					--	s = 1 - t
					end
					l, w, h = srandom3(tSeed, nWid) - nWid/2, srandom3(tSeed, nWid) - nWid/2, srandom3(tSeed, nThk) - nThk/2
				elseif (iMod == 2) then
					v, t = v, srandom3(tSeed, minTim, maxTim)
					s = t
					if (sLay == "Archimedes") then
					--	s = 1 - t
					end
					l, w, h = srandom3(tSeed, 0, nWid * s), srandom3(tSeed, 0, nWid * s), srandom3(tSeed, nThk) - nThk/2
				elseif (iMod == 0) then
					v, t = v, t_X
					l, w, h = l_X, w_X, h_X
					t_X = t_X + (maxTim - minTim)/iNum
					l_X, w_X, h_X = l_X + nWid/iNum, w_X + nWid/iNum, h_X + nThk/iNum
				end
				if (sLay == "Nautilus") then
					tCoo =
					{
						exp(rad(v * t)/tan(nAng)) * cos(v * t) * nRad + l,
						h - nHgh * t + nHgh/2,
						exp(rad(v * t)/tan(nAng)) * sin(v * t) * nRad + w,
					}
				elseif (sLay == "Archimedes") then
					tCoo =
					{
						cos(v * t) * t * nRad + l,
						h + nHgh * t - nHgh/2,
						sin(v * t) * t * nRad + w,
					}
				end
				appendShape(tPos, i, tTab, j, vrotate(tCoo, {0,rotArm,0,}), tRot)
			end
		end
		rotArm = rotArm + divArm
	end
end


--------------------------------------------------------------------------------
--  Name:		stitchAdd
--  Description:	Generates a triangle made of crosshatched line segments, like in the art of curvestitching.
--  Syntax:		stitchAdd(<tPos>, <tRes>, {<tPtA>, <tPtB>, <tPtC>, <iNum>, <bAll>, <bCorners>}, <tRot>, <xNil>)
--  Inputs:
--	<tPos>: the center of the shape.
--	<tRes>: a table containing the parameters of the outputted pebble or asteroid.
--	<tPar>: a table containing the following parameters:
--		<tPtA>: a table containing the X, Y and Z coordinates of a point on the triangle.
--		<tPtB>: a table containing the X, Y and Z coordinates of a point on the triangle.
--		<tPtC>: a table containing the X, Y and Z coordinates of the center point on the triangle.
--		<iNum>: the number of line segments to generate.
--		<bAll>: turn this off to generate only the points on the spline defined by the line segments.
--		<bCorners>: enables/disables generation of points at the corners of the triangle to prevent duplicate overlapping asteroids.
--	<tRot>: a table containing the X, Y and Z rotation angles (degrees) for the entire object.
--	<xNil>: this should always remain "nil". It is ignored and used only to adhere to the API.
--  Notes:
--	1. Not sure I completely fixed the overlapping objects at the cornes and edges.
--------------------------------------------------------------------------------

function stitchAdd(tPos, tRes, tPar, tRot, xNil)
	local Point_A, Point_B, Point_C = tPar[1], tPar[2], tPar[3]
	local n, All, Corners = tPar[4], tPar[5], tPar[6]
	local iCount = 0
	if (All == 1) then
		local Start = 1
		local End = n - 1
		if (Corners == 1) then
			Start = 0
			End = n
		end
		for i = Start, End do
			for j = Corners and 0 or 1, Corners and n or n - 1 do
				local tCoo =
				{
					i * j/n^2 * Point_A[1] + (n - i) * (n - j)/n^2 * Point_C[1] + (i * (n - j) + j * (n - i))/n^2 * Point_B[1],
					i * j/n^2 * Point_A[2] + (n - i) * (n - j)/n^2 * Point_C[2] + (i * (n - j) + j * (n - i))/n^2 * Point_B[2],
					i * j/n^2 * Point_A[3] + (n - i) * (n - j)/n^2 * Point_C[3] + (i * (n - j) + j * (n - i))/n^2 * Point_B[3],
				}
				iCount = iCount + 1
				appendShape(tPos, 1, tRes, iCount, tCoo, tRot)
			end
		end
	else
		local Start = 1/n
		local End = (1 - 1/n)
		if (Corners == 1) then
			Start = 0
			End = 1
		end
		for i = Start, End, 1/n do
			local tCoo =
			{
				(1 - i)^2 * Point_A[1] + 2 * (1 - i) * i * Point_C[1] + i^2 * Point_B[1],
				(1 - i)^2 * Point_A[2] + 2 * (1 - i) * i * Point_C[2] + i^2 * Point_B[2],
				(1 - i)^2 * Point_A[3] + 2 * (1 - i) * i * Point_C[3] + i^2 * Point_B[3],
			}
			iCount = iCount + 1
			appendShape(tPos, 1, tRes, iCount, tCoo, tRot)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		literalAdd
--  Description:	Adds the contents of a distribution table to the map without changing any values.
--  Syntax:		literalAdd(<tDst>)
--  Arguments:
--	<tDst>: the distribution table used to populate the shape.
--------------------------------------------------------------------------------

function literalAdd(tDst)
	for i, tTab in tDst do
		for j = 1, tTab[1] do
			appendShape({0, 0, 0,}, i, tTab, j, {0, 0, 0,}, {0, 0, 0,})
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		easyPatch
--  Description:	Creates a resource patch with minimal effort.
--  Syntax:		easyPatch(<tPos>, <fRUs>, <tSeed>)
--  Arguments:
--	<tPos>: the shape's center coordinates.
--	<fRUs>: the percent of the default RU to retain.
--	<tSeed>: the seed for the random number functions.
--  Notes:
--	1. Need to consider once again whether <fRUs> and <tSeed> should be optional.
--------------------------------------------------------------------------------

function easyPatch(tPos, fRUs, tSeed)
	if not (fRUs) then
		fRUs = 100
	end
	if not (tSeed) then
		tSeed = {seed = 977322}
	end
	local tCoo = {}
	-- asteroid_type = {amount, inner radius, outer radius,}
	local easyPatchDist = {Asteroid_4 = {1, 0, 0,}, Asteroid_3 = {4, 400, 800,}, Asteroid_2 = {5, 800, 1600,},}
	for k, tTab in easyPatchDist do
		for j = 1, tTab[1] do
			local r = srandom3(tSeed, tTab[2], tTab[3])
			local v, u = srandomSet(tSeed, 180,360)
			tCoo =
			{
				tPos[1] + sqrt(r^2 - (r * cos(v))^2) * cos(u),
				tPos[2] + r * cos(v),
				tPos[3] + sqrt(r^2 - (r * cos(v))^2) * sin(u),
			}
			addAsteroid(k, tCoo, fRUs, 0, 0, 0, 0)
		end
	end
end


--------------------------------------------------------------------------------
--  Name:		randomMusic
--  Description:	Randomly selects the level music.
--  Syntax:		randomMusic(<tSeed>, <iMod>, <tTab>, <sDir>)
--  Arguments:
--	<tSeed>: the seed for the random number functions.
--	<iMod>: may be 0, 1, 2, 3, 4 or 5.
--	If <iMod> is 0, then this function is disabled.
--	If <iMod> is 1, then the level music is selected from only the ambient tracks.
--	If <iMod> is 2, then the level music is selected from only the battle tracks.
--	If <iMod> is 3, then the level music is selected from both the ambient and battle tracks.
--	If <iMod> is 4, then the level music is selected from only <tTab>.
--	If <iMod> is 5, then the level music is selected from all of the above.
--	<tTab>: (optional) a table containing the names of the custom audio tracks. (table)
--	<sDir>: (optional) the directory where the extra files can be found. Must have a trailing slash. (string)
--  Notes:
--	1. This function must be called from within the "NonDetermChunk" 
--	   portion of a ".level" file.
--	2. Since it is a NonDetermChunk function, it does not need to be seeded 
--	   manually in order to avoid desyncs (I think).
--------------------------------------------------------------------------------

function randomMusic(tSeed, iMod, tTab, sDir)
	local iTot = 23
	local iLen = 0
	if (tTab) then
		iLen = getn(tTab)
		iTot = iTot + iLen
	end
	local ranNum, musDir, musTrk = 0, "", ""
	local musTab =
	{
		"amb_01", "amb_02", "amb_03", "amb_04", "amb_05", "amb_06", "amb_07", "amb_08", "amb_09", "amb_10", "amb_11", "amb_12", "amb_13", "amb_14",
		"battle_01", "battle_04", "battle_04_alt", "battle_06", "battle_keeper", "battle_movers", "battle_planetkillers", "battle_sajuuk", "bentus_arrival",
	}
	if ((iMod == 4) or (iMod == 5)) then
		for k = 1, iLen do
			musTab[k + 23] = tTab[k]
		end
	end
	if (iMod == 1) then
		ranNum = srandom(tSeed, 1, 14)
	elseif (iMod == 2) then
		ranNum = srandom(tSeed, 15, 23)
	elseif (iMod == 3) then
		ranNum = srandom(tSeed, 1, 23)
	elseif (iMod == 4) then
		ranNum = srandom(tSeed, 24, 23 + iLen)
	elseif (iMod == 5) then
		ranNum = srandom(tSeed, 1, 23 + iLen)
	end
	if (ranNum <= 14) then
		musDir = "data:sound\\music\\ambient\\"
	elseif (ranNum <= 23) then
		musDir = "data:sound\\music\\battle\\"
	elseif (ranNum <= (23 + iLen)) then
		musDir = sDir
	end
	if (iMod ~= 0) then
		setDefaultMusic(musDir .. musTab[ranNum])
		print("Level music: \"" .. musTab[ranNum] .. "\" (" .. ranNum .. "/" .. iTot .. ")")
	end
end


--------------------------------------------------------------------------------
--  Name:		randomBackground
--  Description:	Randomly selects the level background.
--  Syntax:		randomBackground(<tSeed>, <iMod>, <tTab>)
--  Arguments:
--	<tSeed>: the seed for the random number functions.
--	<iMod>: may be 0, 1, 2, 3, 4 or 5.
--	If <iMod> is 0, then this function has been disabled.
--	If <iMod> is 1, then the level background is selected from only the mission backgrounds.
--	If <iMod> is 2, then the level background is selected from only the other backgrounds.
--	If <iMod> is 3, then the level background is selected from both the mission and other backgrounds.
--	If <iMod> is 4, then the level background is selected from only <tTab>.
--	If <iMod> is 5, then the level background is selected from all of the above.
--	<tTab>: (optional) a table containing the names of the custom backgrounds.
--  Notes:
--	1. This function must be called from within the "NonDetermChunk" 
--	   portion of a ".level" file.
--	2. Since it is a NonDetermChunk function, it does not need to be seeded 
--         manually in order to avoid desyncs (I think).
--------------------------------------------------------------------------------

function randomBackground(tSeed, iMod, tTab)
	local iTot = 22
	local iLen = 0
	if (tTab) then
		iLen = getn(tTab)
		iTot = iTot + iLen
	end
	local ranNum = 0
	local backgroundTable =
	{
		"m01", "m02", "m03", "m04", "m05", "m06", "m07", "m08", "m09", "m10", "m11", "m12", "m13", "m14", "m15",
		"planet", "quick", "singlesun", "tanis", "taniswstars", "black", "white",
	}
	if ((iMod == 4) or (iMod == 5)) then
		for k = 1, iLen do
			backgroundTable[k + 22] = tTab[k]
		end
	end
	if (iMod == 1) then
		ranNum = srandom(tSeed, 1, 15)
	elseif (iMod == 2) then
		ranNum = srandom(tSeed, 16, 22)
	elseif (iMod == 3) then
		ranNum = srandom(tSeed, 1, 22)
	elseif (iMod == 4) then
		ranNum = srandom(tSeed, 23, 22 + iLen)
	elseif (iMod == 5) then
		ranNum = srandom(tSeed, 1, 23 + iLen)
	end
	if (iMod ~= 0) then
		loadBackground(backgroundTable[ranNum])
		print("Level background: \"" .. backgroundTable[ranNum] .. "\" (" .. ranNum .. "/" .. iTot .. ")")
	end
end


--------------------------------------------------------------------------------
-- Random number functions.
--

-- Randomly returns either 1 or -1.
function randomSign()
	if (random() > 0.5) then
		return 1
	else
		return -1
	end
end

-- Randomly returns either 1 or 0.
function randomBit()
	if (random() > 0.5) then
		return 1
	else
		return 0
	end
end

-- Works just like random(), but can accept zero as an argument.
function random2(fVal1, fVal2)
	if (fVal2) then
		if ((fVal2 - fVal1) == 0) then
			return fVal2
		else
			return random(fVal1, fVal2)
		end
	elseif (fVal1) then
		if (fVal1 == 0) then
			return 0
		else
			return random(fVal1)
		end
	else
		return random()
	end
end

-- Works just like random(), but can accept zero as an argument and always returns a float value, not an integer.
function random3(fVal1, fVal2)
	if (fVal2) then
		return fVal1 + random() * (fVal2 - fVal1)
	elseif (fVal1) then
		return random() * fVal1
	else
		return random()
	end
end

-- For each argument, returns a random float value between 0 and the argument.
function randomSet(...)
	local v = {}
	for i = 1, getn(arg) do
		v[i] = random3(arg[i])
	end
	if arg[5] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[4] then
		return v[1], v[2], v[3], v[4]
	elseif arg[3] then
		return v[1], v[2], v[3]
	elseif arg[2] then
		return v[1], v[2]
	elseif arg[1] then
		return v[1]
	end
end

-- For every two arguments, returns a random float value between the former argument and the latter argument.
function randomSet2(...)
	local v = {}
	for i = 2, getn(arg), 2 do
		v[i/2] = random3(arg[i-1], arg[i])
	end
	if arg[10] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[8] then
		return v[1], v[2], v[3], v[4]
	elseif arg[6] then
		return v[1], v[2], v[3]
	elseif arg[4] then
		return v[1], v[2]
	elseif arg[2] then
		return v[1]
	end
end

-- rough adaptation of Knuth float generator
-- Note: seedobj must be a table with a field named `seed`;
-- this field must be negative; after the first number has
-- been generated, the seedobj table will be populated with
-- additional state needed to generate numbers; changing its
-- `seed` field to a negative number will reinitialize the
-- generator and start a new pseudorandom sequence.
function srandom( seedobj, fVal1, fVal2 )
	local B =  4000000
	local ma = seedobj.ma
	local seed = seedobj.seed
	local mj, mk
	if seed < 0 or not ma then
		ma = {}
		seedobj.ma = ma
		mj = abs( 1618033 - abs( seed ) )
		mj = mod( mj, B )
		ma[55] = mj
		mk = 1
		for i = 1, 54 do
			local ii = mod( 21 * i,  55 )
			ma[ii] = mk
			mk = mj - mk
			if mk < 0 then
				mk = mk + B
			end
			mj = ma[ii]
		end
		for k = 1, 4 do
			for i = 1, 55 do
				ma[i] = ma[i] - ma[ 1 + mod( i + 30,  55) ]
				if ma[i] < 0 then
					ma[i] = ma[i] + B
				end
			end
		end
		seedobj.inext = 0
		seedobj.inextp = 31
		seedobj.seed = 1
	end -- if
	local inext = seedobj.inext
	local inextp = seedobj.inextp
	inext = inext + 1
	if inext == 56 then
		inext = 1
	end
	seedobj.inext = inext
	inextp = inextp + 1
	if inextp == 56 then
		inextp = 1
	end
	seedobj.inextp = inextp
	mj = ma[ inext ] - ma[ inextp ]
	if mj < 0 then
		mj = mj + B
	end
	ma[ inext ] = mj
	local temp_rand = mj / B
	if fVal2 then
		return floor( fVal1 + 0.5 + temp_rand * ( fVal2 - fVal1 ) )
	elseif fVal1 then
		return floor( temp_rand * fVal1 ) + 1
	else
		return temp_rand
	end
end


-- Randomly returns either 1 or -1. Seeded.
function srandomSign(seedobj)
	if (srandom(seedobj) > 0.5) then
		return 1
	else
		return -1
	end
end

-- Randomly returns either 1 or 0. Seeded.
function srandomBit(seedobj)
	if (srandom(seedobj) > 0.5) then
		return 1
	else
		return 0
	end
end

-- Works just like random(), but can accept zero as an argument. Seeded.
function srandom2(seedobj, fVal1, fVal2)
	if (fVal2) then
		if ((fVal2 - fVal1) == 0) then
			return fVal2
		else
			return srandom(seedobj, fVal1, fVal2)
		end
	elseif (fVal1) then
		if (fVal1 == 0) then
			return 0
		else
			return srandom(seedobj, fVal1)
		end
	else
		return srandom(seedobj)
	end
end

-- Works just like random(), but can accept zero as an argument and always returns a float value, not an integer. Seeded.
function srandom3(seedobj, fVal1, fVal2)
	if (fVal2) then
		return fVal1 + srandom(seedobj) * (fVal2 - fVal1)
	elseif (fVal1) then
		return srandom(seedobj) * fVal1
	else
		return srandom(seedobj)
	end
end

-- For each argument, returns a random float value between 0 and the argument. Seeded.
function srandomSet(seedobj, ...)
	local v = {}
	for i = 1, getn(arg) do
		v[i] = srandom3(seedobj, arg[i])
	end
	if arg[5] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[4] then
		return v[1], v[2], v[3], v[4]
	elseif arg[3] then
		return v[1], v[2], v[3]
	elseif arg[2] then
		return v[1], v[2]
	elseif arg[1] then
		return v[1]
	end
end

-- For every two arguments, returns a random float value between the former argument and the latter argument. Seeded.
function srandomSet2(seedobj, ...)
	local v = {}
	for i = 2, getn(arg), 2 do
		v[i/2] = srandom3(seedobj, arg[i-1], arg[i])
	end
	if arg[10] then
		return v[1], v[2], v[3], v[4], v[5]
	elseif arg[8] then
		return v[1], v[2], v[3], v[4]
	elseif arg[6] then
		return v[1], v[2], v[3]
	elseif arg[4] then
		return v[1], v[2]
	elseif arg[2] then
		return v[1]
	end
end

-- Returns a vector with random components.
function vrand(tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, random(tVecIn[i]))
	end
	return tVecOut
end

-- Returns a vector with random components. Seeded.
function svrand(seedobj, tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, srandom(seedobj, tVecIn[i]))
	end
	return tVecOut
end

-- Returns a vector with random components.
function vrand2(tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, random2(tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

-- Returns a vector with random components. Seeded.
function svrand2(seedobj, tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, srandom2(seedobj, tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

-- Returns a vector with random components.
function vrand3(tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, random3(tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

-- Returns a vector with random components. Seeded.
function svrand3(seedobj, tVecIn)
	local tVecOut = {}
	for i = 1, getn(tVecIn) do
		tinsert(tVecOut, srandom3(seedobj, tVecIn[i][1], tVecIn[i][2]))
	end
	return tVecOut
end

--------------------------------------------------------------------------------
-- Some trigonometric functions.
--

-- Returns the hyperbolic cosine of an angle.
function cosh(fAng)
	return (exp(fAng) + exp(-fAng))/2
end


-- Returns the hyperbolic sine of an angle.
function sinh(fAng)
	return (exp(fAng) - exp(-fAng))/2
end


-- Returns the hyperbolic tangent of an angle.
function tanh(fAng)
	return (exp(fAng) - exp(-fAng))/(exp(fAng) + exp(-fAng))
end


-- Returns the hyperbolic cosecant of an angle.
function csch(fAng)
	return 1/sinh(fAng)
end


-- Returns the hyperbolic secant of an angle.
function sech(fAng)
	return 1/cosh(fAng)
end


-- Returns the hyperbolic cotangent of an angle.
function coth(fAng)
	return 1/tanh(fAng)
end


-- Returns the cosecant of an angle.
function csc(fAng)
	return 1/sin(fAng)
end


-- Returns the secant of an angle.
function sec(fAng)
	return 1/cos(fAng)
end


-- Returns the cotangent of an angle.
function cot(fAng)
	return 1/tan(fAng)
end


-- Returns the exsecant of an angle.
function exsec(fAng)
	return sec(fAng) - 1
end


-- Returns the coexsecant of an angle.
function coexsec(fAng)
	return csc(fAng) - 1
end


-- Returns the versesine of an angle.
function vers(fAng)
	return 1 - cos(fAng)
end


-- Returns the coversesine of an angle.
function covers(fAng)
	return 1 - sin(fAng)
end


-- Returns the half-versesine of an angle.
function hav(fAng)
	return vers(fAng)/2
end


--------------------------------------------------------------------------------
-- Some miscellaneous mathematical functions.
--

-- Rounds a number to the nearest integer.
function round(fVal)
	return floor(fVal + 0.5)
end

-- Some programming languages need this
function pow(fA, fB)
	return fA^fB
end


--------------------------------------------------------------------------------
-- Some vector functions.
--

-- Returns the normalized form of a vector.
function vnormalize(tVec)
	return vdivide(tVec, vlength(tVec))
end

-- Returns the length of a vector.
function vlength(tVec)
	return sqrt(vsum(vpower(tVec, 2)))
end

-- Returns the distance between two vectors.
function vdistance(tVec1, tVec2)
	return vlength(vsubtractV(tVec2, tVec1))
end

-- Returns the dot product of two vectors.
function vdot(tVec1, tVec2)
	return vsum(vmultiplyV(tVec1, tVec2))
end

-- Returns the angle between two vectors.
function vangle(tVec1, tVec2)
	return acos(vdot(vnormalize(tVec1), vnormalize(tVec2)))
end

-- Returns the cross product of two vectors as a new vector.
function vcross(tVec1, tVec2)
	return
	{
		tVec1[2] * tVec2[3] - tVec1[3] * tVec2[2],
		tVec1[3] * tVec2[1] - tVec1[1] * tVec2[3],
		tVec1[1] * tVec2[2] - tVec1[2] * tVec2[1],
	}
end

-- tests whether two vectors are equal
function veq(tVec1, tVec2)
	if (tVec1[1] == tVec2[1]) and (tVec1[2] == tVec2[2]) and (tVec1[3] == tVec2[3]) then
		return 1
	else
		return 0
	end
end

-- returns the midpoint of two points as a new point
function vmidpoint(tVec1, tVec2)
	return
	{
		(tVec1[1] + tVec2[1]) / 2,
		(tVec1[2] + tVec2[2]) / 2,
		(tVec1[3] + tVec2[3]) / 2,
	}
end

-- Adds an amount to each vector component, then returns the resulting vector.
function vadd(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tVec[i] + fVal
	end
	return tmpVec
end

-- Adds the components of the second vector to the components of the first vector, then returns the resulting vector.
function vaddV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i] + tTab
	end
	return tmpVec
end

-- Subtracts an amount from each vector component, then returns the resulting vector.
function vsubtract(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tVec[i] - fVal
	end
	return tmpVec
end

-- Subtracts the components of the second vector from the components of the first vector, then returns the resulting vector.
function vsubtractV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i] - tTab
	end
	return tmpVec
end

-- Multiplies each vector component by some amount, then returns the resulting vector.
function vmultiply(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tTab * fVal
	end
	return tmpVec
end

-- Multiplies the components of the first vector by the components of the second vector, then returns the resulting vector.
function vmultiplyV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i] * tTab
	end
	return tmpVec
end

-- Divides each vector component by some amount, then returns the resulting vector.
function vdivide(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tTab/fVal
	end
	return tmpVec
end

-- Divides the components of the first vector by the components of the second vector, then returns the resulting vector.
function vdivideV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i]/tTab
	end
	return tmpVec
end

-- Raises each vector component to the some power, then returns the new vector.
function vpower(tVec, fVal)
	local tmpVec = {}
	for i, tTab in tVec do
		tmpVec[i] = tTab^fVal
	end
	return tmpVec
end

-- Raises the components of the first vector to the power specified by the components the second vector, then returns the new vector.
function vpowerV(tVec1, tVec2)
	local tmpVec = {}
	for i, tTab in tVec2 do
		tmpVec[i] = tVec1[i]^tTab
	end
	return tmpVec
end

-- Returns the sum of all the vector's components.
function vsum(tVec1)
	local tmpVal = 0
	for i, tTab in tVec1 do
		tmpVal = tmpVal + tTab
	end
	return tmpVal
end

-- Returns a vector converted into a string.
function vstr(tVec)
	local tmpStr = "{"
	for i, tTab in tVec do
		tmpStr = tmpStr .. tTab .. ", "
	end
	tmpStr = tmpStr .. "}\n"
	return tmpStr
end

-- Rotates a vector around the origin by the specified Euler angles, then returns the resulting vector.
-- Rotates around the Z-axis first, followed by the X-axis and the Y-axis.
function vrotate(tVec, tAng)
	tVec =
	{
		tVec[1] * cos(tAng[3]) - tVec[2] * sin(tAng[3]),
		tVec[1] * sin(tAng[3]) + tVec[2] * cos(tAng[3]),
		tVec[3],
	}
	tVec =
	{
		tVec[1],
		tVec[2] * cos(tAng[1]) - tVec[3] * sin(tAng[1]),
		tVec[2] * sin(tAng[1]) + tVec[3] * cos(tAng[1]),
	}
	tVec =
	{
		tVec[1] * cos(tAng[2]) + tVec[3] * sin(tAng[2]),
		tVec[2],
		-1 * tVec[1] * sin(tAng[2]) + tVec[3] * cos(tAng[2]),
	}
	return tVec
end

-- Returns an array containing the vector's Euler angles, relative to the Z-axis.
-- To reproduce the original vector, rotate a point on the Z-axis by these angles.
function vanglesXY(tVec2)
	local fSgnX, fSgnY, tPrjB1 = 1, 1, vnormalize({tVec2[1], 0, tVec2[3],})
	if (tPrjB1[1] ~= 0) then
		fSgnX = tPrjB1[1]/abs(tPrjB1[1]) * -1
	end
	local fAngY = acos(tPrjB1[3]) * fSgnX
	local tPrjB2 = vnormalize(vrotate(tVec2, {0, fAngY, 0,}))
	if (tPrjB2[2] ~= 0) then
		fSgnY = tPrjB2[2]/abs(tPrjB2[2])
	end
	local fAngX = acos(tPrjB2[3]) * fSgnY
	return {fAngX * -1, fAngY * -1, 0,}
end

-- Rotates the first vector around the second vector by some amount, then returns the resulting vector.
function vaxis_rotate(tVec1, tVec2, fAngZ)
	local tAng = vanglesXY(tVec2)
	return vrotate(vrotate(vrotate(vrotate(tVec1, {0, tAng[2], 0,}), {tAng[1], 0, 0,}), {0, 0, fAngZ,}), vmultiply(tAng, -1))
end


--------------------------------------------------------------------------------
-- Some table manipulation functions.
--

--------------------------------------------------------------------------------
-- Returns the length of a table. Useful where the 'getn' function is normally unavailable.
if not getn then
	function getn(tTable)
		local nCount = 0
		for i, iCount in tTable do
			if i ~= "n" then
				nCount = nCount + 1
			end
		end
		return nCount
	end
end


--------------------------------------------------------------------------------
-- Inserts an item into a table. Useful where the 'tinsert' function is normally unavailable.
if not tinsert then
	function tinsert(tTable, Arg1, Arg2)
		if (Arg2) then
			local TempTable = {}
			for i = Arg1, getn(tTable) do
				TempTable[i + 1] = tTable[i]
			end
			for i = Arg1, getn(tTable) do
				tTable[i + 1] = TempTable[i + 1]
			end
			tTable[Arg1] = Arg2
		else
			tTable[getn(tTable) + 1] = Arg1
		end
	end
end


--------------------------------------------------------------------------------
-- Compares two tables and returns true if they're equal and false if they're not.
function tcomp(tTable1, tTable2)
	local same = 1
	if (getn(tTable1) ~= getn(tTable2)) then
		same = 0
	else
		for i, k in tTable1 do
			if (type(tTable1[i]) == "table") and (type(tTable2[i]) == "table") then
				same = tcomp(tTable1[i], tTable2[i])
				if (same == 0) then
					break
				end
			elseif (tTable1[i] ~= tTable2[i]) then
				same = 0
				break
			end
		end
	end
	return same
end


--------------------------------------------------------------------------------
-- Mathematical shape functions
--

function makeCuboid(tPar, tSeed)
	local t, p = srandom(tSeed), srandomSign(tSeed)
	local l, w, h, L, W, H = srandomSet2(tSeed, -tPar[2], tPar[2], -tPar[3], tPar[3], -tPar[4], tPar[4], tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	if (t < 1/3) then
		l = L * p
	elseif (t < 2/3) then
		w = W * p
	elseif (t <= 1) then
		h = H * p
	end
	return {l, h, w,}
end

function makeEllipsoid(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local u, v = srandomSet(tSeed, 180, 360)
	return {L * cos(v) * sin(u), H * sin(v) * sin(u), W * cos(u),}
end

function makeCylinder(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local u, v = srandomSet(tSeed, 180, 360)
	return {L * cos(v), h, W * sin(v),}
end

function makeCone(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {(1 - h/c) * L * cos(v)/2, h, (1 - h/c) * W * sin(v)/2,}
end

function makeToroid(tPar, tSeed)
	local H, M = srandomSet2(tSeed, tPar[4] - tPar[5], tPar[4], tPar[6] - tPar[5], tPar[6])
	local v, o = srandomSet(tSeed, 360, 360)
	return {(tPar[2] + M * cos(v)) * cos(o), H * sin(v), (tPar[3] + M * cos(v)) * sin(o),}
end

function makeHelicoid(tPar, tSeed)
	local L, W = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3])
	local t = srandom(tSeed)
	return {L * cos(t * tPar[6] * 360), tPar[4] * (2 * t - 1), W * sin(t * tPar[6] *  360),}
end

function makeParaboloid(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {L * sqrt(h/1000) * cos(v), h, W * sqrt(h/1000) * sin(v),}
end

function makeHyperboloid(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local t, v, p = srandom(tSeed), srandom3(tSeed, 360), srandomSign(tSeed)
	return {L * sqrt(1 + (t * p)^2) * cos(v), H * (t * p), W * sqrt(1 + (t * p)^2) * sin(v),}
end

function makeAstroid(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local v, o = srandomSet(tSeed, 360, 360)
	return {L * (cos(o) * cos(v))^3, H * (sin(v))^3, W * (sin(o) * cos(v))^3,}
end

function makeFunnel(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local t, v = srandom(tSeed), srandom3(tSeed, 360)
	return {L * t * cos(v), H * log(t)/10, W * t * sin(v),}
end

function makeDini(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local v, u = srandomSet(tSeed, 360, 180)
	return {L * (cos(tPar[6] * v) * sin(u/2)), H * (cos(u/2) + log(tan(u/4)) + rad(tPar[6] * v)/(2 * PI)), W * (sin(tPar[6] * v) * sin(u/2)),}
end

function makeCorkscrew(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local v, u = srandomSet(tSeed, 360, 180)
	return {L * cos(v) * cos(u), H * rad(v)/(2 * PI), W * sin(v) * cos(u),}
end

function makeSeashell(tPar, tSeed)
	local t, o = srandom(tSeed), srandom3(tSeed, 360)
	return
	{
		(tPar[5]/tPar[6] + (1 - t) * (1 + cos(o))) * tPar[2] * cos(tPar[6] * t * 360),
		tPar[4] * t^(1/2) * (2 * tPar[6] - 1) + tPar[3] * sin(o) * (1 - t),
		(tPar[5]/tPar[6] + (1 - t) * (1 + cos(o))) * tPar[2] * sin(tPar[6] * t * 360),
	}
end

function makeSineDisc(tPar, tSeed)
	local L, W, H = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], tPar[4] - tPar[5], tPar[4])
	local t, v = srandom(tSeed), srandom3(tSeed, 360)
	return {L * t * cos(v), H * sin(t * 360 * tPar[6]), W * t * sin(v),}
end

function makeSinePlane(tPar, tSeed)
	local s, t = srandom(tSeed), srandom(tSeed)
	return
	{
		tPar[2] * s * 2 - tPar[2],
		tPar[4] * (sin(s * 360 * tPar[6]) + sin(t * 360 * tPar[6]))/2,
		tPar[3] * t * 2 - tPar[3],
	}
end

function makeMoebius(tPar, tSeed)
	local L, W, h = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {L * cos(v) + h * cos(v/2) * cos(v), h * sin(v/2), W * sin(v) + h * cos(v/2) * sin(v),}
end

function makeKlein(tPar, tSeed)
	local u, v = srandomSet(tSeed,360,180)
	return
	{
		cos(u) * (cos(u/2) * (sqrt(2) + cos(v)) + sin(u/2) * sin(v) * cos(v))	* tPar[2],
		(-sin(u/2) * (sqrt(2) + cos(v)) + cos(u/2) * sin(v) * cos(v))		* tPar[4],
		sin(u) * (cos(u/2) * (sqrt(2) + cos(v)) + sin(u/2) * sin(v) * cos(v))	* tPar[3],
	}
end

function makeKlein8(tPar, tSeed)
	local u, v = srandomSet(tSeed,360,360)
	return
	{
		(tPar[6] + cos(u/2) * sin(v) - sin(u/2) * sin(v*2)) * cos(u)	* tPar[2],
		(sin(u/2) * sin(v) + cos(u/2) * sin(v*2))			* tPar[3],
		(tPar[6] + cos(u/2) * sin(v) - sin(u/2) * sin(v*2)) * sin(u)	* tPar[4],
	}
end

function makeKuen(tPar, tSeed)
	local u, v = srandomSet(tSeed,180,360)
	return
	{
		2 * (cos(v) + rad(v) * sin(v)) * sin(u)/(1 + rad(v)^2 * sin(u)^2)	* tPar[2],
		(log(tan(u/2)) + 2 * cos(u)/(1 + rad(v)^2 * sin(u)^2))			* tPar[3],
		2 * (sin(v) - rad(v) * cos(v)) * sin(u)/(1 + rad(v)^2 * sin(u)^2)	* tPar[4],
	}
end

function makeBoy(tPar, tSeed)
	local u, v = srandom(tSeed,180) - 90, srandom(tSeed,180)
	return
	{
		(sqrt(2) * cos(v)^2 * cos(2 * u) + cos(u) * sin(2 * v)) / (2 - sqrt(2) * sin(3 * u) * sin(2 * v))	* tPar[2],
		(3 * cos(v)^2) / (2 - sqrt(2) * sin(3 * u) * sin(2 * v))						* tPar[3],
		(sqrt(2) * cos(v)^2 * sin(2 * u) - sin(u) * sin(2 * v)) / (2 - sqrt(2) * sin(3 * u) * sin(2 * v))	* tPar[4],
	}
end

function makeRectangle(tPar, tSeed)
	local L, W, l = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[2], tPar[2])
	local w, h = srandomSet2(tSeed, -tPar[3], tPar[3], -tPar[4], tPar[4])
	local p, t = srandomSign(tSeed), srandom(tSeed)
	if (t < 1/2) then
		l = L * p
	else
		w = W * p
	end
	return {l, h, w,}
end

function makeEllipse(tPar, tSeed)
	local L, W, h, v = srandomSet2(tSeed, tPar[2] - tPar[5], tPar[2], tPar[3] - tPar[5], tPar[3], -tPar[4], tPar[4])
	local v = srandom3(tSeed, 360)
	return {L * cos(v), h, W * sin(v),}
end

function makeParabola(tPar, tSeed)
	local w, h, p = srandomSet2(tSeed, -tPar[3], tPar[3], -tPar[4], tPar[4])
	local p = srandomSign(tSeed)
	return
	{
		sqrt(4 * w * tPar[2]) * p + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
		h,
		w + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
	}
end

function makeHyperbola(tPar, tSeed)
	local h, v = srandom3(tSeed, -tPar[4], tPar[4]), srandom3(tSeed, 360)
	return
	{
		tPar[2]/cos(v) + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
		h,
		tPar[3] * tan(v) + srandom3(tSeed, -tPar[5]/2, tPar[5]/2),
	}
end

function makeHypotrochoid(tPar, tSeed)
	local v, o, u = srandomSet(tSeed,360,360,180)
	return
	{
		(tPar[2] - tPar[3]) * cos(v * tPar[6]) + tPar[5] * cos((tPar[2] - tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * sin(u) * cos(o),
		0													+ tPar[4] * sin(u) * sin(o),
		(tPar[2] - tPar[3]) * sin(v * tPar[6]) - tPar[5] * sin((tPar[2] - tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * cos(u),
	}
end

function makeEpitrochoid(tPar, tSeed)
	local v, o, u = srandomSet(tSeed,360,360,180)
	return
	{
		(tPar[2] + tPar[3]) * cos(v * tPar[6]) - tPar[5] * cos((tPar[2] + tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * sin(u) * cos(o),
		0													+ tPar[4] * sin(u) * sin(o),
		(tPar[2] + tPar[3]) * sin(v * tPar[6]) - tPar[5] * sin((tPar[2] + tPar[3])/tPar[3] * v * tPar[6])	+ tPar[4] * cos(u),
	}
end


--------------------------------------------------------------------------------
-- Debug functions
--

function print_map_stats()
	local total = iStartPoints + iPoints + iSpheres + iCameras + iSquadrons + iAsteroids + iSalvage + iPebbles + iClouds + iDustClouds + iNebulas + iDirLights + iRvAsteroids + iRvSquadrons
	print("Level loaded: " .. levelDesc)
	print("Maxplayers: " .. maxPlayers)
	print
	(
		"\niStartPoints = " .. iStartPoints ..
		"\n     iPoints = " ..      iPoints ..
		"\n    iSpheres = " ..     iSpheres ..
		"\n    iCameras = " ..     iCameras ..
		"\n  iSquadrons = " ..   iSquadrons ..
		"\n  iAsteroids = " ..   iAsteroids ..
		"\n    iSalvage = " ..     iSalvage ..
		"\n    iPebbles = " ..     iPebbles ..
		"\n     iClouds = " ..      iClouds ..
		"\n iDustClouds = " ..  iDustClouds ..
		"\n    iNebulas = " ..     iNebulas ..
		"\n  iDirLights = " ..   iDirLights ..
		"\niRvAsteroids = " .. iRvAsteroids ..
		"\niRvSquadrons = " .. iRvSquadrons ..
		"\n       total = " ..        total
	)
end
